{
    "openapi": "3.0.0",
    "servers": [
        {
            "url": "https://cognito-idp.amazonaws.com/"
        },
        {
            "url": "http://cognito-idp.amazonaws.com/"
        }
    ],
    "x-hasEquivalentPaths": true,
    "info": {
        "contact": {
            "email": "mike.ralphson@gmail.com",
            "name": "Mike Ralphson",
            "url": "https://github.com/mermade/aws2openapi",
            "x-twitter": "PermittedSoc"
        },
        "description": "<p>Using the Amazon Cognito User Pools API, you can create a user pool to manage directories and users. You can authenticate a user to obtain tokens related to user identity and access policies.</p> <p>This API reference provides information about user pools in Amazon Cognito User Pools.</p> <p>For more information, see the Amazon Cognito Documentation.</p>",
        "license": {
            "name": "Apache 2.0 License",
            "url": "http://www.apache.org/licenses/"
        },
        "termsOfService": "https://aws.amazon.com/service-terms/",
        "title": "Amazon Cognito Identity Provider",
        "version": "2016-04-18",
        "x-apiClientRegistration": {
            "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
        },
        "x-apisguru-categories": [
            "cloud"
        ],
        "x-logo": {
            "backgroundColor": "#FFFFFF",
            "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.jpeg"
        },
        "x-origin": [
            {
                "contentType": "application/json",
                "converter": {
                    "url": "https://github.com/mermade/aws2openapi",
                    "version": "1.0.0"
                },
                "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/cognito-idp-2016-04-18.normal.json",
                "x-apisguru-direct": true
            }
        ],
        "x-preferred": true,
        "x-providerName": "amazonaws.com",
        "x-release": "v4",
        "x-serviceName": "cognito-idp"
    },
    "externalDocs": {
        "description": "Amazon Web Services documentation",
        "url": "https://aws.amazon.com/cognito-idp/"
    },
    "security": [
        {
            "hmac": []
        }
    ],
    "paths": {
        "/": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Adds additional user attributes to the user pool schema.",
                "operationId": "AddCustomAttributes",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server for the request to add custom attributes.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserImportInProgressException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to add custom attributes.",
                                "properties": {
                                    "CustomAttributes": {
                                        "description": "An array of custom attributes, such as Mutable and Name.",
                                        "items": {
                                            "description": "Contains information about the schema attribute.",
                                            "properties": {
                                                "AttributeDataType": {
                                                    "description": "The attribute data type.",
                                                    "enum": [
                                                        "String",
                                                        "Number",
                                                        "DateTime",
                                                        "Boolean"
                                                    ],
                                                    "type": "string"
                                                },
                                                "DeveloperOnlyAttribute": {
                                                    "description": "Specifies whether the attribute type is developer only.",
                                                    "type": "boolean"
                                                },
                                                "Mutable": {
                                                    "description": "<p>Specifies whether the value of the attribute can be changed.</p> <p>For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html\">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>",
                                                    "type": "boolean"
                                                },
                                                "Name": {
                                                    "description": "A schema attribute of the name type.",
                                                    "maxLength": 20,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "NumberAttributeConstraints": {
                                                    "description": "Specifies the constraints for an attribute of the number type.",
                                                    "properties": {
                                                        "MaxValue": {
                                                            "description": "The maximum value of an attribute that is of the number data type.",
                                                            "type": "string"
                                                        },
                                                        "MinValue": {
                                                            "description": "The minimum value of an attribute that is of the number data type.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "Required": {
                                                    "description": "Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.",
                                                    "type": "boolean"
                                                },
                                                "StringAttributeConstraints": {
                                                    "description": "Specifies the constraints for an attribute of the string type.",
                                                    "properties": {
                                                        "MaxLength": {
                                                            "description": "The maximum length.",
                                                            "type": "string"
                                                        },
                                                        "MinLength": {
                                                            "description": "The minimum length.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "maxItems": 25,
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool where you want to add custom attributes.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "CustomAttributes"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminAddUserToGroup": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Adds the specified user to the specified group.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminAddUserToGroup",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "GroupName": {
                                        "description": "The group name.",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The username for the user.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username",
                                    "GroupName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminConfirmSignUp": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Confirms user registration as an admin without using a confirmation code. Works on any user.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminConfirmSignUp",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server for the request to confirm registration.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "UnexpectedLambdaException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "UserLambdaValidationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "TooManyFailedAttemptsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InvalidLambdaResponseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "490": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to confirm user registration.",
                                "properties": {
                                    "UserPoolId": {
                                        "description": "The user pool ID for which you want to confirm user registration.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The user name for which you want to confirm user registration.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminCreateUser": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Creates a new user in the specified user pool.</p> <p>If <code>MessageAction</code> is not set, the default is to send a welcome message via email or phone (SMS).</p> <note> <p>This message is based on a template that you configured in your call to or . This template includes your custom sign-up instructions and placeholders for user name and temporary password.</p> </note> <p>Alternatively, you can call AdminCreateUser with “SUPPRESS” for the <code>MessageAction</code> parameter, and Amazon Cognito will not send any email. </p> <p>In either case, the user will be in the <code>FORCE_CHANGE_PASSWORD</code> state until they sign in and change their password.</p> <p>AdminCreateUser requires developer credentials.</p>",
                "operationId": "AdminCreateUser",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server to the request to create the user.",
                                    "properties": {
                                        "User": {
                                            "description": "The newly created user.",
                                            "properties": {
                                                "Attributes": {
                                                    "description": "A container with information about the user type attributes.",
                                                    "items": {
                                                        "description": "Specifies whether the attribute is standard or custom.",
                                                        "properties": {
                                                            "Name": {
                                                                "description": "The name of the attribute.",
                                                                "maxLength": 32,
                                                                "minLength": 1,
                                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                                "type": "string"
                                                            },
                                                            "Value": {
                                                                "description": "The value of the attribute.",
                                                                "format": "password",
                                                                "maxLength": 2048,
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "Name"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "Enabled": {
                                                    "description": "Specifies whether the user is enabled.",
                                                    "type": "boolean"
                                                },
                                                "MFAOptions": {
                                                    "description": "The MFA options for the user.",
                                                    "items": {
                                                        "description": "Specifies the different settings for multi-factor authentication (MFA).",
                                                        "properties": {
                                                            "AttributeName": {
                                                                "description": "The attribute name of the MFA option type.",
                                                                "maxLength": 32,
                                                                "minLength": 1,
                                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                                "type": "string"
                                                            },
                                                            "DeliveryMedium": {
                                                                "description": "The delivery medium (email message or SMS message) to send the MFA code.",
                                                                "enum": [
                                                                    "SMS",
                                                                    "EMAIL"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "UserCreateDate": {
                                                    "description": "The creation date of the user.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "UserLastModifiedDate": {
                                                    "description": "The last modified date of the user.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "UserStatus": {
                                                    "description": "<p>The user status. Can be one of the following:</p> <ul> <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li> <li> <p>CONFIRMED - User has been confirmed.</p> </li> <li> <p>ARCHIVED - User is no longer active.</p> </li> <li> <p>COMPROMISED - User is disabled due to a potential security threat.</p> </li> <li> <p>UNKNOWN - User status is not known.</p> </li> </ul>",
                                                    "enum": [
                                                        "UNCONFIRMED",
                                                        "CONFIRMED",
                                                        "ARCHIVED",
                                                        "COMPROMISED",
                                                        "UNKNOWN",
                                                        "RESET_REQUIRED",
                                                        "FORCE_CHANGE_PASSWORD"
                                                    ],
                                                    "type": "string"
                                                },
                                                "Username": {
                                                    "description": "The user name of the user you wish to describe.",
                                                    "format": "password",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "UsernameExistsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InvalidPasswordException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "CodeDeliveryFailureException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "UnexpectedLambdaException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "UserLambdaValidationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "InvalidLambdaResponseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "PreconditionNotMetException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "490": {
                        "description": "InvalidSmsRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "491": {
                        "description": "InvalidSmsRoleTrustRelationshipException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "492": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "493": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "494": {
                        "description": "UnsupportedUserStateException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "495": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to create a user in the specified user pool.",
                                "properties": {
                                    "DesiredDeliveryMediums": {
                                        "description": "Specify <code>\"EMAIL\"</code> if email will be used to send the welcome message. Specify <code>\"SMS\"</code> if the phone number will be used. The default value is <code>\"SMS\"</code>. More than one value can be specified.",
                                        "items": {
                                            "enum": [
                                                "SMS",
                                                "EMAIL"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "ForceAliasCreation": {
                                        "description": "<p>This parameter is only used if the <code>phone_number_verified</code> or <code>email_verified</code> attribute is set to <code>True</code>. Otherwise, it is ignored.</p> <p>If this parameter is set to <code>True</code> and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias.</p> <p>If this parameter is set to <code>False</code>, the API throws an <code>AliasExistsException</code> error if the alias already exists. The default value is <code>False</code>.</p>",
                                        "type": "boolean"
                                    },
                                    "MessageAction": {
                                        "description": "Set to <code>\"RESEND\"</code> to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to <code>\"SUPPRESS\"</code> to suppress sending the message. Only one value can be specified.",
                                        "enum": [
                                            "RESEND",
                                            "SUPPRESS"
                                        ],
                                        "type": "string"
                                    },
                                    "TemporaryPassword": {
                                        "description": "<p>The user's temporary password. This password must conform to the password policy that you specified when you created the user pool.</p> <p>The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page along with a new password to be used in all future sign-ins.</p> <p>This parameter is not required. If you do not specify a value, Amazon Cognito generates one for you.</p> <p>The temporary password can only be used until the user account expiration limit that you specified when you created the user pool. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the <code>MessageAction</code> parameter.</p>",
                                        "format": "password",
                                        "maxLength": 256,
                                        "minLength": 6,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    },
                                    "UserAttributes": {
                                        "description": "<p>An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes other than <code>Username</code>. However, any attributes that you specify as required (in or in the <b>Attributes</b> tab of the console) must be supplied either by you (in your call to <code>AdminCreateUser</code>) or by the user (when he or she signs up in response to your welcome message).</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p> <p>To send a message inviting the user to sign up, you must specify the user's email address or phone number. This can be done in your call to AdminCreateUser or in the <b>Users</b> tab of the Amazon Cognito console for managing your user pools.</p> <p>In your call to <code>AdminCreateUser</code>, you can set the <code>email_verified</code> attribute to <code>True</code>, and you can set the <code>phone_number_verified</code> attribute to <code>True</code>. (You can also do this by calling .)</p> <ul> <li> <p> <b>email</b>: The email address of the user to whom the message that contains the code and username will be sent. Required if the <code>email_verified</code> attribute is set to <code>True</code>, or if <code>\"EMAIL\"</code> is specified in the <code>DesiredDeliveryMediums</code> parameter.</p> </li> <li> <p> <b>phone_number</b>: The phone number of the user to whom the message that contains the code and username will be sent. Required if the <code>phone_number_verified</code> attribute is set to <code>True</code>, or if <code>\"SMS\"</code> is specified in the <code>DesiredDeliveryMediums</code> parameter.</p> </li> </ul>",
                                        "items": {
                                            "description": "Specifies whether the attribute is standard or custom.",
                                            "properties": {
                                                "Name": {
                                                    "description": "The name of the attribute.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "Value": {
                                                    "description": "The value of the attribute.",
                                                    "format": "password",
                                                    "maxLength": 2048,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "Name"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool where the user will be created.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "ValidationData": {
                                        "description": "<p>The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. For example, you might choose to allow or disallow user sign-up based on the user's domain.</p> <p>To configure custom validation, you must create a Pre Sign-up Lambda trigger for the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger receives the validation data and uses it in the validation process.</p> <p>The user's validation data is not persisted.</p>",
                                        "items": {
                                            "description": "Specifies whether the attribute is standard or custom.",
                                            "properties": {
                                                "Name": {
                                                    "description": "The name of the attribute.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "Value": {
                                                    "description": "The value of the attribute.",
                                                    "format": "password",
                                                    "maxLength": 2048,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "Name"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminDeleteUser": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Deletes a user as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminDeleteUser",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to delete a user as an administrator.",
                                "properties": {
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool where you want to delete the user.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The user name of the user you wish to delete.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminDeleteUserAttributes": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Deletes the user attributes in a user pool as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminDeleteUserAttributes",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response received from the server for a request to delete user attributes.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to delete user attributes as an administrator.",
                                "properties": {
                                    "UserAttributeNames": {
                                        "description": "<p>An array of strings representing the user attribute names you wish to delete.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>",
                                        "items": {
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool where you want to delete user attributes.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The user name of the user from which you would like to delete attributes.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username",
                                    "UserAttributeNames"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminDisableProviderForUser": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Disables the user from signing in with the specified external (SAML or social) identity provider. If the user to disable is a Cognito User Pools native username + password user, they are not permitted to use their password to sign-in. If the user to disable is a linked external IdP user, any link between that user and an existing user is removed. The next time the external user (no longer attached to the previously linked <code>DestinationUser</code>) signs in, they must create a new user account. See .</p> <p>This action is enabled only for admin access and requires developer credentials.</p> <p>The <code>ProviderName</code> must match the value specified when creating an IdP for the pool. </p> <p>To disable a native username + password user, the <code>ProviderName</code> value must be <code>Cognito</code> and the <code>ProviderAttributeName</code> must be <code>Cognito_Subject</code>, with the <code>ProviderAttributeValue</code> being the name that is used in the user pool for the user.</p> <p>The <code>ProviderAttributeName</code> must always be <code>Cognito_Subject</code> for social identity providers. The <code>ProviderAttributeValue</code> must always be the exact subject that was used when the user was originally linked as a source user.</p> <p>For de-linking a SAML identity, there are two scenarios. If the linked identity has not yet been used to sign-in, the <code>ProviderAttributeName</code> and <code>ProviderAttributeValue</code> must be the same values that were used for the <code>SourceUser</code> when the identities were originally linked in the call. (If the linking was done with <code>ProviderAttributeName</code> set to <code>Cognito_Subject</code>, the same applies here). However, if the user has already signed in, the <code>ProviderAttributeName</code> must be <code>Cognito_Subject</code> and <code>ProviderAttributeValue</code> must be the subject of the SAML assertion.</p>",
                "operationId": "AdminDisableProviderForUser",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "AliasExistsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "User": {
                                        "description": "The user to be disabled.",
                                        "properties": {
                                            "ProviderAttributeName": {
                                                "description": "The name of the provider attribute to link to, for example, <code>NameID</code>.",
                                                "type": "string"
                                            },
                                            "ProviderAttributeValue": {
                                                "description": "The value of the provider attribute to link to, for example, <code>xxxxx_account</code>.",
                                                "type": "string"
                                            },
                                            "ProviderName": {
                                                "description": "The name of the provider, for example, Facebook, Google, or Login with Amazon.",
                                                "maxLength": 32,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "User"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminDisableUser": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Disables the specified user as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminDisableUser",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response received from the server to disable the user as an administrator.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to disable any user as an administrator.",
                                "properties": {
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool where you want to disable the user.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The user name of the user you wish to disable.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminEnableUser": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Enables the specified user as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminEnableUser",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server for the request to enable a user as an administrator.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request that enables the user as an administrator.",
                                "properties": {
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool where you want to enable the user.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The user name of the user you wish to enable.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminForgetDevice": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Forgets the device, as an administrator.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminForgetDevice",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InvalidUserPoolConfigurationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Sends the forgot device request, as an administrator.",
                                "properties": {
                                    "DeviceKey": {
                                        "description": "The device key.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-f-]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The user name.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username",
                                    "DeviceKey"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminGetDevice": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Gets the device, as an administrator.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminGetDevice",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Gets the device response, as an administrator.",
                                    "properties": {
                                        "Device": {
                                            "description": "The device.",
                                            "properties": {
                                                "DeviceAttributes": {
                                                    "description": "The device attributes.",
                                                    "items": {
                                                        "description": "Specifies whether the attribute is standard or custom.",
                                                        "properties": {
                                                            "Name": {
                                                                "description": "The name of the attribute.",
                                                                "maxLength": 32,
                                                                "minLength": 1,
                                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                                "type": "string"
                                                            },
                                                            "Value": {
                                                                "description": "The value of the attribute.",
                                                                "format": "password",
                                                                "maxLength": 2048,
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "Name"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "DeviceCreateDate": {
                                                    "description": "The creation date of the device.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "DeviceKey": {
                                                    "description": "The device key.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-f-]+",
                                                    "type": "string"
                                                },
                                                "DeviceLastAuthenticatedDate": {
                                                    "description": "The date in which the device was last authenticated.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "DeviceLastModifiedDate": {
                                                    "description": "The last modified date of the device.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "Device"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InvalidUserPoolConfigurationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to get the device, as an administrator.",
                                "properties": {
                                    "DeviceKey": {
                                        "description": "The device key.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-f-]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The user name.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "DeviceKey",
                                    "UserPoolId",
                                    "Username"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminGetUser": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Gets the specified user by user name in a user pool as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminGetUser",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server from the request to get the specified user as an administrator.",
                                    "properties": {
                                        "Enabled": {
                                            "description": "Indicates that the status is enabled.",
                                            "type": "boolean"
                                        },
                                        "MFAOptions": {
                                            "description": "Specifies the options for MFA (e.g., email or phone number).",
                                            "items": {
                                                "description": "Specifies the different settings for multi-factor authentication (MFA).",
                                                "properties": {
                                                    "AttributeName": {
                                                        "description": "The attribute name of the MFA option type.",
                                                        "maxLength": 32,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    },
                                                    "DeliveryMedium": {
                                                        "description": "The delivery medium (email message or SMS message) to send the MFA code.",
                                                        "enum": [
                                                            "SMS",
                                                            "EMAIL"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "PreferredMfaSetting": {
                                            "description": "The user's preferred MFA setting.",
                                            "type": "string"
                                        },
                                        "UserAttributes": {
                                            "description": "An array of name-value pairs representing user attributes.",
                                            "items": {
                                                "description": "Specifies whether the attribute is standard or custom.",
                                                "properties": {
                                                    "Name": {
                                                        "description": "The name of the attribute.",
                                                        "maxLength": 32,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    },
                                                    "Value": {
                                                        "description": "The value of the attribute.",
                                                        "format": "password",
                                                        "maxLength": 2048,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "Name"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "UserCreateDate": {
                                            "description": "The date the user was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "UserLastModifiedDate": {
                                            "description": "The date the user was last modified.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "UserMFASettingList": {
                                            "description": "The list of the user's MFA settings.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "UserStatus": {
                                            "description": "<p>The user status. Can be one of the following:</p> <ul> <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li> <li> <p>CONFIRMED - User has been confirmed.</p> </li> <li> <p>ARCHIVED - User is no longer active.</p> </li> <li> <p>COMPROMISED - User is disabled due to a potential security threat.</p> </li> <li> <p>UNKNOWN - User status is not known.</p> </li> </ul>",
                                            "enum": [
                                                "UNCONFIRMED",
                                                "CONFIRMED",
                                                "ARCHIVED",
                                                "COMPROMISED",
                                                "UNKNOWN",
                                                "RESET_REQUIRED",
                                                "FORCE_CHANGE_PASSWORD"
                                            ],
                                            "type": "string"
                                        },
                                        "Username": {
                                            "description": "The user name of the user about whom you are receiving information.",
                                            "format": "password",
                                            "maxLength": 128,
                                            "minLength": 1,
                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "Username"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to get the specified user as an administrator.",
                                "properties": {
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool where you want to get information about the user.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The user name of the user you wish to retrieve.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminInitiateAuth": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Initiates the authentication flow, as an administrator.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminInitiateAuth",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Initiates the authentication response, as an administrator.",
                                    "properties": {
                                        "AuthenticationResult": {
                                            "description": "The result of the authentication response. This is only returned if the caller does not need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, <code>ChallengeName</code>, <code>ChallengeParameters</code>, and <code>Session</code> are returned.",
                                            "properties": {
                                                "AccessToken": {
                                                    "description": "The access token.",
                                                    "format": "password",
                                                    "pattern": "[A-Za-z0-9-_=.]+",
                                                    "type": "string"
                                                },
                                                "ExpiresIn": {
                                                    "description": "The expiration period of the authentication result in seconds.",
                                                    "type": "integer"
                                                },
                                                "IdToken": {
                                                    "description": "The ID token.",
                                                    "format": "password",
                                                    "pattern": "[A-Za-z0-9-_=.]+",
                                                    "type": "string"
                                                },
                                                "NewDeviceMetadata": {
                                                    "description": "The new device metadata from an authentication result.",
                                                    "properties": {
                                                        "DeviceGroupKey": {
                                                            "description": "The device group key.",
                                                            "type": "string"
                                                        },
                                                        "DeviceKey": {
                                                            "description": "The device key.",
                                                            "maxLength": 55,
                                                            "minLength": 1,
                                                            "pattern": "[\\w-]+_[0-9a-f-]+",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "RefreshToken": {
                                                    "description": "The refresh token.",
                                                    "format": "password",
                                                    "pattern": "[A-Za-z0-9-_=.]+",
                                                    "type": "string"
                                                },
                                                "TokenType": {
                                                    "description": "The token type.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "ChallengeName": {
                                            "description": "<p>The name of the challenge which you are responding to with this call. This is returned to you in the <code>AdminInitiateAuth</code> response if you need to pass another challenge.</p> <ul> <li> <p> <code>MFA_SETUP</code>: If MFA is required, users who do not have at least one of the MFA methods set up are presented with an <code>MFA_SETUP</code> challenge. The user must set up at least one MFA type to continue to authenticate.</p> </li> <li> <p> <code>SELECT_MFA_TYPE</code>: Selects the MFA type. Valid MFA options are <code>SMS_MFA</code> for text SMS MFA, and <code>SOFTWARE_TOKEN_MFA</code> for TOTP software token MFA.</p> </li> <li> <p> <code>SMS_MFA</code>: Next challenge is to supply an <code>SMS_MFA_CODE</code>, delivered via SMS.</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: Next challenge is to supply <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after the client-side SRP calculations.</p> </li> <li> <p> <code>CUSTOM_CHALLENGE</code>: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.</p> </li> <li> <p> <code>DEVICE_SRP_AUTH</code>: If device tracking was enabled on your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.</p> </li> <li> <p> <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to <code>PASSWORD_VERIFIER</code>, but for devices only.</p> </li> <li> <p> <code>ADMIN_NO_SRP_AUTH</code>: This is returned if you need to authenticate with <code>USERNAME</code> and <code>PASSWORD</code> directly. An app client must be enabled to use this flow.</p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: For users which are required to change their passwords after successful first login. This challenge should be passed with <code>NEW_PASSWORD</code> and any other required attributes.</p> </li> </ul>",
                                            "enum": [
                                                "SMS_MFA",
                                                "SOFTWARE_TOKEN_MFA",
                                                "SELECT_MFA_TYPE",
                                                "MFA_SETUP",
                                                "PASSWORD_VERIFIER",
                                                "CUSTOM_CHALLENGE",
                                                "DEVICE_SRP_AUTH",
                                                "DEVICE_PASSWORD_VERIFIER",
                                                "ADMIN_NO_SRP_AUTH",
                                                "NEW_PASSWORD_REQUIRED"
                                            ],
                                            "type": "string"
                                        },
                                        "ChallengeParameters": {
                                            "description": "<p>The challenge parameters. These are returned to you in the <code>AdminInitiateAuth</code> response if you need to pass another challenge. The responses in this parameter should be used to compute inputs to the next call (<code>AdminRespondToAuthChallenge</code>).</p> <p>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable).</p> <p>The value of the <code>USER_ID_FOR_SRP</code> attribute will be the user's actual username, not an alias (such as email address or phone number), even if you specified an alias in your call to <code>AdminInitiateAuth</code>. This is because, in the <code>AdminRespondToAuthChallenge</code> API <code>ChallengeResponses</code>, the <code>USERNAME</code> attribute cannot be an alias.</p>",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "Session": {
                                            "description": "The session which should be passed both ways in challenge-response calls to the service. If <code>AdminInitiateAuth</code> or <code>AdminRespondToAuthChallenge</code> API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>AdminRespondToAuthChallenge</code> API call.",
                                            "maxLength": 2048,
                                            "minLength": 20,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UnexpectedLambdaException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InvalidUserPoolConfigurationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "UserLambdaValidationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "InvalidLambdaResponseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "MFAMethodNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "490": {
                        "description": "InvalidSmsRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "491": {
                        "description": "InvalidSmsRoleTrustRelationshipException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "492": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "493": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "494": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Initiates the authorization request, as an administrator.",
                                "properties": {
                                    "AnalyticsMetadata": {
                                        "description": "The analytics metadata for collecting Amazon Pinpoint metrics for <code>AdminInitiateAuth</code> calls.",
                                        "properties": {
                                            "AnalyticsEndpointId": {
                                                "description": "The endpoint ID.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "AuthFlow": {
                                        "description": "<p>The authentication flow for this call to execute. The API action will depend on this value. For example:</p> <ul> <li> <p> <code>REFRESH_TOKEN_AUTH</code> will take in a valid refresh token and return new tokens.</p> </li> <li> <p> <code>USER_SRP_AUTH</code> will take in <code>USERNAME</code> and <code>SRP_A</code> and return the SRP variables to be used for next challenge execution.</p> </li> <li> <p> <code>USER_PASSWORD_AUTH</code> will take in <code>USERNAME</code> and <code>PASSWORD</code> and return the next challenge or tokens.</p> </li> </ul> <p>Valid values include:</p> <ul> <li> <p> <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote Password (SRP) protocol.</p> </li> <li> <p> <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.</p> </li> <li> <p> <code>CUSTOM_AUTH</code>: Custom authentication flow.</p> </li> <li> <p> <code>ADMIN_NO_SRP_AUTH</code>: Non-SRP authentication flow; you can pass in the USERNAME and PASSWORD directly if the flow is enabled for calling the app client.</p> </li> <li> <p> <code>USER_PASSWORD_AUTH</code>: Non-SRP authentication flow; USERNAME and PASSWORD are passed directly. If a user migration Lambda trigger is set, this flow will invoke the user migration Lambda if the USERNAME is not found in the user pool. </p> </li> </ul>",
                                        "enum": [
                                            "USER_SRP_AUTH",
                                            "REFRESH_TOKEN_AUTH",
                                            "REFRESH_TOKEN",
                                            "CUSTOM_AUTH",
                                            "ADMIN_NO_SRP_AUTH",
                                            "USER_PASSWORD_AUTH"
                                        ],
                                        "type": "string"
                                    },
                                    "AuthParameters": {
                                        "description": "<p>The authentication parameters. These are inputs corresponding to the <code>AuthFlow</code> that you are invoking. The required values depend on the value of <code>AuthFlow</code>:</p> <ul> <li> <p>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required), <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>: <code>REFRESH_TOKEN</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>ADMIN_NO_SRP_AUTH</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (if app client is configured with client secret), <code>PASSWORD</code> (required), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (if app client is configured with client secret), <code>DEVICE_KEY</code> </p> </li> </ul>",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "ClientId": {
                                        "description": "The app client ID.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+]+",
                                        "type": "string"
                                    },
                                    "ClientMetadata": {
                                        "description": "This is a random key-value pair map which can contain any key and will be passed to your PreAuthentication Lambda trigger as-is. It can be used to implement additional validations around authentication.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "ContextData": {
                                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                        "properties": {
                                            "EncodedData": {
                                                "description": "Encoded data containing device fingerprinting details, collected using the Amazon Cognito context data collection library.",
                                                "type": "string"
                                            },
                                            "HttpHeaders": {
                                                "description": "HttpHeaders received on your server in same order.",
                                                "items": {
                                                    "description": "The HTTP header.",
                                                    "properties": {
                                                        "headerName": {
                                                            "description": "The header name",
                                                            "type": "string"
                                                        },
                                                        "headerValue": {
                                                            "description": "The header value.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "IpAddress": {
                                                "description": "Source IP address of your user.",
                                                "type": "string"
                                            },
                                            "ServerName": {
                                                "description": "Your server endpoint where this API is invoked.",
                                                "type": "string"
                                            },
                                            "ServerPath": {
                                                "description": "Your server path where this API is invoked. ",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "IpAddress",
                                            "ServerName",
                                            "ServerPath",
                                            "HttpHeaders"
                                        ],
                                        "type": "object"
                                    },
                                    "UserPoolId": {
                                        "description": "The ID of the Amazon Cognito user pool.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "ClientId",
                                    "AuthFlow"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminLinkProviderForUser": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Links an existing user account in a user pool (<code>DestinationUser</code>) to an identity from an external identity provider (<code>SourceUser</code>) based on a specified attribute name and value from the external identity provider. This allows you to create a link from the existing user account to an external federated user identity that has not yet been used to sign in, so that the federated user identity can be used to sign in as the existing user account. </p> <p> For example, if there is an existing user with a username and password, this API links that user to a federated user identity, so that when the federated user identity is used, the user signs in as the existing user account. </p> <important> <p>Because this API allows a user with an external federated identity to sign in as an existing user in the user pool, it is critical that it only be used with external identity providers and provider attributes that have been trusted by the application owner.</p> </important> <p>See also .</p> <p>This action is enabled only for admin access and requires developer credentials.</p>",
                "operationId": "AdminLinkProviderForUser",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "AliasExistsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "DestinationUser": {
                                        "description": "<p>The existing user in the user pool to be linked to the external identity provider user account. Can be a native (Username + Password) Cognito User Pools user or a federated user (for example, a SAML or Facebook user). If the user doesn't exist, an exception is thrown. This is the user that is returned when the new user (with the linked identity provider attribute) signs in.</p> <p>For a native username + password user, the <code>ProviderAttributeValue</code> for the <code>DestinationUser</code> should be the username in the user pool. For a federated user, it should be the provider-specific <code>user_id</code>.</p> <p>The <code>ProviderAttributeName</code> of the <code>DestinationUser</code> is ignored.</p> <p>The <code>ProviderName</code> should be set to <code>Cognito</code> for users in Cognito user pools.</p>",
                                        "properties": {
                                            "ProviderAttributeName": {
                                                "description": "The name of the provider attribute to link to, for example, <code>NameID</code>.",
                                                "type": "string"
                                            },
                                            "ProviderAttributeValue": {
                                                "description": "The value of the provider attribute to link to, for example, <code>xxxxx_account</code>.",
                                                "type": "string"
                                            },
                                            "ProviderName": {
                                                "description": "The name of the provider, for example, Facebook, Google, or Login with Amazon.",
                                                "maxLength": 32,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "SourceUser": {
                                        "description": "<p>An external identity provider account for a user who does not currently exist yet in the user pool. This user must be a federated user (for example, a SAML or Facebook user), not another native user.</p> <p>If the <code>SourceUser</code> is a federated social identity provider user (Facebook, Google, or Login with Amazon), you must set the <code>ProviderAttributeName</code> to <code>Cognito_Subject</code>. For social identity providers, the <code>ProviderName</code> will be <code>Facebook</code>, <code>Google</code>, or <code>LoginWithAmazon</code>, and Cognito will automatically parse the Facebook, Google, and Login with Amazon tokens for <code>id</code>, <code>sub</code>, and <code>user_id</code>, respectively. The <code>ProviderAttributeValue</code> for the user must be the same value as the <code>id</code>, <code>sub</code>, or <code>user_id</code> value found in the social identity provider token.</p> <p/> <p>For SAML, the <code>ProviderAttributeName</code> can be any value that matches a claim in the SAML assertion. If you wish to link SAML users based on the subject of the SAML assertion, you should map the subject to a claim through the SAML identity provider and submit that claim name as the <code>ProviderAttributeName</code>. If you set <code>ProviderAttributeName</code> to <code>Cognito_Subject</code>, Cognito will automatically parse the default unique identifier found in the subject from the SAML token.</p>",
                                        "properties": {
                                            "ProviderAttributeName": {
                                                "description": "The name of the provider attribute to link to, for example, <code>NameID</code>.",
                                                "type": "string"
                                            },
                                            "ProviderAttributeValue": {
                                                "description": "The value of the provider attribute to link to, for example, <code>xxxxx_account</code>.",
                                                "type": "string"
                                            },
                                            "ProviderName": {
                                                "description": "The name of the provider, for example, Facebook, Google, or Login with Amazon.",
                                                "maxLength": 32,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "DestinationUser",
                                    "SourceUser"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminListDevices": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Lists devices, as an administrator.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminListDevices",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Lists the device's response, as an administrator.",
                                    "properties": {
                                        "Devices": {
                                            "description": "The devices in the list of devices response.",
                                            "items": {
                                                "description": "The device type.",
                                                "properties": {
                                                    "DeviceAttributes": {
                                                        "description": "The device attributes.",
                                                        "items": {
                                                            "description": "Specifies whether the attribute is standard or custom.",
                                                            "properties": {
                                                                "Name": {
                                                                    "description": "The name of the attribute.",
                                                                    "maxLength": 32,
                                                                    "minLength": 1,
                                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                                    "type": "string"
                                                                },
                                                                "Value": {
                                                                    "description": "The value of the attribute.",
                                                                    "format": "password",
                                                                    "maxLength": 2048,
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "Name"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "DeviceCreateDate": {
                                                        "description": "The creation date of the device.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "DeviceKey": {
                                                        "description": "The device key.",
                                                        "maxLength": 55,
                                                        "minLength": 1,
                                                        "pattern": "[\\w-]+_[0-9a-f-]+",
                                                        "type": "string"
                                                    },
                                                    "DeviceLastAuthenticatedDate": {
                                                        "description": "The date in which the device was last authenticated.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "DeviceLastModifiedDate": {
                                                        "description": "The last modified date of the device.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "PaginationToken": {
                                            "description": "The pagination token.",
                                            "minLength": 1,
                                            "pattern": "[\\S]+",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InvalidUserPoolConfigurationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to list devices, as an administrator.",
                                "properties": {
                                    "Limit": {
                                        "description": "The limit of the devices request.",
                                        "maximum": 60,
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "PaginationToken": {
                                        "description": "The pagination token.",
                                        "minLength": 1,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The user name.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminListGroupsForUser": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Lists the groups that the user belongs to.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminListGroupsForUser",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Groups": {
                                            "description": "The groups that the user belongs to.",
                                            "items": {
                                                "description": "The group type.",
                                                "properties": {
                                                    "CreationDate": {
                                                        "description": "The date the group was created.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "Description": {
                                                        "description": "A string containing the description of the group.",
                                                        "maxLength": 2048,
                                                        "type": "string"
                                                    },
                                                    "GroupName": {
                                                        "description": "The name of the group.",
                                                        "maxLength": 128,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    },
                                                    "LastModifiedDate": {
                                                        "description": "The date the group was last modified.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "Precedence": {
                                                        "description": "<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user's tokens. Groups with higher <code>Precedence</code> values take precedence over groups with lower <code>Precedence</code> values or with null <code>Precedence</code> values.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    },
                                                    "RoleArn": {
                                                        "description": "The role ARN for the group.",
                                                        "maxLength": 2048,
                                                        "minLength": 20,
                                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                        "type": "string"
                                                    },
                                                    "UserPoolId": {
                                                        "description": "The user pool ID for the user pool.",
                                                        "maxLength": 55,
                                                        "minLength": 1,
                                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                                            "minLength": 1,
                                            "pattern": "[\\S]+",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Limit": {
                                        "description": "The limit of the request to list groups.",
                                        "maximum": 60,
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "NextToken": {
                                        "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                                        "minLength": 1,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The username for the user.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Username",
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminListUserAuthEvents": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Lists a history of user activity and any risks detected as part of Amazon Cognito advanced security.",
                "operationId": "AdminListUserAuthEvents",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "AuthEvents": {
                                            "description": "The response object. It includes the <code>EventID</code>, <code>EventType</code>, <code>CreationDate</code>, <code>EventRisk</code>, and <code>EventResponse</code>.",
                                            "items": {
                                                "description": "The authentication event type.",
                                                "properties": {
                                                    "ChallengeResponses": {
                                                        "description": "The challenge responses.",
                                                        "items": {
                                                            "description": "The challenge response type.",
                                                            "properties": {
                                                                "ChallengeName": {
                                                                    "description": "The challenge name",
                                                                    "enum": [
                                                                        "Password",
                                                                        "Mfa"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "ChallengeResponse": {
                                                                    "description": "The challenge response.",
                                                                    "enum": [
                                                                        "Success",
                                                                        "Failure"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "CreationDate": {
                                                        "description": "The creation date",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "EventContextData": {
                                                        "description": "The user context data captured at the time of an event request. It provides additional information about the client from which event the request is received.",
                                                        "properties": {
                                                            "City": {
                                                                "description": "The user's city.",
                                                                "type": "string"
                                                            },
                                                            "Country": {
                                                                "description": "The user's country.",
                                                                "type": "string"
                                                            },
                                                            "DeviceName": {
                                                                "description": "The user's device name.",
                                                                "type": "string"
                                                            },
                                                            "IpAddress": {
                                                                "description": "The user's IP address.",
                                                                "type": "string"
                                                            },
                                                            "Timezone": {
                                                                "description": "The user's time zone.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "EventFeedback": {
                                                        "description": "A flag specifying the user feedback captured at the time of an event request is good or bad. ",
                                                        "properties": {
                                                            "FeedbackDate": {
                                                                "description": "The event feedback date.",
                                                                "format": "date-time",
                                                                "type": "string"
                                                            },
                                                            "FeedbackValue": {
                                                                "description": "The event feedback value.",
                                                                "enum": [
                                                                    "Valid",
                                                                    "Invalid"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "Provider": {
                                                                "description": "The provider.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "FeedbackValue",
                                                            "Provider"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "EventId": {
                                                        "description": "The event ID.",
                                                        "type": "string"
                                                    },
                                                    "EventResponse": {
                                                        "description": "The event response.",
                                                        "enum": [
                                                            "Success",
                                                            "Failure"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "EventRisk": {
                                                        "description": "The event risk.",
                                                        "properties": {
                                                            "RiskDecision": {
                                                                "description": "The risk decision.",
                                                                "enum": [
                                                                    "NoRisk",
                                                                    "AccountTakeover",
                                                                    "Block"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "RiskLevel": {
                                                                "description": "The risk level.",
                                                                "enum": [
                                                                    "Low",
                                                                    "Medium",
                                                                    "High"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "EventType": {
                                                        "description": "The event type.",
                                                        "enum": [
                                                            "SignIn",
                                                            "SignUp",
                                                            "ForgotPassword"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "A pagination token.",
                                            "minLength": 1,
                                            "pattern": "[\\S]+",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UserPoolAddOnNotEnabledException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "MaxResults": {
                                        "description": "The maximum number of authentication events to return.",
                                        "maximum": 60,
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "NextToken": {
                                        "description": "A pagination token.",
                                        "minLength": 1,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The user pool username or an alias.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminRemoveUserFromGroup": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Removes the specified user from the specified group.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminRemoveUserFromGroup",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "GroupName": {
                                        "description": "The group name.",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The username for the user.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username",
                                    "GroupName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminResetUserPassword": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Resets the specified user's password in a user pool as an administrator. Works on any user.</p> <p>When a developer calls this API, the current password is invalidated, so it must be changed. If a user tries to sign in after the API is called, the app will get a PasswordResetRequiredException exception back and should direct the user down the flow to reset the password, which is the same as the forgot password flow. In addition, if the user pool has phone verification selected and a verified phone number exists for the user, or if email verification is selected and a verified email exists for the user, calling this API will also result in sending a message to the end user with the code to change their password.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminResetUserPassword",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server to reset a user password as an administrator.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "UnexpectedLambdaException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "UserLambdaValidationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InvalidLambdaResponseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "InvalidSmsRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "490": {
                        "description": "InvalidEmailRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "491": {
                        "description": "InvalidSmsRoleTrustRelationshipException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "492": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to reset a user's password as an administrator.",
                                "properties": {
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool where you want to reset the user's password.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The user name of the user whose password you wish to reset.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminRespondToAuthChallenge": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Responds to an authentication challenge, as an administrator.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminRespondToAuthChallenge",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Responds to the authentication challenge, as an administrator.",
                                    "properties": {
                                        "AuthenticationResult": {
                                            "description": "The result returned by the server in response to the authentication request.",
                                            "properties": {
                                                "AccessToken": {
                                                    "description": "The access token.",
                                                    "format": "password",
                                                    "pattern": "[A-Za-z0-9-_=.]+",
                                                    "type": "string"
                                                },
                                                "ExpiresIn": {
                                                    "description": "The expiration period of the authentication result in seconds.",
                                                    "type": "integer"
                                                },
                                                "IdToken": {
                                                    "description": "The ID token.",
                                                    "format": "password",
                                                    "pattern": "[A-Za-z0-9-_=.]+",
                                                    "type": "string"
                                                },
                                                "NewDeviceMetadata": {
                                                    "description": "The new device metadata from an authentication result.",
                                                    "properties": {
                                                        "DeviceGroupKey": {
                                                            "description": "The device group key.",
                                                            "type": "string"
                                                        },
                                                        "DeviceKey": {
                                                            "description": "The device key.",
                                                            "maxLength": 55,
                                                            "minLength": 1,
                                                            "pattern": "[\\w-]+_[0-9a-f-]+",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "RefreshToken": {
                                                    "description": "The refresh token.",
                                                    "format": "password",
                                                    "pattern": "[A-Za-z0-9-_=.]+",
                                                    "type": "string"
                                                },
                                                "TokenType": {
                                                    "description": "The token type.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "ChallengeName": {
                                            "description": "The name of the challenge. For more information, see .",
                                            "enum": [
                                                "SMS_MFA",
                                                "SOFTWARE_TOKEN_MFA",
                                                "SELECT_MFA_TYPE",
                                                "MFA_SETUP",
                                                "PASSWORD_VERIFIER",
                                                "CUSTOM_CHALLENGE",
                                                "DEVICE_SRP_AUTH",
                                                "DEVICE_PASSWORD_VERIFIER",
                                                "ADMIN_NO_SRP_AUTH",
                                                "NEW_PASSWORD_REQUIRED"
                                            ],
                                            "type": "string"
                                        },
                                        "ChallengeParameters": {
                                            "description": "The challenge parameters. For more information, see .",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "Session": {
                                            "description": "The session which should be passed both ways in challenge-response calls to the service. If the or API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.",
                                            "maxLength": 2048,
                                            "minLength": 20,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "CodeMismatchException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ExpiredCodeException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UnexpectedLambdaException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InvalidPasswordException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "UserLambdaValidationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "InvalidLambdaResponseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "490": {
                        "description": "InvalidUserPoolConfigurationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "491": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "492": {
                        "description": "MFAMethodNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "493": {
                        "description": "InvalidSmsRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "494": {
                        "description": "InvalidSmsRoleTrustRelationshipException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "495": {
                        "description": "AliasExistsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "496": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "497": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "498": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "499": {
                        "description": "SoftwareTokenMFANotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "The request to respond to the authentication challenge, as an administrator.",
                                "properties": {
                                    "AnalyticsMetadata": {
                                        "description": "The analytics metadata for collecting Amazon Pinpoint metrics for <code>AdminRespondToAuthChallenge</code> calls.",
                                        "properties": {
                                            "AnalyticsEndpointId": {
                                                "description": "The endpoint ID.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "ChallengeName": {
                                        "description": "The challenge name. For more information, see .",
                                        "enum": [
                                            "SMS_MFA",
                                            "SOFTWARE_TOKEN_MFA",
                                            "SELECT_MFA_TYPE",
                                            "MFA_SETUP",
                                            "PASSWORD_VERIFIER",
                                            "CUSTOM_CHALLENGE",
                                            "DEVICE_SRP_AUTH",
                                            "DEVICE_PASSWORD_VERIFIER",
                                            "ADMIN_NO_SRP_AUTH",
                                            "NEW_PASSWORD_REQUIRED"
                                        ],
                                        "type": "string"
                                    },
                                    "ChallengeResponses": {
                                        "description": "<p>The challenge responses. These are inputs corresponding to the value of <code>ChallengeName</code>, for example:</p> <ul> <li> <p> <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p> </li> <li> <p> <code>ADMIN_NO_SRP_AUTH</code>: <code>PASSWORD</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret). </p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret). </p> </li> </ul> <p>The value of the <code>USERNAME</code> attribute must be the user's actual username, not an alias (such as email address or phone number). To make this easier, the <code>AdminInitiateAuth</code> response includes the actual username value in the <code>USERNAMEUSER_ID_FOR_SRP</code> attribute, even if you specified an alias in your call to <code>AdminInitiateAuth</code>.</p>",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "ClientId": {
                                        "description": "The app client ID.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+]+",
                                        "type": "string"
                                    },
                                    "ContextData": {
                                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                        "properties": {
                                            "EncodedData": {
                                                "description": "Encoded data containing device fingerprinting details, collected using the Amazon Cognito context data collection library.",
                                                "type": "string"
                                            },
                                            "HttpHeaders": {
                                                "description": "HttpHeaders received on your server in same order.",
                                                "items": {
                                                    "description": "The HTTP header.",
                                                    "properties": {
                                                        "headerName": {
                                                            "description": "The header name",
                                                            "type": "string"
                                                        },
                                                        "headerValue": {
                                                            "description": "The header value.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "IpAddress": {
                                                "description": "Source IP address of your user.",
                                                "type": "string"
                                            },
                                            "ServerName": {
                                                "description": "Your server endpoint where this API is invoked.",
                                                "type": "string"
                                            },
                                            "ServerPath": {
                                                "description": "Your server path where this API is invoked. ",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "IpAddress",
                                            "ServerName",
                                            "ServerPath",
                                            "HttpHeaders"
                                        ],
                                        "type": "object"
                                    },
                                    "Session": {
                                        "description": "The session which should be passed both ways in challenge-response calls to the service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The ID of the Amazon Cognito user pool.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "ClientId",
                                    "ChallengeName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminSetUserMFAPreference": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Sets the user's multi-factor authentication (MFA) preference.",
                "operationId": "AdminSetUserMFAPreference",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "SMSMfaSettings": {
                                        "description": "The SMS text message MFA settings.",
                                        "properties": {
                                            "Enabled": {
                                                "description": "Specifies whether SMS text message MFA is enabled.",
                                                "type": "boolean"
                                            },
                                            "PreferredMfa": {
                                                "description": "The preferred MFA method.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "SoftwareTokenMfaSettings": {
                                        "description": "The time-based one-time password software token MFA settings.",
                                        "properties": {
                                            "Enabled": {
                                                "description": "Specifies whether software token MFA is enabled.",
                                                "type": "boolean"
                                            },
                                            "PreferredMfa": {
                                                "description": "The preferred MFA method.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The user pool username or alias.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Username",
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminSetUserSettings": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Sets all the user settings for a specified user name. Works on any user.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminSetUserSettings",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server to set user settings as an administrator.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to set user settings as an administrator.",
                                "properties": {
                                    "MFAOptions": {
                                        "description": "Specifies the options for MFA (e.g., email or phone number).",
                                        "items": {
                                            "description": "Specifies the different settings for multi-factor authentication (MFA).",
                                            "properties": {
                                                "AttributeName": {
                                                    "description": "The attribute name of the MFA option type.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "DeliveryMedium": {
                                                    "description": "The delivery medium (email message or SMS message) to send the MFA code.",
                                                    "enum": [
                                                        "SMS",
                                                        "EMAIL"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool where you want to set the user's settings, such as MFA options.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The user name of the user for whom you wish to set user settings.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username",
                                    "MFAOptions"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminUpdateAuthEventFeedback": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Provides feedback for an authentication event as to whether it was from a valid user. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.",
                "operationId": "AdminUpdateAuthEventFeedback",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UserPoolAddOnNotEnabledException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "EventId": {
                                        "description": "The authentication event ID.",
                                        "maxLength": 50,
                                        "minLength": 1,
                                        "pattern": "[\\w+-]+",
                                        "type": "string"
                                    },
                                    "FeedbackValue": {
                                        "description": "The authentication event feedback value.",
                                        "enum": [
                                            "Valid",
                                            "Invalid"
                                        ],
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The user pool username.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username",
                                    "EventId",
                                    "FeedbackValue"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminUpdateDeviceStatus": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Updates the device status as an administrator.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminUpdateDeviceStatus",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The status response from the request to update the device, as an administrator.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InvalidUserPoolConfigurationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "The request to update the device status, as an administrator.",
                                "properties": {
                                    "DeviceKey": {
                                        "description": "The device key.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-f-]+",
                                        "type": "string"
                                    },
                                    "DeviceRememberedStatus": {
                                        "description": "The status indicating whether a device has been remembered or not.",
                                        "enum": [
                                            "remembered",
                                            "not_remembered"
                                        ],
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The user name.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username",
                                    "DeviceKey"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminUpdateUserAttributes": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Updates the specified user's attributes, including developer attributes, as an administrator. Works on any user.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p> <p>In addition to updating user attributes, this API can also be used to mark phone and email as verified.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminUpdateUserAttributes",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server for the request to update user attributes as an administrator.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "UnexpectedLambdaException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "UserLambdaValidationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InvalidLambdaResponseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "AliasExistsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to update the user's attributes as an administrator.",
                                "properties": {
                                    "UserAttributes": {
                                        "description": "<p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>",
                                        "items": {
                                            "description": "Specifies whether the attribute is standard or custom.",
                                            "properties": {
                                                "Name": {
                                                    "description": "The name of the attribute.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "Value": {
                                                    "description": "The value of the attribute.",
                                                    "format": "password",
                                                    "maxLength": 2048,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "Name"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool where you want to update user attributes.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The user name of the user for whom you want to update user attributes.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username",
                                    "UserAttributes"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AdminUserGlobalSignOut": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Signs out users from all devices, as an administrator.</p> <p>Requires developer credentials.</p>",
                "operationId": "AdminUserGlobalSignOut",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The global sign-out response, as an administrator.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "The request to sign out of all devices, as an administrator.",
                                "properties": {
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The user name.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#AssociateSoftwareToken": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Returns a unique generated shared secret key code for the user account. The request takes an access token or a session string, but not both.",
                "operationId": "AssociateSoftwareToken",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "SecretCode": {
                                            "description": "A unique generated shared secret code that is used in the TOTP algorithm to generate a one time code.",
                                            "format": "password",
                                            "minLength": 16,
                                            "pattern": "[A-Za-z0-9]+",
                                            "type": "string"
                                        },
                                        "Session": {
                                            "description": "The session which should be passed both ways in challenge-response calls to the service. This allows authentication of the user as part of the MFA setup process.",
                                            "maxLength": 2048,
                                            "minLength": 20,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "SoftwareTokenMFANotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "AccessToken": {
                                        "description": "The access token.",
                                        "format": "password",
                                        "pattern": "[A-Za-z0-9-_=.]+",
                                        "type": "string"
                                    },
                                    "Session": {
                                        "description": "The session which should be passed both ways in challenge-response calls to the service. This allows authentication of the user as part of the MFA setup process.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ChangePassword": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Changes the password for a specified user in a user pool.",
                "operationId": "ChangePassword",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The response from the server to the change password request.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InvalidPasswordException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to change a user password.",
                                "properties": {
                                    "AccessToken": {
                                        "description": "The access token.",
                                        "format": "password",
                                        "pattern": "[A-Za-z0-9-_=.]+",
                                        "type": "string"
                                    },
                                    "PreviousPassword": {
                                        "description": "The old password.",
                                        "format": "password",
                                        "maxLength": 256,
                                        "minLength": 6,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    },
                                    "ProposedPassword": {
                                        "description": "The new password.",
                                        "format": "password",
                                        "maxLength": 256,
                                        "minLength": 6,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "PreviousPassword",
                                    "ProposedPassword",
                                    "AccessToken"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ConfirmDevice": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Confirms tracking of the device. This API call is the call that begins device tracking.",
                "operationId": "ConfirmDevice",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Confirms the device response.",
                                    "properties": {
                                        "UserConfirmationNecessary": {
                                            "description": "Indicates whether the user confirmation is necessary to confirm the device response.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InvalidPasswordException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InvalidLambdaResponseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UsernameExistsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InvalidUserPoolConfigurationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "490": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "491": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Confirms the device request.",
                                "properties": {
                                    "AccessToken": {
                                        "description": "The access token.",
                                        "format": "password",
                                        "pattern": "[A-Za-z0-9-_=.]+",
                                        "type": "string"
                                    },
                                    "DeviceKey": {
                                        "description": "The device key.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-f-]+",
                                        "type": "string"
                                    },
                                    "DeviceName": {
                                        "description": "The device name.",
                                        "maxLength": 1024,
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "DeviceSecretVerifierConfig": {
                                        "description": "The configuration of the device secret verifier.",
                                        "properties": {
                                            "PasswordVerifier": {
                                                "description": "The password verifier.",
                                                "type": "string"
                                            },
                                            "Salt": {
                                                "description": "The salt.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "AccessToken",
                                    "DeviceKey"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ConfirmForgotPassword": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Allows a user to enter a confirmation code to reset a forgotten password.",
                "operationId": "ConfirmForgotPassword",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The response from the server that results from a user's request to retrieve a forgotten password.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "UnexpectedLambdaException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "UserLambdaValidationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InvalidPasswordException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "CodeMismatchException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "ExpiredCodeException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "TooManyFailedAttemptsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "InvalidLambdaResponseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "490": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "491": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "492": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "493": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "494": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "The request representing the confirmation for a password reset.",
                                "properties": {
                                    "AnalyticsMetadata": {
                                        "description": "The Amazon Pinpoint analytics metadata for collecting metrics for <code>ConfirmForgotPassword</code> calls.",
                                        "properties": {
                                            "AnalyticsEndpointId": {
                                                "description": "The endpoint ID.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "ClientId": {
                                        "description": "The app client ID of the app associated with the user pool.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+]+",
                                        "type": "string"
                                    },
                                    "ConfirmationCode": {
                                        "description": "The confirmation code sent by a user's request to retrieve a forgotten password. For more information, see ",
                                        "maxLength": 2048,
                                        "minLength": 1,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    },
                                    "Password": {
                                        "description": "The password sent by a user's request to retrieve a forgotten password.",
                                        "format": "password",
                                        "maxLength": 256,
                                        "minLength": 6,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    },
                                    "SecretHash": {
                                        "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+=/]+",
                                        "type": "string"
                                    },
                                    "UserContextData": {
                                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                        "properties": {
                                            "EncodedData": {
                                                "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "Username": {
                                        "description": "The user name of the user for whom you want to enter a code to retrieve a forgotten password.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "ClientId",
                                    "Username",
                                    "ConfirmationCode",
                                    "Password"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ConfirmSignUp": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Confirms registration of a user and handles the existing alias from a previous user.",
                "operationId": "ConfirmSignUp",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server for the registration confirmation.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "UnexpectedLambdaException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "UserLambdaValidationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "TooManyFailedAttemptsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "CodeMismatchException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "ExpiredCodeException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "InvalidLambdaResponseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "AliasExistsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "490": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "491": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "492": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "493": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to confirm registration of a user.",
                                "properties": {
                                    "AnalyticsMetadata": {
                                        "description": "The Amazon Pinpoint analytics metadata for collecting metrics for <code>ConfirmSignUp</code> calls.",
                                        "properties": {
                                            "AnalyticsEndpointId": {
                                                "description": "The endpoint ID.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "ClientId": {
                                        "description": "The ID of the app client associated with the user pool.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+]+",
                                        "type": "string"
                                    },
                                    "ConfirmationCode": {
                                        "description": "The confirmation code sent by a user's request to confirm registration.",
                                        "maxLength": 2048,
                                        "minLength": 1,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    },
                                    "ForceAliasCreation": {
                                        "description": "Boolean to be specified to force user confirmation irrespective of existing alias. By default set to <code>False</code>. If this parameter is set to <code>True</code> and the phone number/email used for sign up confirmation already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user being confirmed. If set to <code>False</code>, the API will throw an <b>AliasExistsException</b> error.",
                                        "type": "boolean"
                                    },
                                    "SecretHash": {
                                        "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+=/]+",
                                        "type": "string"
                                    },
                                    "UserContextData": {
                                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                        "properties": {
                                            "EncodedData": {
                                                "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "Username": {
                                        "description": "The user name of the user whose registration you wish to confirm.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "ClientId",
                                    "Username",
                                    "ConfirmationCode"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#CreateGroup": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Creates a new group in the specified user pool.</p> <p>Requires developer credentials.</p>",
                "operationId": "CreateGroup",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Group": {
                                            "description": "The group object for the group.",
                                            "properties": {
                                                "CreationDate": {
                                                    "description": "The date the group was created.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "Description": {
                                                    "description": "A string containing the description of the group.",
                                                    "maxLength": 2048,
                                                    "type": "string"
                                                },
                                                "GroupName": {
                                                    "description": "The name of the group.",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "LastModifiedDate": {
                                                    "description": "The date the group was last modified.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "Precedence": {
                                                    "description": "<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user's tokens. Groups with higher <code>Precedence</code> values take precedence over groups with lower <code>Precedence</code> values or with null <code>Precedence</code> values.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>",
                                                    "minimum": 0,
                                                    "type": "integer"
                                                },
                                                "RoleArn": {
                                                    "description": "The role ARN for the group.",
                                                    "maxLength": 2048,
                                                    "minLength": 20,
                                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                    "type": "string"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID for the user pool.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "GroupExistsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Description": {
                                        "description": "A string containing the description of the group.",
                                        "maxLength": 2048,
                                        "type": "string"
                                    },
                                    "GroupName": {
                                        "description": "The name of the group. Must be unique.",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "Precedence": {
                                        "description": "<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower <code>Precedence</code> values take precedence over groups with higher or null <code>Precedence</code> values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user's tokens.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>",
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "RoleArn": {
                                        "description": "The role ARN for the group.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "GroupName",
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#CreateIdentityProvider": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates an identity provider for a user pool.",
                "operationId": "CreateIdentityProvider",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "IdentityProvider": {
                                            "description": "The newly created identity provider object.",
                                            "properties": {
                                                "AttributeMapping": {
                                                    "description": "A mapping of identity provider attributes to standard and custom user pool attributes.",
                                                    "items": {
                                                        "properties": {
                                                            "key": {
                                                                "maxLength": 32,
                                                                "minLength": 1,
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "CreationDate": {
                                                    "description": "The date the identity provider was created.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "IdpIdentifiers": {
                                                    "description": "A list of identity provider identifiers.",
                                                    "items": {
                                                        "maxLength": 40,
                                                        "minLength": 1,
                                                        "pattern": "[\\w\\s+=.@-]+",
                                                        "type": "string"
                                                    },
                                                    "maxItems": 50,
                                                    "minItems": 0,
                                                    "type": "array"
                                                },
                                                "LastModifiedDate": {
                                                    "description": "The date the identity provider was last modified.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "ProviderDetails": {
                                                    "description": "The identity provider details, such as <code>MetadataURL</code> and <code>MetadataFile</code>.",
                                                    "items": {
                                                        "properties": {
                                                            "key": {
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "ProviderName": {
                                                    "description": "The identity provider name.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "ProviderType": {
                                                    "description": "The identity provider type.",
                                                    "enum": [
                                                        "SAML",
                                                        "Facebook",
                                                        "Google",
                                                        "LoginWithAmazon",
                                                        "OIDC"
                                                    ],
                                                    "type": "string"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "IdentityProvider"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "DuplicateProviderException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "AttributeMapping": {
                                        "description": "A mapping of identity provider attributes to standard and custom user pool attributes.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "IdpIdentifiers": {
                                        "description": "A list of identity provider identifiers.",
                                        "items": {
                                            "maxLength": 40,
                                            "minLength": 1,
                                            "pattern": "[\\w\\s+=.@-]+",
                                            "type": "string"
                                        },
                                        "maxItems": 50,
                                        "minItems": 0,
                                        "type": "array"
                                    },
                                    "ProviderDetails": {
                                        "description": "The identity provider details, such as <code>MetadataURL</code> and <code>MetadataFile</code>.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "ProviderName": {
                                        "description": "The identity provider name.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "[^_][\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}][^_]+",
                                        "type": "string"
                                    },
                                    "ProviderType": {
                                        "description": "The identity provider type.",
                                        "enum": [
                                            "SAML",
                                            "Facebook",
                                            "Google",
                                            "LoginWithAmazon",
                                            "OIDC"
                                        ],
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "ProviderName",
                                    "ProviderType",
                                    "ProviderDetails"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#CreateResourceServer": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates a new OAuth2.0 resource server and defines custom scopes in it.",
                "operationId": "CreateResourceServer",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ResourceServer": {
                                            "description": "The newly created resource server.",
                                            "properties": {
                                                "Identifier": {
                                                    "description": "The identifier for the resource server.",
                                                    "maxLength": 256,
                                                    "minLength": 1,
                                                    "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                                    "type": "string"
                                                },
                                                "Name": {
                                                    "description": "The name of the resource server.",
                                                    "maxLength": 256,
                                                    "minLength": 1,
                                                    "pattern": "[\\w\\s+=,.@-]+",
                                                    "type": "string"
                                                },
                                                "Scopes": {
                                                    "description": "A list of scopes that are defined for the resource server.",
                                                    "items": {
                                                        "description": "A resource server scope.",
                                                        "properties": {
                                                            "ScopeDescription": {
                                                                "description": "A description of the scope.",
                                                                "maxLength": 256,
                                                                "minLength": 1,
                                                                "type": "string"
                                                            },
                                                            "ScopeName": {
                                                                "description": "The name of the scope.",
                                                                "maxLength": 256,
                                                                "minLength": 1,
                                                                "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "ScopeName",
                                                            "ScopeDescription"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "maxItems": 25,
                                                    "type": "array"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID for the user pool that hosts the resource server.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "ResourceServer"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Identifier": {
                                        "description": "A unique resource server identifier for the resource server. This could be an HTTPS endpoint where the resource server is located. For example, <code>https://my-weather-api.example.com</code>.",
                                        "maxLength": 256,
                                        "minLength": 1,
                                        "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                        "type": "string"
                                    },
                                    "Name": {
                                        "description": "A friendly name for the resource server.",
                                        "maxLength": 256,
                                        "minLength": 1,
                                        "pattern": "[\\w\\s+=,.@-]+",
                                        "type": "string"
                                    },
                                    "Scopes": {
                                        "description": "A list of scopes. Each scope is map, where the keys are <code>name</code> and <code>description</code>.",
                                        "items": {
                                            "description": "A resource server scope.",
                                            "properties": {
                                                "ScopeDescription": {
                                                    "description": "A description of the scope.",
                                                    "maxLength": 256,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "ScopeName": {
                                                    "description": "The name of the scope.",
                                                    "maxLength": 256,
                                                    "minLength": 1,
                                                    "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "ScopeName",
                                                "ScopeDescription"
                                            ],
                                            "type": "object"
                                        },
                                        "maxItems": 25,
                                        "type": "array"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Identifier",
                                    "Name"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#CreateUserImportJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates the user import job.",
                "operationId": "CreateUserImportJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server to the request to create the user import job.",
                                    "properties": {
                                        "UserImportJob": {
                                            "description": "The job object that represents the user import job.",
                                            "properties": {
                                                "CloudWatchLogsRoleArn": {
                                                    "description": "The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito Developer Guide.",
                                                    "maxLength": 2048,
                                                    "minLength": 20,
                                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                    "type": "string"
                                                },
                                                "CompletionDate": {
                                                    "description": "The date when the user import job was completed.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "CompletionMessage": {
                                                    "description": "The message returned when the user import job is completed.",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w]+",
                                                    "type": "string"
                                                },
                                                "CreationDate": {
                                                    "description": "The date the user import job was created.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "FailedUsers": {
                                                    "description": "The number of users that could not be imported.",
                                                    "type": "integer"
                                                },
                                                "ImportedUsers": {
                                                    "description": "The number of users that were successfully imported.",
                                                    "type": "integer"
                                                },
                                                "JobId": {
                                                    "description": "The job ID for the user import job.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "import-[0-9a-zA-Z-]+",
                                                    "type": "string"
                                                },
                                                "JobName": {
                                                    "description": "The job name for the user import job.",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w\\s+=,.@-]+",
                                                    "type": "string"
                                                },
                                                "PreSignedUrl": {
                                                    "description": "The pre-signed URL to be used to upload the <code>.csv</code> file.",
                                                    "maxLength": 2048,
                                                    "minLength": 0,
                                                    "type": "string"
                                                },
                                                "SkippedUsers": {
                                                    "description": "The number of users that were skipped.",
                                                    "type": "integer"
                                                },
                                                "StartDate": {
                                                    "description": "The date when the user import job was started.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "Status": {
                                                    "description": "<p>The status of the user import job. One of the following:</p> <ul> <li> <p> <code>Created</code> - The job was created but not started.</p> </li> <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li> <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li> <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li> <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li> <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li> <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li> <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.</p> </li> </ul>",
                                                    "enum": [
                                                        "Created",
                                                        "Pending",
                                                        "InProgress",
                                                        "Stopping",
                                                        "Expired",
                                                        "Stopped",
                                                        "Failed",
                                                        "Succeeded"
                                                    ],
                                                    "type": "string"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID for the user pool that the users are being imported into.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "PreconditionNotMetException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to create the user import job.",
                                "properties": {
                                    "CloudWatchLogsRoleArn": {
                                        "description": "The role ARN for the Amazon CloudWatch Logging role for the user import job.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "JobName": {
                                        "description": "The job name for the user import job.",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w\\s+=,.@-]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool that the users are being imported into.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "JobName",
                                    "UserPoolId",
                                    "CloudWatchLogsRoleArn"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#CreateUserPool": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates a new Amazon Cognito user pool and sets the password policy for the pool.",
                "operationId": "CreateUserPool",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server for the request to create a user pool.",
                                    "properties": {
                                        "UserPool": {
                                            "description": "A container for the user pool details.",
                                            "properties": {
                                                "AdminCreateUserConfig": {
                                                    "description": "The configuration for <code>AdminCreateUser</code> requests.",
                                                    "properties": {
                                                        "AllowAdminCreateUserOnly": {
                                                            "description": "Set to <code>True</code> if only the administrator is allowed to create user profiles. Set to <code>False</code> if users can sign themselves up via an app.",
                                                            "type": "boolean"
                                                        },
                                                        "InviteMessageTemplate": {
                                                            "description": "<p>The message template to be used for the welcome message to new users.</p> <p>See also <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization\">Customizing User Invitation Messages</a>.</p>",
                                                            "properties": {
                                                                "EmailMessage": {
                                                                    "description": "The message template for email messages.",
                                                                    "maxLength": 20000,
                                                                    "minLength": 6,
                                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                                                    "type": "string"
                                                                },
                                                                "EmailSubject": {
                                                                    "description": "The subject line for email messages.",
                                                                    "maxLength": 140,
                                                                    "minLength": 1,
                                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                                    "type": "string"
                                                                },
                                                                "SMSMessage": {
                                                                    "description": "The message template for SMS messages.",
                                                                    "maxLength": 140,
                                                                    "minLength": 6,
                                                                    "pattern": ".*\\{####\\}.*",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "UnusedAccountValidityDays": {
                                                            "description": "The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the <code>MessageAction</code> parameter. The default value for this parameter is 7.",
                                                            "maximum": 365,
                                                            "minimum": 0,
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "AliasAttributes": {
                                                    "description": "Specifies the attributes that are aliased in a user pool.",
                                                    "items": {
                                                        "enum": [
                                                            "phone_number",
                                                            "email",
                                                            "preferred_username"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "Arn": {
                                                    "description": "The Amazon Resource Name (ARN) for the user pool.",
                                                    "maxLength": 2048,
                                                    "minLength": 20,
                                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                    "type": "string"
                                                },
                                                "AutoVerifiedAttributes": {
                                                    "description": "Specifies the attributes that are auto-verified in a user pool.",
                                                    "items": {
                                                        "enum": [
                                                            "phone_number",
                                                            "email"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "CreationDate": {
                                                    "description": "The date the user pool was created.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "CustomDomain": {
                                                    "maxLength": 63,
                                                    "minLength": 1,
                                                    "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                                                    "type": "string"
                                                },
                                                "DeviceConfiguration": {
                                                    "description": "The device configuration.",
                                                    "properties": {
                                                        "ChallengeRequiredOnNewDevice": {
                                                            "description": "Indicates whether a challenge is required on a new device. Only applicable to a new device.",
                                                            "type": "boolean"
                                                        },
                                                        "DeviceOnlyRememberedOnUserPrompt": {
                                                            "description": "If true, a device is only remembered on user prompt.",
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "Domain": {
                                                    "description": "Holds the domain prefix if the user pool has a domain associated with it.",
                                                    "maxLength": 63,
                                                    "minLength": 1,
                                                    "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                                                    "type": "string"
                                                },
                                                "EmailConfiguration": {
                                                    "description": "The email configuration.",
                                                    "properties": {
                                                        "ReplyToEmailAddress": {
                                                            "description": "The destination to which the receiver of the email should reply to.",
                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                            "type": "string"
                                                        },
                                                        "SourceArn": {
                                                            "description": "The Amazon Resource Name (ARN) of the email source.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "EmailConfigurationFailure": {
                                                    "description": "The reason why the email configuration cannot send the messages to your users.",
                                                    "type": "string"
                                                },
                                                "EmailVerificationMessage": {
                                                    "description": "The contents of the email verification message.",
                                                    "maxLength": 20000,
                                                    "minLength": 6,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                                    "type": "string"
                                                },
                                                "EmailVerificationSubject": {
                                                    "description": "The subject of the email verification message.",
                                                    "maxLength": 140,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                    "type": "string"
                                                },
                                                "EstimatedNumberOfUsers": {
                                                    "description": "A number estimating the size of the user pool.",
                                                    "type": "integer"
                                                },
                                                "Id": {
                                                    "description": "The ID of the user pool.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                },
                                                "LambdaConfig": {
                                                    "description": "The AWS Lambda triggers associated with the user pool.",
                                                    "properties": {
                                                        "CreateAuthChallenge": {
                                                            "description": "Creates an authentication challenge.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "CustomMessage": {
                                                            "description": "A custom Message AWS Lambda trigger.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "DefineAuthChallenge": {
                                                            "description": "Defines the authentication challenge.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "PostAuthentication": {
                                                            "description": "A post-authentication AWS Lambda trigger.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "PostConfirmation": {
                                                            "description": "A post-confirmation AWS Lambda trigger.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "PreAuthentication": {
                                                            "description": "A pre-authentication AWS Lambda trigger.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "PreSignUp": {
                                                            "description": "A pre-registration AWS Lambda trigger.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "PreTokenGeneration": {
                                                            "description": "A Lambda trigger that is invoked before token generation.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "UserMigration": {
                                                            "description": "The user migration Lambda config type.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "VerifyAuthChallengeResponse": {
                                                            "description": "Verifies the authentication challenge response.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "LastModifiedDate": {
                                                    "description": "The date the user pool was last modified.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "MfaConfiguration": {
                                                    "description": "<p>Can be one of the following values:</p> <ul> <li> <p> <code>OFF</code> - MFA tokens are not required and cannot be specified during user registration.</p> </li> <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.</p> </li> <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li> </ul>",
                                                    "enum": [
                                                        "OFF",
                                                        "ON",
                                                        "OPTIONAL"
                                                    ],
                                                    "type": "string"
                                                },
                                                "Name": {
                                                    "description": "The name of the user pool.",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w\\s+=,.@-]+",
                                                    "type": "string"
                                                },
                                                "Policies": {
                                                    "description": "The policies associated with the user pool.",
                                                    "properties": {
                                                        "PasswordPolicy": {
                                                            "description": "The password policy.",
                                                            "properties": {
                                                                "MinimumLength": {
                                                                    "description": "The minimum length of the password policy that you have set. Cannot be less than 6.",
                                                                    "maximum": 99,
                                                                    "minimum": 6,
                                                                    "type": "integer"
                                                                },
                                                                "RequireLowercase": {
                                                                    "description": "In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.",
                                                                    "type": "boolean"
                                                                },
                                                                "RequireNumbers": {
                                                                    "description": "In the password policy that you have set, refers to whether you have required users to use at least one number in their password.",
                                                                    "type": "boolean"
                                                                },
                                                                "RequireSymbols": {
                                                                    "description": "In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.",
                                                                    "type": "boolean"
                                                                },
                                                                "RequireUppercase": {
                                                                    "description": "In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.",
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "SchemaAttributes": {
                                                    "description": "A container with the schema attributes of a user pool.",
                                                    "items": {
                                                        "description": "Contains information about the schema attribute.",
                                                        "properties": {
                                                            "AttributeDataType": {
                                                                "description": "The attribute data type.",
                                                                "enum": [
                                                                    "String",
                                                                    "Number",
                                                                    "DateTime",
                                                                    "Boolean"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "DeveloperOnlyAttribute": {
                                                                "description": "Specifies whether the attribute type is developer only.",
                                                                "type": "boolean"
                                                            },
                                                            "Mutable": {
                                                                "description": "<p>Specifies whether the value of the attribute can be changed.</p> <p>For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html\">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>",
                                                                "type": "boolean"
                                                            },
                                                            "Name": {
                                                                "description": "A schema attribute of the name type.",
                                                                "maxLength": 20,
                                                                "minLength": 1,
                                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                                "type": "string"
                                                            },
                                                            "NumberAttributeConstraints": {
                                                                "description": "Specifies the constraints for an attribute of the number type.",
                                                                "properties": {
                                                                    "MaxValue": {
                                                                        "description": "The maximum value of an attribute that is of the number data type.",
                                                                        "type": "string"
                                                                    },
                                                                    "MinValue": {
                                                                        "description": "The minimum value of an attribute that is of the number data type.",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "Required": {
                                                                "description": "Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.",
                                                                "type": "boolean"
                                                            },
                                                            "StringAttributeConstraints": {
                                                                "description": "Specifies the constraints for an attribute of the string type.",
                                                                "properties": {
                                                                    "MaxLength": {
                                                                        "description": "The maximum length.",
                                                                        "type": "string"
                                                                    },
                                                                    "MinLength": {
                                                                        "description": "The minimum length.",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "maxItems": 50,
                                                    "minItems": 1,
                                                    "type": "array"
                                                },
                                                "SmsAuthenticationMessage": {
                                                    "description": "The contents of the SMS authentication message.",
                                                    "maxLength": 140,
                                                    "minLength": 6,
                                                    "pattern": ".*\\{####\\}.*",
                                                    "type": "string"
                                                },
                                                "SmsConfiguration": {
                                                    "description": "The SMS configuration.",
                                                    "properties": {
                                                        "ExternalId": {
                                                            "description": "The external ID.",
                                                            "type": "string"
                                                        },
                                                        "SnsCallerArn": {
                                                            "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "SnsCallerArn"
                                                    ],
                                                    "type": "object"
                                                },
                                                "SmsConfigurationFailure": {
                                                    "description": "The reason why the SMS configuration cannot send the messages to your users.",
                                                    "type": "string"
                                                },
                                                "SmsVerificationMessage": {
                                                    "description": "The contents of the SMS verification message.",
                                                    "maxLength": 140,
                                                    "minLength": 6,
                                                    "pattern": ".*\\{####\\}.*",
                                                    "type": "string"
                                                },
                                                "Status": {
                                                    "description": "The status of a user pool.",
                                                    "enum": [
                                                        "Enabled",
                                                        "Disabled"
                                                    ],
                                                    "type": "string"
                                                },
                                                "UserPoolAddOns": {
                                                    "description": "The user pool add-ons.",
                                                    "properties": {
                                                        "AdvancedSecurityMode": {
                                                            "description": "The advanced security mode.",
                                                            "enum": [
                                                                "OFF",
                                                                "AUDIT",
                                                                "ENFORCED"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "AdvancedSecurityMode"
                                                    ],
                                                    "type": "object"
                                                },
                                                "UserPoolTags": {
                                                    "description": "The cost allocation tags for the user pool. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</a> ",
                                                    "items": {
                                                        "properties": {
                                                            "key": {
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "UsernameAttributes": {
                                                    "description": "Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.",
                                                    "items": {
                                                        "enum": [
                                                            "phone_number",
                                                            "email"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "VerificationMessageTemplate": {
                                                    "description": "The template for verification messages.",
                                                    "properties": {
                                                        "DefaultEmailOption": {
                                                            "description": "The default email option.",
                                                            "enum": [
                                                                "CONFIRM_WITH_LINK",
                                                                "CONFIRM_WITH_CODE"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "EmailMessage": {
                                                            "description": "The email message template.",
                                                            "maxLength": 20000,
                                                            "minLength": 6,
                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                                            "type": "string"
                                                        },
                                                        "EmailMessageByLink": {
                                                            "description": "The email message template for sending a confirmation link to the user.",
                                                            "maxLength": 20000,
                                                            "minLength": 6,
                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{##[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*##\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                                            "type": "string"
                                                        },
                                                        "EmailSubject": {
                                                            "description": "The subject line for the email message template.",
                                                            "maxLength": 140,
                                                            "minLength": 1,
                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                            "type": "string"
                                                        },
                                                        "EmailSubjectByLink": {
                                                            "description": "The subject line for the email message template for sending a confirmation link to the user.",
                                                            "maxLength": 140,
                                                            "minLength": 1,
                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                            "type": "string"
                                                        },
                                                        "SmsMessage": {
                                                            "description": "The SMS message template.",
                                                            "maxLength": 140,
                                                            "minLength": 6,
                                                            "pattern": ".*\\{####\\}.*",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InvalidSmsRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InvalidSmsRoleTrustRelationshipException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InvalidEmailRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "UserPoolTaggingException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to create a user pool.",
                                "properties": {
                                    "AdminCreateUserConfig": {
                                        "description": "The configuration for <code>AdminCreateUser</code> requests.",
                                        "properties": {
                                            "AllowAdminCreateUserOnly": {
                                                "description": "Set to <code>True</code> if only the administrator is allowed to create user profiles. Set to <code>False</code> if users can sign themselves up via an app.",
                                                "type": "boolean"
                                            },
                                            "InviteMessageTemplate": {
                                                "description": "<p>The message template to be used for the welcome message to new users.</p> <p>See also <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization\">Customizing User Invitation Messages</a>.</p>",
                                                "properties": {
                                                    "EmailMessage": {
                                                        "description": "The message template for email messages.",
                                                        "maxLength": 20000,
                                                        "minLength": 6,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                                        "type": "string"
                                                    },
                                                    "EmailSubject": {
                                                        "description": "The subject line for email messages.",
                                                        "maxLength": 140,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                        "type": "string"
                                                    },
                                                    "SMSMessage": {
                                                        "description": "The message template for SMS messages.",
                                                        "maxLength": 140,
                                                        "minLength": 6,
                                                        "pattern": ".*\\{####\\}.*",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "UnusedAccountValidityDays": {
                                                "description": "The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the <code>MessageAction</code> parameter. The default value for this parameter is 7.",
                                                "maximum": 365,
                                                "minimum": 0,
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "AliasAttributes": {
                                        "description": "Attributes supported as an alias for this user pool. Possible values: <b>phone_number</b>, <b>email</b>, or <b>preferred_username</b>.",
                                        "items": {
                                            "enum": [
                                                "phone_number",
                                                "email",
                                                "preferred_username"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "AutoVerifiedAttributes": {
                                        "description": "The attributes to be auto-verified. Possible values: <b>email</b>, <b>phone_number</b>.",
                                        "items": {
                                            "enum": [
                                                "phone_number",
                                                "email"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "DeviceConfiguration": {
                                        "description": "The device configuration.",
                                        "properties": {
                                            "ChallengeRequiredOnNewDevice": {
                                                "description": "Indicates whether a challenge is required on a new device. Only applicable to a new device.",
                                                "type": "boolean"
                                            },
                                            "DeviceOnlyRememberedOnUserPrompt": {
                                                "description": "If true, a device is only remembered on user prompt.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "EmailConfiguration": {
                                        "description": "The email configuration.",
                                        "properties": {
                                            "ReplyToEmailAddress": {
                                                "description": "The destination to which the receiver of the email should reply to.",
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                "type": "string"
                                            },
                                            "SourceArn": {
                                                "description": "The Amazon Resource Name (ARN) of the email source.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "EmailVerificationMessage": {
                                        "description": "A string representing the email verification message.",
                                        "maxLength": 20000,
                                        "minLength": 6,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                        "type": "string"
                                    },
                                    "EmailVerificationSubject": {
                                        "description": "A string representing the email verification subject.",
                                        "maxLength": 140,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                        "type": "string"
                                    },
                                    "LambdaConfig": {
                                        "description": "<p>The Lambda trigger configuration information for the new user pool.</p> <note> <p>In a push model, event sources (such as Amazon S3 and custom applications) need permission to invoke a function. So you will need to make an extra call to add permission for these event sources to invoke your Lambda function.</p> <p/> <p>For more information on using the Lambda API to add permission, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/API_AddPermission.html\"> AddPermission </a>. </p> <p>For adding permission using the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/reference/lambda/add-permission.html\"> add-permission </a>.</p> </note>",
                                        "properties": {
                                            "CreateAuthChallenge": {
                                                "description": "Creates an authentication challenge.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "CustomMessage": {
                                                "description": "A custom Message AWS Lambda trigger.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "DefineAuthChallenge": {
                                                "description": "Defines the authentication challenge.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "PostAuthentication": {
                                                "description": "A post-authentication AWS Lambda trigger.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "PostConfirmation": {
                                                "description": "A post-confirmation AWS Lambda trigger.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "PreAuthentication": {
                                                "description": "A pre-authentication AWS Lambda trigger.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "PreSignUp": {
                                                "description": "A pre-registration AWS Lambda trigger.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "PreTokenGeneration": {
                                                "description": "A Lambda trigger that is invoked before token generation.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "UserMigration": {
                                                "description": "The user migration Lambda config type.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "VerifyAuthChallengeResponse": {
                                                "description": "Verifies the authentication challenge response.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "MfaConfiguration": {
                                        "description": "Specifies MFA configuration details.",
                                        "enum": [
                                            "OFF",
                                            "ON",
                                            "OPTIONAL"
                                        ],
                                        "type": "string"
                                    },
                                    "Policies": {
                                        "description": "The policies associated with the new user pool.",
                                        "properties": {
                                            "PasswordPolicy": {
                                                "description": "The password policy.",
                                                "properties": {
                                                    "MinimumLength": {
                                                        "description": "The minimum length of the password policy that you have set. Cannot be less than 6.",
                                                        "maximum": 99,
                                                        "minimum": 6,
                                                        "type": "integer"
                                                    },
                                                    "RequireLowercase": {
                                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.",
                                                        "type": "boolean"
                                                    },
                                                    "RequireNumbers": {
                                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one number in their password.",
                                                        "type": "boolean"
                                                    },
                                                    "RequireSymbols": {
                                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.",
                                                        "type": "boolean"
                                                    },
                                                    "RequireUppercase": {
                                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "PoolName": {
                                        "description": "A string used to name the user pool.",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w\\s+=,.@-]+",
                                        "type": "string"
                                    },
                                    "Schema": {
                                        "description": "An array of schema attributes for the new user pool. These attributes can be standard or custom attributes.",
                                        "items": {
                                            "description": "Contains information about the schema attribute.",
                                            "properties": {
                                                "AttributeDataType": {
                                                    "description": "The attribute data type.",
                                                    "enum": [
                                                        "String",
                                                        "Number",
                                                        "DateTime",
                                                        "Boolean"
                                                    ],
                                                    "type": "string"
                                                },
                                                "DeveloperOnlyAttribute": {
                                                    "description": "Specifies whether the attribute type is developer only.",
                                                    "type": "boolean"
                                                },
                                                "Mutable": {
                                                    "description": "<p>Specifies whether the value of the attribute can be changed.</p> <p>For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html\">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>",
                                                    "type": "boolean"
                                                },
                                                "Name": {
                                                    "description": "A schema attribute of the name type.",
                                                    "maxLength": 20,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "NumberAttributeConstraints": {
                                                    "description": "Specifies the constraints for an attribute of the number type.",
                                                    "properties": {
                                                        "MaxValue": {
                                                            "description": "The maximum value of an attribute that is of the number data type.",
                                                            "type": "string"
                                                        },
                                                        "MinValue": {
                                                            "description": "The minimum value of an attribute that is of the number data type.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "Required": {
                                                    "description": "Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.",
                                                    "type": "boolean"
                                                },
                                                "StringAttributeConstraints": {
                                                    "description": "Specifies the constraints for an attribute of the string type.",
                                                    "properties": {
                                                        "MaxLength": {
                                                            "description": "The maximum length.",
                                                            "type": "string"
                                                        },
                                                        "MinLength": {
                                                            "description": "The minimum length.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "maxItems": 50,
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "SmsAuthenticationMessage": {
                                        "description": "A string representing the SMS authentication message.",
                                        "maxLength": 140,
                                        "minLength": 6,
                                        "pattern": ".*\\{####\\}.*",
                                        "type": "string"
                                    },
                                    "SmsConfiguration": {
                                        "description": "The SMS configuration.",
                                        "properties": {
                                            "ExternalId": {
                                                "description": "The external ID.",
                                                "type": "string"
                                            },
                                            "SnsCallerArn": {
                                                "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "SnsCallerArn"
                                        ],
                                        "type": "object"
                                    },
                                    "SmsVerificationMessage": {
                                        "description": "A string representing the SMS verification message.",
                                        "maxLength": 140,
                                        "minLength": 6,
                                        "pattern": ".*\\{####\\}.*",
                                        "type": "string"
                                    },
                                    "UserPoolAddOns": {
                                        "description": "Used to enable advanced security risk detection. Set the key <code>AdvancedSecurityMode</code> to the value \"AUDIT\".",
                                        "properties": {
                                            "AdvancedSecurityMode": {
                                                "description": "The advanced security mode.",
                                                "enum": [
                                                    "OFF",
                                                    "AUDIT",
                                                    "ENFORCED"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "AdvancedSecurityMode"
                                        ],
                                        "type": "object"
                                    },
                                    "UserPoolTags": {
                                        "description": "The cost allocation tags for the user pool. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</a> ",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "UsernameAttributes": {
                                        "description": "Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.",
                                        "items": {
                                            "enum": [
                                                "phone_number",
                                                "email"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "VerificationMessageTemplate": {
                                        "description": "The template for the verification message that the user sees when the app requests permission to access the user's information.",
                                        "properties": {
                                            "DefaultEmailOption": {
                                                "description": "The default email option.",
                                                "enum": [
                                                    "CONFIRM_WITH_LINK",
                                                    "CONFIRM_WITH_CODE"
                                                ],
                                                "type": "string"
                                            },
                                            "EmailMessage": {
                                                "description": "The email message template.",
                                                "maxLength": 20000,
                                                "minLength": 6,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                                "type": "string"
                                            },
                                            "EmailMessageByLink": {
                                                "description": "The email message template for sending a confirmation link to the user.",
                                                "maxLength": 20000,
                                                "minLength": 6,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{##[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*##\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                                "type": "string"
                                            },
                                            "EmailSubject": {
                                                "description": "The subject line for the email message template.",
                                                "maxLength": 140,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                "type": "string"
                                            },
                                            "EmailSubjectByLink": {
                                                "description": "The subject line for the email message template for sending a confirmation link to the user.",
                                                "maxLength": 140,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                "type": "string"
                                            },
                                            "SmsMessage": {
                                                "description": "The SMS message template.",
                                                "maxLength": 140,
                                                "minLength": 6,
                                                "pattern": ".*\\{####\\}.*",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "PoolName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#CreateUserPoolClient": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates the user pool client.",
                "operationId": "CreateUserPoolClient",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server to create a user pool client.",
                                    "properties": {
                                        "UserPoolClient": {
                                            "description": "The user pool client that was just created.",
                                            "properties": {
                                                "AllowedOAuthFlows": {
                                                    "description": "<p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>token</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>",
                                                    "items": {
                                                        "enum": [
                                                            "code",
                                                            "implicit",
                                                            "client_credentials"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "maxItems": 3,
                                                    "minItems": 0,
                                                    "type": "array"
                                                },
                                                "AllowedOAuthFlowsUserPoolClient": {
                                                    "description": "Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.",
                                                    "type": "boolean"
                                                },
                                                "AllowedOAuthScopes": {
                                                    "description": "A list of allowed <code>OAuth</code> scopes. Currently supported values are <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and <code>\"Cognito\"</code>.",
                                                    "items": {
                                                        "maxLength": 256,
                                                        "minLength": 1,
                                                        "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                                        "type": "string"
                                                    },
                                                    "maxItems": 25,
                                                    "type": "array"
                                                },
                                                "AnalyticsConfiguration": {
                                                    "description": "The Amazon Pinpoint analytics configuration for the user pool client.",
                                                    "properties": {
                                                        "ApplicationId": {
                                                            "description": "The application ID for an Amazon Pinpoint application.",
                                                            "pattern": "^[0-9a-fA-F]+$",
                                                            "type": "string"
                                                        },
                                                        "ExternalId": {
                                                            "description": "The external ID.",
                                                            "type": "string"
                                                        },
                                                        "RoleArn": {
                                                            "description": "The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "UserDataShared": {
                                                            "description": "If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.",
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "required": [
                                                        "ApplicationId",
                                                        "RoleArn",
                                                        "ExternalId"
                                                    ],
                                                    "type": "object"
                                                },
                                                "CallbackURLs": {
                                                    "description": "<p>A list of allowed redirect (callback) URLs for the identity providers.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                                                    "items": {
                                                        "maxLength": 1024,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    },
                                                    "maxItems": 100,
                                                    "minItems": 0,
                                                    "type": "array"
                                                },
                                                "ClientId": {
                                                    "description": "The ID of the client associated with the user pool.",
                                                    "format": "password",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w+]+",
                                                    "type": "string"
                                                },
                                                "ClientName": {
                                                    "description": "The client name from the user pool request of the client type.",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w\\s+=,.@-]+",
                                                    "type": "string"
                                                },
                                                "ClientSecret": {
                                                    "description": "The client secret from the user pool request of the client type.",
                                                    "format": "password",
                                                    "maxLength": 64,
                                                    "minLength": 1,
                                                    "pattern": "[\\w+]+",
                                                    "type": "string"
                                                },
                                                "CreationDate": {
                                                    "description": "The date the user pool client was created.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "DefaultRedirectURI": {
                                                    "description": "<p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                                                    "maxLength": 1024,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "ExplicitAuthFlows": {
                                                    "description": "The explicit authentication flows.",
                                                    "items": {
                                                        "enum": [
                                                            "ADMIN_NO_SRP_AUTH",
                                                            "CUSTOM_AUTH_FLOW_ONLY",
                                                            "USER_PASSWORD_AUTH"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "LastModifiedDate": {
                                                    "description": "The date the user pool client was last modified.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "LogoutURLs": {
                                                    "description": "A list of allowed logout URLs for the identity providers.",
                                                    "items": {
                                                        "maxLength": 1024,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    },
                                                    "maxItems": 100,
                                                    "minItems": 0,
                                                    "type": "array"
                                                },
                                                "ReadAttributes": {
                                                    "description": "The Read-only attributes.",
                                                    "items": {
                                                        "maxLength": 2048,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "RefreshTokenValidity": {
                                                    "description": "The time limit, in days, after which the refresh token is no longer valid and cannot be used.",
                                                    "maximum": 3650,
                                                    "minimum": 0,
                                                    "type": "integer"
                                                },
                                                "SupportedIdentityProviders": {
                                                    "description": "A list of provider names for the identity providers that are supported on this client.",
                                                    "items": {
                                                        "maxLength": 32,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID for the user pool client.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                },
                                                "WriteAttributes": {
                                                    "description": "The writeable attributes.",
                                                    "items": {
                                                        "maxLength": 2048,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "ScopeDoesNotExistException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InvalidOAuthFlowException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to create a user pool client.",
                                "properties": {
                                    "AllowedOAuthFlows": {
                                        "description": "<p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>token</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>",
                                        "items": {
                                            "enum": [
                                                "code",
                                                "implicit",
                                                "client_credentials"
                                            ],
                                            "type": "string"
                                        },
                                        "maxItems": 3,
                                        "minItems": 0,
                                        "type": "array"
                                    },
                                    "AllowedOAuthFlowsUserPoolClient": {
                                        "description": "Set to <code>True</code> if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.",
                                        "type": "boolean"
                                    },
                                    "AllowedOAuthScopes": {
                                        "description": "A list of allowed <code>OAuth</code> scopes. Currently supported values are <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and <code>\"Cognito\"</code>.",
                                        "items": {
                                            "maxLength": 256,
                                            "minLength": 1,
                                            "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                            "type": "string"
                                        },
                                        "maxItems": 25,
                                        "type": "array"
                                    },
                                    "AnalyticsConfiguration": {
                                        "description": "The Amazon Pinpoint analytics configuration for collecting metrics for this user pool.",
                                        "properties": {
                                            "ApplicationId": {
                                                "description": "The application ID for an Amazon Pinpoint application.",
                                                "pattern": "^[0-9a-fA-F]+$",
                                                "type": "string"
                                            },
                                            "ExternalId": {
                                                "description": "The external ID.",
                                                "type": "string"
                                            },
                                            "RoleArn": {
                                                "description": "The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "UserDataShared": {
                                                "description": "If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.",
                                                "type": "boolean"
                                            }
                                        },
                                        "required": [
                                            "ApplicationId",
                                            "RoleArn",
                                            "ExternalId"
                                        ],
                                        "type": "object"
                                    },
                                    "CallbackURLs": {
                                        "description": "<p>A list of allowed redirect (callback) URLs for the identity providers.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                                        "items": {
                                            "maxLength": 1024,
                                            "minLength": 1,
                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                            "type": "string"
                                        },
                                        "maxItems": 100,
                                        "minItems": 0,
                                        "type": "array"
                                    },
                                    "ClientName": {
                                        "description": "The client name for the user pool client you would like to create.",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w\\s+=,.@-]+",
                                        "type": "string"
                                    },
                                    "DefaultRedirectURI": {
                                        "description": "<p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                                        "maxLength": 1024,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "ExplicitAuthFlows": {
                                        "description": "The explicit authentication flows.",
                                        "items": {
                                            "enum": [
                                                "ADMIN_NO_SRP_AUTH",
                                                "CUSTOM_AUTH_FLOW_ONLY",
                                                "USER_PASSWORD_AUTH"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "GenerateSecret": {
                                        "description": "Boolean to specify whether you want to generate a secret for the user pool client being created.",
                                        "type": "boolean"
                                    },
                                    "LogoutURLs": {
                                        "description": "A list of allowed logout URLs for the identity providers.",
                                        "items": {
                                            "maxLength": 1024,
                                            "minLength": 1,
                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                            "type": "string"
                                        },
                                        "maxItems": 100,
                                        "minItems": 0,
                                        "type": "array"
                                    },
                                    "ReadAttributes": {
                                        "description": "The read attributes.",
                                        "items": {
                                            "maxLength": 2048,
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "RefreshTokenValidity": {
                                        "description": "The time limit, in days, after which the refresh token is no longer valid and cannot be used.",
                                        "maximum": 3650,
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "SupportedIdentityProviders": {
                                        "description": "A list of provider names for the identity providers that are supported on this client.",
                                        "items": {
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool where you want to create a user pool client.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "WriteAttributes": {
                                        "description": "<p>The user pool attributes that the app client can write to.</p> <p>If your app client allows users to sign in through an identity provider, this array must include all attributes that are mapped to identity provider attributes. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If your app client lacks write access to a mapped attribute, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html\">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>",
                                        "items": {
                                            "maxLength": 2048,
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "ClientName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#CreateUserPoolDomain": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates a new domain for a user pool.",
                "operationId": "CreateUserPoolDomain",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "CloudFrontDomain": {
                                            "description": "The Amazon CloudFront endpoint that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider.",
                                            "maxLength": 63,
                                            "minLength": 1,
                                            "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "CustomDomainConfig": {
                                        "description": "<p>The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.</p> <p>Provide this parameter only if you want to use a custom domain for your user pool. Otherwise, you can exclude this parameter and use the Amazon Cognito hosted domain instead.</p> <p>For more information about the hosted domain and custom domains, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-assign-domain.html\">Configuring a User Pool Domain</a>.</p>",
                                        "properties": {
                                            "CertificateArn": {
                                                "description": "The Amazon Resource Name (ARN) of an AWS Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "CertificateArn"
                                        ],
                                        "type": "object"
                                    },
                                    "Domain": {
                                        "description": "The domain string.",
                                        "maxLength": 63,
                                        "minLength": 1,
                                        "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Domain",
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteGroup": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Deletes a group. Currently only groups with no members can be deleted.</p> <p>Requires developer credentials.</p>",
                "operationId": "DeleteGroup",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "GroupName": {
                                        "description": "The name of the group.",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "GroupName",
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteIdentityProvider": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Deletes an identity provider for a user pool.",
                "operationId": "DeleteIdentityProvider",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "UnsupportedIdentityProviderException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ProviderName": {
                                        "description": "The identity provider name.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "ProviderName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteResourceServer": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Deletes a resource server.",
                "operationId": "DeleteResourceServer",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Identifier": {
                                        "description": "The identifier for the resource server.",
                                        "maxLength": 256,
                                        "minLength": 1,
                                        "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool that hosts the resource server.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Identifier"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteUser": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Allows a user to delete himself or herself.",
                "operationId": "DeleteUser",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to delete a user.",
                                "properties": {
                                    "AccessToken": {
                                        "description": "The access token from a request to delete a user.",
                                        "format": "password",
                                        "pattern": "[A-Za-z0-9-_=.]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "AccessToken"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteUserAttributes": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Deletes the attributes for a user.",
                "operationId": "DeleteUserAttributes",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server to delete user attributes.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to delete user attributes.",
                                "properties": {
                                    "AccessToken": {
                                        "description": "The access token used in the request to delete user attributes.",
                                        "format": "password",
                                        "pattern": "[A-Za-z0-9-_=.]+",
                                        "type": "string"
                                    },
                                    "UserAttributeNames": {
                                        "description": "<p>An array of strings representing the user attribute names you wish to delete.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>",
                                        "items": {
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "UserAttributeNames",
                                    "AccessToken"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteUserPool": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Deletes the specified Amazon Cognito user pool.",
                "operationId": "DeleteUserPool",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserImportInProgressException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to delete a user pool.",
                                "properties": {
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool you want to delete.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteUserPoolClient": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Allows the developer to delete the user pool client.",
                "operationId": "DeleteUserPoolClient",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to delete a user pool client.",
                                "properties": {
                                    "ClientId": {
                                        "description": "The app client ID of the app associated with the user pool.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool where you want to delete the client.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "ClientId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteUserPoolDomain": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Deletes a domain for a user pool.",
                "operationId": "DeleteUserPoolDomain",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Domain": {
                                        "description": "The domain string.",
                                        "maxLength": 63,
                                        "minLength": 1,
                                        "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Domain",
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeIdentityProvider": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets information about a specific identity provider.",
                "operationId": "DescribeIdentityProvider",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "IdentityProvider": {
                                            "description": "The identity provider that was deleted.",
                                            "properties": {
                                                "AttributeMapping": {
                                                    "description": "A mapping of identity provider attributes to standard and custom user pool attributes.",
                                                    "items": {
                                                        "properties": {
                                                            "key": {
                                                                "maxLength": 32,
                                                                "minLength": 1,
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "CreationDate": {
                                                    "description": "The date the identity provider was created.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "IdpIdentifiers": {
                                                    "description": "A list of identity provider identifiers.",
                                                    "items": {
                                                        "maxLength": 40,
                                                        "minLength": 1,
                                                        "pattern": "[\\w\\s+=.@-]+",
                                                        "type": "string"
                                                    },
                                                    "maxItems": 50,
                                                    "minItems": 0,
                                                    "type": "array"
                                                },
                                                "LastModifiedDate": {
                                                    "description": "The date the identity provider was last modified.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "ProviderDetails": {
                                                    "description": "The identity provider details, such as <code>MetadataURL</code> and <code>MetadataFile</code>.",
                                                    "items": {
                                                        "properties": {
                                                            "key": {
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "ProviderName": {
                                                    "description": "The identity provider name.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "ProviderType": {
                                                    "description": "The identity provider type.",
                                                    "enum": [
                                                        "SAML",
                                                        "Facebook",
                                                        "Google",
                                                        "LoginWithAmazon",
                                                        "OIDC"
                                                    ],
                                                    "type": "string"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "IdentityProvider"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ProviderName": {
                                        "description": "The identity provider name.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "ProviderName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeResourceServer": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Describes a resource server.",
                "operationId": "DescribeResourceServer",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ResourceServer": {
                                            "description": "The resource server.",
                                            "properties": {
                                                "Identifier": {
                                                    "description": "The identifier for the resource server.",
                                                    "maxLength": 256,
                                                    "minLength": 1,
                                                    "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                                    "type": "string"
                                                },
                                                "Name": {
                                                    "description": "The name of the resource server.",
                                                    "maxLength": 256,
                                                    "minLength": 1,
                                                    "pattern": "[\\w\\s+=,.@-]+",
                                                    "type": "string"
                                                },
                                                "Scopes": {
                                                    "description": "A list of scopes that are defined for the resource server.",
                                                    "items": {
                                                        "description": "A resource server scope.",
                                                        "properties": {
                                                            "ScopeDescription": {
                                                                "description": "A description of the scope.",
                                                                "maxLength": 256,
                                                                "minLength": 1,
                                                                "type": "string"
                                                            },
                                                            "ScopeName": {
                                                                "description": "The name of the scope.",
                                                                "maxLength": 256,
                                                                "minLength": 1,
                                                                "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "ScopeName",
                                                            "ScopeDescription"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "maxItems": 25,
                                                    "type": "array"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID for the user pool that hosts the resource server.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "ResourceServer"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Identifier": {
                                        "description": "The identifier for the resource server",
                                        "maxLength": 256,
                                        "minLength": 1,
                                        "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool that hosts the resource server.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Identifier"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeRiskConfiguration": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Describes the risk configuration.",
                "operationId": "DescribeRiskConfiguration",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "RiskConfiguration": {
                                            "description": "The risk configuration.",
                                            "properties": {
                                                "AccountTakeoverRiskConfiguration": {
                                                    "description": "The account takeover risk configuration object including the <code>NotifyConfiguration</code> object and <code>Actions</code> to take in the case of an account takeover.",
                                                    "properties": {
                                                        "Actions": {
                                                            "description": "Account takeover risk configuration actions",
                                                            "properties": {
                                                                "HighAction": {
                                                                    "description": "Action to take for a high risk.",
                                                                    "properties": {
                                                                        "EventAction": {
                                                                            "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                                            "enum": [
                                                                                "BLOCK",
                                                                                "MFA_IF_CONFIGURED",
                                                                                "MFA_REQUIRED",
                                                                                "NO_ACTION"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "Notify": {
                                                                            "description": "Flag specifying whether to send a notification.",
                                                                            "type": "boolean"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "Notify",
                                                                        "EventAction"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "LowAction": {
                                                                    "description": "Action to take for a low risk.",
                                                                    "properties": {
                                                                        "EventAction": {
                                                                            "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                                            "enum": [
                                                                                "BLOCK",
                                                                                "MFA_IF_CONFIGURED",
                                                                                "MFA_REQUIRED",
                                                                                "NO_ACTION"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "Notify": {
                                                                            "description": "Flag specifying whether to send a notification.",
                                                                            "type": "boolean"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "Notify",
                                                                        "EventAction"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "MediumAction": {
                                                                    "description": "Action to take for a medium risk.",
                                                                    "properties": {
                                                                        "EventAction": {
                                                                            "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                                            "enum": [
                                                                                "BLOCK",
                                                                                "MFA_IF_CONFIGURED",
                                                                                "MFA_REQUIRED",
                                                                                "NO_ACTION"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "Notify": {
                                                                            "description": "Flag specifying whether to send a notification.",
                                                                            "type": "boolean"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "Notify",
                                                                        "EventAction"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "NotifyConfiguration": {
                                                            "description": "The notify configuration used to construct email notifications.",
                                                            "properties": {
                                                                "BlockEmail": {
                                                                    "description": "Email template used when a detected risk event is blocked.",
                                                                    "properties": {
                                                                        "HtmlBody": {
                                                                            "description": "The HTML body.",
                                                                            "maxLength": 20000,
                                                                            "minLength": 6,
                                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                                            "type": "string"
                                                                        },
                                                                        "Subject": {
                                                                            "description": "The subject.",
                                                                            "maxLength": 140,
                                                                            "minLength": 1,
                                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                                            "type": "string"
                                                                        },
                                                                        "TextBody": {
                                                                            "description": "The text body.",
                                                                            "maxLength": 20000,
                                                                            "minLength": 6,
                                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "Subject"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "From": {
                                                                    "description": "The email address that is sending the email. It must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.",
                                                                    "type": "string"
                                                                },
                                                                "MfaEmail": {
                                                                    "description": "The MFA email template used when MFA is challenged as part of a detected risk.",
                                                                    "properties": {
                                                                        "HtmlBody": {
                                                                            "description": "The HTML body.",
                                                                            "maxLength": 20000,
                                                                            "minLength": 6,
                                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                                            "type": "string"
                                                                        },
                                                                        "Subject": {
                                                                            "description": "The subject.",
                                                                            "maxLength": 140,
                                                                            "minLength": 1,
                                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                                            "type": "string"
                                                                        },
                                                                        "TextBody": {
                                                                            "description": "The text body.",
                                                                            "maxLength": 20000,
                                                                            "minLength": 6,
                                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "Subject"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "NoActionEmail": {
                                                                    "description": "The email template used when a detected risk event is allowed.",
                                                                    "properties": {
                                                                        "HtmlBody": {
                                                                            "description": "The HTML body.",
                                                                            "maxLength": 20000,
                                                                            "minLength": 6,
                                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                                            "type": "string"
                                                                        },
                                                                        "Subject": {
                                                                            "description": "The subject.",
                                                                            "maxLength": 140,
                                                                            "minLength": 1,
                                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                                            "type": "string"
                                                                        },
                                                                        "TextBody": {
                                                                            "description": "The text body.",
                                                                            "maxLength": 20000,
                                                                            "minLength": 6,
                                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "Subject"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "ReplyTo": {
                                                                    "description": "The destination to which the receiver of an email should reply to.",
                                                                    "type": "string"
                                                                },
                                                                "SourceArn": {
                                                                    "description": "The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. It permits Amazon Cognito to send for the email address specified in the <code>From</code> parameter.",
                                                                    "maxLength": 2048,
                                                                    "minLength": 20,
                                                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "SourceArn"
                                                            ],
                                                            "type": "object"
                                                        }
                                                    },
                                                    "required": [
                                                        "Actions"
                                                    ],
                                                    "type": "object"
                                                },
                                                "ClientId": {
                                                    "description": "The app client ID.",
                                                    "format": "password",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w+]+",
                                                    "type": "string"
                                                },
                                                "CompromisedCredentialsRiskConfiguration": {
                                                    "description": "The compromised credentials risk configuration object including the <code>EventFilter</code> and the <code>EventAction</code> ",
                                                    "properties": {
                                                        "Actions": {
                                                            "description": "The compromised credentials risk configuration actions.",
                                                            "properties": {
                                                                "EventAction": {
                                                                    "description": "The event action.",
                                                                    "enum": [
                                                                        "BLOCK",
                                                                        "NO_ACTION"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "EventAction"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "EventFilter": {
                                                            "description": "Perform the action for these events. The default is to perform all events if no event filter is specified.",
                                                            "items": {
                                                                "enum": [
                                                                    "SIGN_IN",
                                                                    "PASSWORD_CHANGE",
                                                                    "SIGN_UP"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "required": [
                                                        "Actions"
                                                    ],
                                                    "type": "object"
                                                },
                                                "LastModifiedDate": {
                                                    "description": "The last modified date.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "RiskExceptionConfiguration": {
                                                    "description": "The configuration to override the risk decision.",
                                                    "properties": {
                                                        "BlockedIPRangeList": {
                                                            "description": "Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation: a compact representation of an IP address and its associated routing prefix.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "maxItems": 20,
                                                            "type": "array"
                                                        },
                                                        "SkippedIPRangeList": {
                                                            "description": "Risk detection is not performed on the IP addresses in the range list. The IP range is in CIDR notation.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "maxItems": 20,
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "RiskConfiguration"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserPoolAddOnNotEnabledException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ClientId": {
                                        "description": "The app client ID.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeUserImportJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Describes the user import job.",
                "operationId": "DescribeUserImportJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server to the request to describe the user import job.",
                                    "properties": {
                                        "UserImportJob": {
                                            "description": "The job object that represents the user import job.",
                                            "properties": {
                                                "CloudWatchLogsRoleArn": {
                                                    "description": "The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito Developer Guide.",
                                                    "maxLength": 2048,
                                                    "minLength": 20,
                                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                    "type": "string"
                                                },
                                                "CompletionDate": {
                                                    "description": "The date when the user import job was completed.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "CompletionMessage": {
                                                    "description": "The message returned when the user import job is completed.",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w]+",
                                                    "type": "string"
                                                },
                                                "CreationDate": {
                                                    "description": "The date the user import job was created.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "FailedUsers": {
                                                    "description": "The number of users that could not be imported.",
                                                    "type": "integer"
                                                },
                                                "ImportedUsers": {
                                                    "description": "The number of users that were successfully imported.",
                                                    "type": "integer"
                                                },
                                                "JobId": {
                                                    "description": "The job ID for the user import job.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "import-[0-9a-zA-Z-]+",
                                                    "type": "string"
                                                },
                                                "JobName": {
                                                    "description": "The job name for the user import job.",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w\\s+=,.@-]+",
                                                    "type": "string"
                                                },
                                                "PreSignedUrl": {
                                                    "description": "The pre-signed URL to be used to upload the <code>.csv</code> file.",
                                                    "maxLength": 2048,
                                                    "minLength": 0,
                                                    "type": "string"
                                                },
                                                "SkippedUsers": {
                                                    "description": "The number of users that were skipped.",
                                                    "type": "integer"
                                                },
                                                "StartDate": {
                                                    "description": "The date when the user import job was started.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "Status": {
                                                    "description": "<p>The status of the user import job. One of the following:</p> <ul> <li> <p> <code>Created</code> - The job was created but not started.</p> </li> <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li> <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li> <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li> <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li> <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li> <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li> <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.</p> </li> </ul>",
                                                    "enum": [
                                                        "Created",
                                                        "Pending",
                                                        "InProgress",
                                                        "Stopping",
                                                        "Expired",
                                                        "Stopped",
                                                        "Failed",
                                                        "Succeeded"
                                                    ],
                                                    "type": "string"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID for the user pool that the users are being imported into.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to describe the user import job.",
                                "properties": {
                                    "JobId": {
                                        "description": "The job ID for the user import job.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "import-[0-9a-zA-Z-]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool that the users are being imported into.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "JobId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeUserPool": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Returns the configuration information and metadata of the specified user pool.",
                "operationId": "DescribeUserPool",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response to describe the user pool.",
                                    "properties": {
                                        "UserPool": {
                                            "description": "The container of metadata returned by the server to describe the pool.",
                                            "properties": {
                                                "AdminCreateUserConfig": {
                                                    "description": "The configuration for <code>AdminCreateUser</code> requests.",
                                                    "properties": {
                                                        "AllowAdminCreateUserOnly": {
                                                            "description": "Set to <code>True</code> if only the administrator is allowed to create user profiles. Set to <code>False</code> if users can sign themselves up via an app.",
                                                            "type": "boolean"
                                                        },
                                                        "InviteMessageTemplate": {
                                                            "description": "<p>The message template to be used for the welcome message to new users.</p> <p>See also <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization\">Customizing User Invitation Messages</a>.</p>",
                                                            "properties": {
                                                                "EmailMessage": {
                                                                    "description": "The message template for email messages.",
                                                                    "maxLength": 20000,
                                                                    "minLength": 6,
                                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                                                    "type": "string"
                                                                },
                                                                "EmailSubject": {
                                                                    "description": "The subject line for email messages.",
                                                                    "maxLength": 140,
                                                                    "minLength": 1,
                                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                                    "type": "string"
                                                                },
                                                                "SMSMessage": {
                                                                    "description": "The message template for SMS messages.",
                                                                    "maxLength": 140,
                                                                    "minLength": 6,
                                                                    "pattern": ".*\\{####\\}.*",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "UnusedAccountValidityDays": {
                                                            "description": "The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the <code>MessageAction</code> parameter. The default value for this parameter is 7.",
                                                            "maximum": 365,
                                                            "minimum": 0,
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "AliasAttributes": {
                                                    "description": "Specifies the attributes that are aliased in a user pool.",
                                                    "items": {
                                                        "enum": [
                                                            "phone_number",
                                                            "email",
                                                            "preferred_username"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "Arn": {
                                                    "description": "The Amazon Resource Name (ARN) for the user pool.",
                                                    "maxLength": 2048,
                                                    "minLength": 20,
                                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                    "type": "string"
                                                },
                                                "AutoVerifiedAttributes": {
                                                    "description": "Specifies the attributes that are auto-verified in a user pool.",
                                                    "items": {
                                                        "enum": [
                                                            "phone_number",
                                                            "email"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "CreationDate": {
                                                    "description": "The date the user pool was created.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "CustomDomain": {
                                                    "maxLength": 63,
                                                    "minLength": 1,
                                                    "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                                                    "type": "string"
                                                },
                                                "DeviceConfiguration": {
                                                    "description": "The device configuration.",
                                                    "properties": {
                                                        "ChallengeRequiredOnNewDevice": {
                                                            "description": "Indicates whether a challenge is required on a new device. Only applicable to a new device.",
                                                            "type": "boolean"
                                                        },
                                                        "DeviceOnlyRememberedOnUserPrompt": {
                                                            "description": "If true, a device is only remembered on user prompt.",
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "Domain": {
                                                    "description": "Holds the domain prefix if the user pool has a domain associated with it.",
                                                    "maxLength": 63,
                                                    "minLength": 1,
                                                    "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                                                    "type": "string"
                                                },
                                                "EmailConfiguration": {
                                                    "description": "The email configuration.",
                                                    "properties": {
                                                        "ReplyToEmailAddress": {
                                                            "description": "The destination to which the receiver of the email should reply to.",
                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                            "type": "string"
                                                        },
                                                        "SourceArn": {
                                                            "description": "The Amazon Resource Name (ARN) of the email source.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "EmailConfigurationFailure": {
                                                    "description": "The reason why the email configuration cannot send the messages to your users.",
                                                    "type": "string"
                                                },
                                                "EmailVerificationMessage": {
                                                    "description": "The contents of the email verification message.",
                                                    "maxLength": 20000,
                                                    "minLength": 6,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                                    "type": "string"
                                                },
                                                "EmailVerificationSubject": {
                                                    "description": "The subject of the email verification message.",
                                                    "maxLength": 140,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                    "type": "string"
                                                },
                                                "EstimatedNumberOfUsers": {
                                                    "description": "A number estimating the size of the user pool.",
                                                    "type": "integer"
                                                },
                                                "Id": {
                                                    "description": "The ID of the user pool.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                },
                                                "LambdaConfig": {
                                                    "description": "The AWS Lambda triggers associated with the user pool.",
                                                    "properties": {
                                                        "CreateAuthChallenge": {
                                                            "description": "Creates an authentication challenge.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "CustomMessage": {
                                                            "description": "A custom Message AWS Lambda trigger.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "DefineAuthChallenge": {
                                                            "description": "Defines the authentication challenge.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "PostAuthentication": {
                                                            "description": "A post-authentication AWS Lambda trigger.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "PostConfirmation": {
                                                            "description": "A post-confirmation AWS Lambda trigger.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "PreAuthentication": {
                                                            "description": "A pre-authentication AWS Lambda trigger.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "PreSignUp": {
                                                            "description": "A pre-registration AWS Lambda trigger.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "PreTokenGeneration": {
                                                            "description": "A Lambda trigger that is invoked before token generation.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "UserMigration": {
                                                            "description": "The user migration Lambda config type.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "VerifyAuthChallengeResponse": {
                                                            "description": "Verifies the authentication challenge response.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "LastModifiedDate": {
                                                    "description": "The date the user pool was last modified.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "MfaConfiguration": {
                                                    "description": "<p>Can be one of the following values:</p> <ul> <li> <p> <code>OFF</code> - MFA tokens are not required and cannot be specified during user registration.</p> </li> <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.</p> </li> <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li> </ul>",
                                                    "enum": [
                                                        "OFF",
                                                        "ON",
                                                        "OPTIONAL"
                                                    ],
                                                    "type": "string"
                                                },
                                                "Name": {
                                                    "description": "The name of the user pool.",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w\\s+=,.@-]+",
                                                    "type": "string"
                                                },
                                                "Policies": {
                                                    "description": "The policies associated with the user pool.",
                                                    "properties": {
                                                        "PasswordPolicy": {
                                                            "description": "The password policy.",
                                                            "properties": {
                                                                "MinimumLength": {
                                                                    "description": "The minimum length of the password policy that you have set. Cannot be less than 6.",
                                                                    "maximum": 99,
                                                                    "minimum": 6,
                                                                    "type": "integer"
                                                                },
                                                                "RequireLowercase": {
                                                                    "description": "In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.",
                                                                    "type": "boolean"
                                                                },
                                                                "RequireNumbers": {
                                                                    "description": "In the password policy that you have set, refers to whether you have required users to use at least one number in their password.",
                                                                    "type": "boolean"
                                                                },
                                                                "RequireSymbols": {
                                                                    "description": "In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.",
                                                                    "type": "boolean"
                                                                },
                                                                "RequireUppercase": {
                                                                    "description": "In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.",
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "SchemaAttributes": {
                                                    "description": "A container with the schema attributes of a user pool.",
                                                    "items": {
                                                        "description": "Contains information about the schema attribute.",
                                                        "properties": {
                                                            "AttributeDataType": {
                                                                "description": "The attribute data type.",
                                                                "enum": [
                                                                    "String",
                                                                    "Number",
                                                                    "DateTime",
                                                                    "Boolean"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "DeveloperOnlyAttribute": {
                                                                "description": "Specifies whether the attribute type is developer only.",
                                                                "type": "boolean"
                                                            },
                                                            "Mutable": {
                                                                "description": "<p>Specifies whether the value of the attribute can be changed.</p> <p>For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html\">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>",
                                                                "type": "boolean"
                                                            },
                                                            "Name": {
                                                                "description": "A schema attribute of the name type.",
                                                                "maxLength": 20,
                                                                "minLength": 1,
                                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                                "type": "string"
                                                            },
                                                            "NumberAttributeConstraints": {
                                                                "description": "Specifies the constraints for an attribute of the number type.",
                                                                "properties": {
                                                                    "MaxValue": {
                                                                        "description": "The maximum value of an attribute that is of the number data type.",
                                                                        "type": "string"
                                                                    },
                                                                    "MinValue": {
                                                                        "description": "The minimum value of an attribute that is of the number data type.",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "Required": {
                                                                "description": "Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.",
                                                                "type": "boolean"
                                                            },
                                                            "StringAttributeConstraints": {
                                                                "description": "Specifies the constraints for an attribute of the string type.",
                                                                "properties": {
                                                                    "MaxLength": {
                                                                        "description": "The maximum length.",
                                                                        "type": "string"
                                                                    },
                                                                    "MinLength": {
                                                                        "description": "The minimum length.",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "maxItems": 50,
                                                    "minItems": 1,
                                                    "type": "array"
                                                },
                                                "SmsAuthenticationMessage": {
                                                    "description": "The contents of the SMS authentication message.",
                                                    "maxLength": 140,
                                                    "minLength": 6,
                                                    "pattern": ".*\\{####\\}.*",
                                                    "type": "string"
                                                },
                                                "SmsConfiguration": {
                                                    "description": "The SMS configuration.",
                                                    "properties": {
                                                        "ExternalId": {
                                                            "description": "The external ID.",
                                                            "type": "string"
                                                        },
                                                        "SnsCallerArn": {
                                                            "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "SnsCallerArn"
                                                    ],
                                                    "type": "object"
                                                },
                                                "SmsConfigurationFailure": {
                                                    "description": "The reason why the SMS configuration cannot send the messages to your users.",
                                                    "type": "string"
                                                },
                                                "SmsVerificationMessage": {
                                                    "description": "The contents of the SMS verification message.",
                                                    "maxLength": 140,
                                                    "minLength": 6,
                                                    "pattern": ".*\\{####\\}.*",
                                                    "type": "string"
                                                },
                                                "Status": {
                                                    "description": "The status of a user pool.",
                                                    "enum": [
                                                        "Enabled",
                                                        "Disabled"
                                                    ],
                                                    "type": "string"
                                                },
                                                "UserPoolAddOns": {
                                                    "description": "The user pool add-ons.",
                                                    "properties": {
                                                        "AdvancedSecurityMode": {
                                                            "description": "The advanced security mode.",
                                                            "enum": [
                                                                "OFF",
                                                                "AUDIT",
                                                                "ENFORCED"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "AdvancedSecurityMode"
                                                    ],
                                                    "type": "object"
                                                },
                                                "UserPoolTags": {
                                                    "description": "The cost allocation tags for the user pool. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</a> ",
                                                    "items": {
                                                        "properties": {
                                                            "key": {
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "UsernameAttributes": {
                                                    "description": "Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.",
                                                    "items": {
                                                        "enum": [
                                                            "phone_number",
                                                            "email"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "VerificationMessageTemplate": {
                                                    "description": "The template for verification messages.",
                                                    "properties": {
                                                        "DefaultEmailOption": {
                                                            "description": "The default email option.",
                                                            "enum": [
                                                                "CONFIRM_WITH_LINK",
                                                                "CONFIRM_WITH_CODE"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "EmailMessage": {
                                                            "description": "The email message template.",
                                                            "maxLength": 20000,
                                                            "minLength": 6,
                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                                            "type": "string"
                                                        },
                                                        "EmailMessageByLink": {
                                                            "description": "The email message template for sending a confirmation link to the user.",
                                                            "maxLength": 20000,
                                                            "minLength": 6,
                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{##[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*##\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                                            "type": "string"
                                                        },
                                                        "EmailSubject": {
                                                            "description": "The subject line for the email message template.",
                                                            "maxLength": 140,
                                                            "minLength": 1,
                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                            "type": "string"
                                                        },
                                                        "EmailSubjectByLink": {
                                                            "description": "The subject line for the email message template for sending a confirmation link to the user.",
                                                            "maxLength": 140,
                                                            "minLength": 1,
                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                            "type": "string"
                                                        },
                                                        "SmsMessage": {
                                                            "description": "The SMS message template.",
                                                            "maxLength": 140,
                                                            "minLength": 6,
                                                            "pattern": ".*\\{####\\}.*",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserPoolTaggingException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to describe the user pool.",
                                "properties": {
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool you want to describe.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeUserPoolClient": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Client method for returning the configuration information and metadata of the specified user pool app client.",
                "operationId": "DescribeUserPoolClient",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server from a request to describe the user pool client.",
                                    "properties": {
                                        "UserPoolClient": {
                                            "description": "The user pool client from a server response to describe the user pool client.",
                                            "properties": {
                                                "AllowedOAuthFlows": {
                                                    "description": "<p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>token</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>",
                                                    "items": {
                                                        "enum": [
                                                            "code",
                                                            "implicit",
                                                            "client_credentials"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "maxItems": 3,
                                                    "minItems": 0,
                                                    "type": "array"
                                                },
                                                "AllowedOAuthFlowsUserPoolClient": {
                                                    "description": "Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.",
                                                    "type": "boolean"
                                                },
                                                "AllowedOAuthScopes": {
                                                    "description": "A list of allowed <code>OAuth</code> scopes. Currently supported values are <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and <code>\"Cognito\"</code>.",
                                                    "items": {
                                                        "maxLength": 256,
                                                        "minLength": 1,
                                                        "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                                        "type": "string"
                                                    },
                                                    "maxItems": 25,
                                                    "type": "array"
                                                },
                                                "AnalyticsConfiguration": {
                                                    "description": "The Amazon Pinpoint analytics configuration for the user pool client.",
                                                    "properties": {
                                                        "ApplicationId": {
                                                            "description": "The application ID for an Amazon Pinpoint application.",
                                                            "pattern": "^[0-9a-fA-F]+$",
                                                            "type": "string"
                                                        },
                                                        "ExternalId": {
                                                            "description": "The external ID.",
                                                            "type": "string"
                                                        },
                                                        "RoleArn": {
                                                            "description": "The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "UserDataShared": {
                                                            "description": "If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.",
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "required": [
                                                        "ApplicationId",
                                                        "RoleArn",
                                                        "ExternalId"
                                                    ],
                                                    "type": "object"
                                                },
                                                "CallbackURLs": {
                                                    "description": "<p>A list of allowed redirect (callback) URLs for the identity providers.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                                                    "items": {
                                                        "maxLength": 1024,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    },
                                                    "maxItems": 100,
                                                    "minItems": 0,
                                                    "type": "array"
                                                },
                                                "ClientId": {
                                                    "description": "The ID of the client associated with the user pool.",
                                                    "format": "password",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w+]+",
                                                    "type": "string"
                                                },
                                                "ClientName": {
                                                    "description": "The client name from the user pool request of the client type.",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w\\s+=,.@-]+",
                                                    "type": "string"
                                                },
                                                "ClientSecret": {
                                                    "description": "The client secret from the user pool request of the client type.",
                                                    "format": "password",
                                                    "maxLength": 64,
                                                    "minLength": 1,
                                                    "pattern": "[\\w+]+",
                                                    "type": "string"
                                                },
                                                "CreationDate": {
                                                    "description": "The date the user pool client was created.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "DefaultRedirectURI": {
                                                    "description": "<p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                                                    "maxLength": 1024,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "ExplicitAuthFlows": {
                                                    "description": "The explicit authentication flows.",
                                                    "items": {
                                                        "enum": [
                                                            "ADMIN_NO_SRP_AUTH",
                                                            "CUSTOM_AUTH_FLOW_ONLY",
                                                            "USER_PASSWORD_AUTH"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "LastModifiedDate": {
                                                    "description": "The date the user pool client was last modified.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "LogoutURLs": {
                                                    "description": "A list of allowed logout URLs for the identity providers.",
                                                    "items": {
                                                        "maxLength": 1024,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    },
                                                    "maxItems": 100,
                                                    "minItems": 0,
                                                    "type": "array"
                                                },
                                                "ReadAttributes": {
                                                    "description": "The Read-only attributes.",
                                                    "items": {
                                                        "maxLength": 2048,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "RefreshTokenValidity": {
                                                    "description": "The time limit, in days, after which the refresh token is no longer valid and cannot be used.",
                                                    "maximum": 3650,
                                                    "minimum": 0,
                                                    "type": "integer"
                                                },
                                                "SupportedIdentityProviders": {
                                                    "description": "A list of provider names for the identity providers that are supported on this client.",
                                                    "items": {
                                                        "maxLength": 32,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID for the user pool client.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                },
                                                "WriteAttributes": {
                                                    "description": "The writeable attributes.",
                                                    "items": {
                                                        "maxLength": 2048,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to describe a user pool client.",
                                "properties": {
                                    "ClientId": {
                                        "description": "The app client ID of the app associated with the user pool.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool you want to describe.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "ClientId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeUserPoolDomain": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets information about a domain.",
                "operationId": "DescribeUserPoolDomain",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "DomainDescription": {
                                            "description": "A domain description object containing information about the domain.",
                                            "properties": {
                                                "AWSAccountId": {
                                                    "description": "The AWS account ID for the user pool owner.",
                                                    "type": "string"
                                                },
                                                "CloudFrontDistribution": {
                                                    "description": "The ARN of the CloudFront distribution.",
                                                    "type": "string"
                                                },
                                                "CustomDomainConfig": {
                                                    "description": "The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.",
                                                    "properties": {
                                                        "CertificateArn": {
                                                            "description": "The Amazon Resource Name (ARN) of an AWS Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "CertificateArn"
                                                    ],
                                                    "type": "object"
                                                },
                                                "Domain": {
                                                    "description": "The domain string.",
                                                    "maxLength": 63,
                                                    "minLength": 1,
                                                    "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                                                    "type": "string"
                                                },
                                                "S3Bucket": {
                                                    "description": "The S3 bucket where the static files for this domain are stored.",
                                                    "maxLength": 1024,
                                                    "minLength": 3,
                                                    "pattern": "^[0-9A-Za-z\\.\\-_]*(?<!\\.)$",
                                                    "type": "string"
                                                },
                                                "Status": {
                                                    "description": "The domain status.",
                                                    "enum": [
                                                        "CREATING",
                                                        "DELETING",
                                                        "UPDATING",
                                                        "ACTIVE",
                                                        "FAILED"
                                                    ],
                                                    "type": "string"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                },
                                                "Version": {
                                                    "description": "The app version.",
                                                    "maxLength": 20,
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Domain": {
                                        "description": "The domain string.",
                                        "maxLength": 63,
                                        "minLength": 1,
                                        "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Domain"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ForgetDevice": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Forgets the specified device.",
                "operationId": "ForgetDevice",
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InvalidUserPoolConfigurationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to forget the device.",
                                "properties": {
                                    "AccessToken": {
                                        "description": "The access token for the forgotten device request.",
                                        "format": "password",
                                        "pattern": "[A-Za-z0-9-_=.]+",
                                        "type": "string"
                                    },
                                    "DeviceKey": {
                                        "description": "The device key.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-f-]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "DeviceKey"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ForgotPassword": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Calling this API causes a message to be sent to the end user with a confirmation code that is required to change the user's password. For the <code>Username</code> parameter, you can use the username or user alias. If a verified phone number exists for the user, the confirmation code is sent to the phone number. Otherwise, if a verified email exists, the confirmation code is sent to the email. If neither a verified phone number nor a verified email exists, <code>InvalidParameterException</code> is thrown. To use the confirmation code for resetting the password, call .",
                "operationId": "ForgotPassword",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Respresents the response from the server regarding the request to reset a password.",
                                    "properties": {
                                        "CodeDeliveryDetails": {
                                            "description": "The code delivery details returned by the server in response to the request to reset a password.",
                                            "properties": {
                                                "AttributeName": {
                                                    "description": "The attribute name.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "DeliveryMedium": {
                                                    "description": "The delivery medium (email message or phone number).",
                                                    "enum": [
                                                        "SMS",
                                                        "EMAIL"
                                                    ],
                                                    "type": "string"
                                                },
                                                "Destination": {
                                                    "description": "The destination for the code delivery details.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "UnexpectedLambdaException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "UserLambdaValidationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InvalidLambdaResponseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "InvalidSmsRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "InvalidSmsRoleTrustRelationshipException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "490": {
                        "description": "InvalidEmailRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "491": {
                        "description": "CodeDeliveryFailureException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "492": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "493": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "494": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to reset a user's password.",
                                "properties": {
                                    "AnalyticsMetadata": {
                                        "description": "The Amazon Pinpoint analytics metadata for collecting metrics for <code>ForgotPassword</code> calls.",
                                        "properties": {
                                            "AnalyticsEndpointId": {
                                                "description": "The endpoint ID.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "ClientId": {
                                        "description": "The ID of the client associated with the user pool.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+]+",
                                        "type": "string"
                                    },
                                    "SecretHash": {
                                        "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+=/]+",
                                        "type": "string"
                                    },
                                    "UserContextData": {
                                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                        "properties": {
                                            "EncodedData": {
                                                "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "Username": {
                                        "description": "The user name of the user for whom you want to enter a code to reset a forgotten password.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "ClientId",
                                    "Username"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GetCSVHeader": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets the header information for the .csv file to be used as input for the user import job.",
                "operationId": "GetCSVHeader",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server to the request to get the header information for the .csv file for the user import job.",
                                    "properties": {
                                        "CSVHeader": {
                                            "description": "The header information for the .csv file for the user import job.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "UserPoolId": {
                                            "description": "The user pool ID for the user pool that the users are to be imported into.",
                                            "maxLength": 55,
                                            "minLength": 1,
                                            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to get the header information for the .csv file for the user import job.",
                                "properties": {
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool that the users are to be imported into.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GetDevice": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets the device.",
                "operationId": "GetDevice",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Gets the device response.",
                                    "properties": {
                                        "Device": {
                                            "description": "The device.",
                                            "properties": {
                                                "DeviceAttributes": {
                                                    "description": "The device attributes.",
                                                    "items": {
                                                        "description": "Specifies whether the attribute is standard or custom.",
                                                        "properties": {
                                                            "Name": {
                                                                "description": "The name of the attribute.",
                                                                "maxLength": 32,
                                                                "minLength": 1,
                                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                                "type": "string"
                                                            },
                                                            "Value": {
                                                                "description": "The value of the attribute.",
                                                                "format": "password",
                                                                "maxLength": 2048,
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "Name"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "DeviceCreateDate": {
                                                    "description": "The creation date of the device.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "DeviceKey": {
                                                    "description": "The device key.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-f-]+",
                                                    "type": "string"
                                                },
                                                "DeviceLastAuthenticatedDate": {
                                                    "description": "The date in which the device was last authenticated.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "DeviceLastModifiedDate": {
                                                    "description": "The last modified date of the device.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "Device"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InvalidUserPoolConfigurationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to get the device.",
                                "properties": {
                                    "AccessToken": {
                                        "description": "The access token.",
                                        "format": "password",
                                        "pattern": "[A-Za-z0-9-_=.]+",
                                        "type": "string"
                                    },
                                    "DeviceKey": {
                                        "description": "The device key.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-f-]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "DeviceKey"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GetGroup": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Gets a group.</p> <p>Requires developer credentials.</p>",
                "operationId": "GetGroup",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Group": {
                                            "description": "The group object for the group.",
                                            "properties": {
                                                "CreationDate": {
                                                    "description": "The date the group was created.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "Description": {
                                                    "description": "A string containing the description of the group.",
                                                    "maxLength": 2048,
                                                    "type": "string"
                                                },
                                                "GroupName": {
                                                    "description": "The name of the group.",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "LastModifiedDate": {
                                                    "description": "The date the group was last modified.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "Precedence": {
                                                    "description": "<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user's tokens. Groups with higher <code>Precedence</code> values take precedence over groups with lower <code>Precedence</code> values or with null <code>Precedence</code> values.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>",
                                                    "minimum": 0,
                                                    "type": "integer"
                                                },
                                                "RoleArn": {
                                                    "description": "The role ARN for the group.",
                                                    "maxLength": 2048,
                                                    "minLength": 20,
                                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                    "type": "string"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID for the user pool.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "GroupName": {
                                        "description": "The name of the group.",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "GroupName",
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GetIdentityProviderByIdentifier": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets the specified identity provider.",
                "operationId": "GetIdentityProviderByIdentifier",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "IdentityProvider": {
                                            "description": "The identity provider object.",
                                            "properties": {
                                                "AttributeMapping": {
                                                    "description": "A mapping of identity provider attributes to standard and custom user pool attributes.",
                                                    "items": {
                                                        "properties": {
                                                            "key": {
                                                                "maxLength": 32,
                                                                "minLength": 1,
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "CreationDate": {
                                                    "description": "The date the identity provider was created.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "IdpIdentifiers": {
                                                    "description": "A list of identity provider identifiers.",
                                                    "items": {
                                                        "maxLength": 40,
                                                        "minLength": 1,
                                                        "pattern": "[\\w\\s+=.@-]+",
                                                        "type": "string"
                                                    },
                                                    "maxItems": 50,
                                                    "minItems": 0,
                                                    "type": "array"
                                                },
                                                "LastModifiedDate": {
                                                    "description": "The date the identity provider was last modified.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "ProviderDetails": {
                                                    "description": "The identity provider details, such as <code>MetadataURL</code> and <code>MetadataFile</code>.",
                                                    "items": {
                                                        "properties": {
                                                            "key": {
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "ProviderName": {
                                                    "description": "The identity provider name.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "ProviderType": {
                                                    "description": "The identity provider type.",
                                                    "enum": [
                                                        "SAML",
                                                        "Facebook",
                                                        "Google",
                                                        "LoginWithAmazon",
                                                        "OIDC"
                                                    ],
                                                    "type": "string"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "IdentityProvider"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "IdpIdentifier": {
                                        "description": "The identity provider ID.",
                                        "maxLength": 40,
                                        "minLength": 1,
                                        "pattern": "[\\w\\s+=.@-]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "IdpIdentifier"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GetSigningCertificate": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "This method takes a user pool ID, and returns the signing certificate.",
                "operationId": "GetSigningCertificate",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Response from Cognito for a signing certificate request.",
                                    "properties": {
                                        "Certificate": {
                                            "description": "The signing certificate.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Request to get a signing certificate from Cognito.",
                                "properties": {
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GetUICustomization": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets the UI Customization information for a particular app client's app UI, if there is something set. If nothing is set for the particular client, but there is an existing pool level customization (app <code>clientId</code> will be <code>ALL</code>), then that is returned. If nothing is present, then an empty shape is returned.",
                "operationId": "GetUICustomization",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "UICustomization": {
                                            "description": "The UI customization information.",
                                            "properties": {
                                                "CSS": {
                                                    "description": "The CSS values in the UI customization.",
                                                    "type": "string"
                                                },
                                                "CSSVersion": {
                                                    "description": "The CSS version number.",
                                                    "type": "string"
                                                },
                                                "ClientId": {
                                                    "description": "The client ID for the client app.",
                                                    "format": "password",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w+]+",
                                                    "type": "string"
                                                },
                                                "CreationDate": {
                                                    "description": "The creation date for the UI customization.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "ImageUrl": {
                                                    "description": "The logo image for the UI customization.",
                                                    "type": "string"
                                                },
                                                "LastModifiedDate": {
                                                    "description": "The last-modified date for the UI customization.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID for the user pool.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "UICustomization"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ClientId": {
                                        "description": "The client ID for the client app.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GetUser": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets the user attributes and metadata for a user.",
                "operationId": "GetUser",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server from the request to get information about the user.",
                                    "properties": {
                                        "MFAOptions": {
                                            "description": "Specifies the options for MFA (e.g., email or phone number).",
                                            "items": {
                                                "description": "Specifies the different settings for multi-factor authentication (MFA).",
                                                "properties": {
                                                    "AttributeName": {
                                                        "description": "The attribute name of the MFA option type.",
                                                        "maxLength": 32,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    },
                                                    "DeliveryMedium": {
                                                        "description": "The delivery medium (email message or SMS message) to send the MFA code.",
                                                        "enum": [
                                                            "SMS",
                                                            "EMAIL"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "PreferredMfaSetting": {
                                            "description": "The user's preferred MFA setting.",
                                            "type": "string"
                                        },
                                        "UserAttributes": {
                                            "description": "<p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>",
                                            "items": {
                                                "description": "Specifies whether the attribute is standard or custom.",
                                                "properties": {
                                                    "Name": {
                                                        "description": "The name of the attribute.",
                                                        "maxLength": 32,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    },
                                                    "Value": {
                                                        "description": "The value of the attribute.",
                                                        "format": "password",
                                                        "maxLength": 2048,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "Name"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "UserMFASettingList": {
                                            "description": "The list of the user's MFA settings.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "Username": {
                                            "description": "The user name of the user you wish to retrieve from the get user request.",
                                            "format": "password",
                                            "maxLength": 128,
                                            "minLength": 1,
                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "Username",
                                        "UserAttributes"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to get information about the user.",
                                "properties": {
                                    "AccessToken": {
                                        "description": "The access token returned by the server response to get information about the user.",
                                        "format": "password",
                                        "pattern": "[A-Za-z0-9-_=.]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "AccessToken"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GetUserAttributeVerificationCode": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets the user attribute verification code for the specified attribute name.",
                "operationId": "GetUserAttributeVerificationCode",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The verification code response returned by the server response to get the user attribute verification code.",
                                    "properties": {
                                        "CodeDeliveryDetails": {
                                            "description": "The code delivery details returned by the server in response to the request to get the user attribute verification code.",
                                            "properties": {
                                                "AttributeName": {
                                                    "description": "The attribute name.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "DeliveryMedium": {
                                                    "description": "The delivery medium (email message or phone number).",
                                                    "enum": [
                                                        "SMS",
                                                        "EMAIL"
                                                    ],
                                                    "type": "string"
                                                },
                                                "Destination": {
                                                    "description": "The destination for the code delivery details.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UnexpectedLambdaException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UserLambdaValidationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InvalidLambdaResponseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "InvalidSmsRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "InvalidSmsRoleTrustRelationshipException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "InvalidEmailRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "490": {
                        "description": "CodeDeliveryFailureException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "491": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "492": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "493": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "494": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "495": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to get user attribute verification.",
                                "properties": {
                                    "AccessToken": {
                                        "description": "The access token returned by the server response to get the user attribute verification code.",
                                        "format": "password",
                                        "pattern": "[A-Za-z0-9-_=.]+",
                                        "type": "string"
                                    },
                                    "AttributeName": {
                                        "description": "The attribute name returned by the server response to get the user attribute verification code.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "AccessToken",
                                    "AttributeName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GetUserPoolMfaConfig": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets the user pool multi-factor authentication (MFA) configuration.",
                "operationId": "GetUserPoolMfaConfig",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "MfaConfiguration": {
                                            "description": "The multi-factor (MFA) configuration.",
                                            "enum": [
                                                "OFF",
                                                "ON",
                                                "OPTIONAL"
                                            ],
                                            "type": "string"
                                        },
                                        "SmsMfaConfiguration": {
                                            "description": "The SMS text message multi-factor (MFA) configuration.",
                                            "properties": {
                                                "SmsAuthenticationMessage": {
                                                    "description": "The SMS authentication message.",
                                                    "maxLength": 140,
                                                    "minLength": 6,
                                                    "pattern": ".*\\{####\\}.*",
                                                    "type": "string"
                                                },
                                                "SmsConfiguration": {
                                                    "description": "The SMS configuration.",
                                                    "properties": {
                                                        "ExternalId": {
                                                            "description": "The external ID.",
                                                            "type": "string"
                                                        },
                                                        "SnsCallerArn": {
                                                            "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "SnsCallerArn"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "SoftwareTokenMfaConfiguration": {
                                            "description": "The software token multi-factor (MFA) configuration.",
                                            "properties": {
                                                "Enabled": {
                                                    "description": "Specifies whether software token MFA is enabled.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GlobalSignOut": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Signs out users from all devices.",
                "operationId": "GlobalSignOut",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The response to the request to sign out all devices.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to sign out all devices.",
                                "properties": {
                                    "AccessToken": {
                                        "description": "The access token.",
                                        "format": "password",
                                        "pattern": "[A-Za-z0-9-_=.]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "AccessToken"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#InitiateAuth": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Initiates the authentication flow.",
                "operationId": "InitiateAuth",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Initiates the authentication response.",
                                    "properties": {
                                        "AuthenticationResult": {
                                            "description": "The result of the authentication response. This is only returned if the caller does not need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, <code>ChallengeName</code>, <code>ChallengeParameters</code>, and <code>Session</code> are returned.",
                                            "properties": {
                                                "AccessToken": {
                                                    "description": "The access token.",
                                                    "format": "password",
                                                    "pattern": "[A-Za-z0-9-_=.]+",
                                                    "type": "string"
                                                },
                                                "ExpiresIn": {
                                                    "description": "The expiration period of the authentication result in seconds.",
                                                    "type": "integer"
                                                },
                                                "IdToken": {
                                                    "description": "The ID token.",
                                                    "format": "password",
                                                    "pattern": "[A-Za-z0-9-_=.]+",
                                                    "type": "string"
                                                },
                                                "NewDeviceMetadata": {
                                                    "description": "The new device metadata from an authentication result.",
                                                    "properties": {
                                                        "DeviceGroupKey": {
                                                            "description": "The device group key.",
                                                            "type": "string"
                                                        },
                                                        "DeviceKey": {
                                                            "description": "The device key.",
                                                            "maxLength": 55,
                                                            "minLength": 1,
                                                            "pattern": "[\\w-]+_[0-9a-f-]+",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "RefreshToken": {
                                                    "description": "The refresh token.",
                                                    "format": "password",
                                                    "pattern": "[A-Za-z0-9-_=.]+",
                                                    "type": "string"
                                                },
                                                "TokenType": {
                                                    "description": "The token type.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "ChallengeName": {
                                            "description": "<p>The name of the challenge which you are responding to with this call. This is returned to you in the <code>AdminInitiateAuth</code> response if you need to pass another challenge.</p> <p>Valid values include the following. Note that all of these challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable) in the parameters.</p> <ul> <li> <p> <code>SMS_MFA</code>: Next challenge is to supply an <code>SMS_MFA_CODE</code>, delivered via SMS.</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: Next challenge is to supply <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after the client-side SRP calculations.</p> </li> <li> <p> <code>CUSTOM_CHALLENGE</code>: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.</p> </li> <li> <p> <code>DEVICE_SRP_AUTH</code>: If device tracking was enabled on your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.</p> </li> <li> <p> <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to <code>PASSWORD_VERIFIER</code>, but for devices only.</p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: For users which are required to change their passwords after successful first login. This challenge should be passed with <code>NEW_PASSWORD</code> and any other required attributes.</p> </li> </ul>",
                                            "enum": [
                                                "SMS_MFA",
                                                "SOFTWARE_TOKEN_MFA",
                                                "SELECT_MFA_TYPE",
                                                "MFA_SETUP",
                                                "PASSWORD_VERIFIER",
                                                "CUSTOM_CHALLENGE",
                                                "DEVICE_SRP_AUTH",
                                                "DEVICE_PASSWORD_VERIFIER",
                                                "ADMIN_NO_SRP_AUTH",
                                                "NEW_PASSWORD_REQUIRED"
                                            ],
                                            "type": "string"
                                        },
                                        "ChallengeParameters": {
                                            "description": "<p>The challenge parameters. These are returned to you in the <code>InitiateAuth</code> response if you need to pass another challenge. The responses in this parameter should be used to compute inputs to the next call (<code>RespondToAuthChallenge</code>). </p> <p>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable).</p>",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "Session": {
                                            "description": "The session which should be passed both ways in challenge-response calls to the service. If the or API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.",
                                            "maxLength": 2048,
                                            "minLength": 20,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UnexpectedLambdaException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InvalidUserPoolConfigurationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "UserLambdaValidationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "InvalidLambdaResponseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "490": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "491": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Initiates the authentication request.",
                                "properties": {
                                    "AnalyticsMetadata": {
                                        "description": "The Amazon Pinpoint analytics metadata for collecting metrics for <code>InitiateAuth</code> calls.",
                                        "properties": {
                                            "AnalyticsEndpointId": {
                                                "description": "The endpoint ID.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "AuthFlow": {
                                        "description": "<p>The authentication flow for this call to execute. The API action will depend on this value. For example: </p> <ul> <li> <p> <code>REFRESH_TOKEN_AUTH</code> will take in a valid refresh token and return new tokens.</p> </li> <li> <p> <code>USER_SRP_AUTH</code> will take in <code>USERNAME</code> and <code>SRP_A</code> and return the SRP variables to be used for next challenge execution.</p> </li> <li> <p> <code>USER_PASSWORD_AUTH</code> will take in <code>USERNAME</code> and <code>PASSWORD</code> and return the next challenge or tokens.</p> </li> </ul> <p>Valid values include:</p> <ul> <li> <p> <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote Password (SRP) protocol.</p> </li> <li> <p> <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.</p> </li> <li> <p> <code>CUSTOM_AUTH</code>: Custom authentication flow.</p> </li> <li> <p> <code>USER_PASSWORD_AUTH</code>: Non-SRP authentication flow; USERNAME and PASSWORD are passed directly. If a user migration Lambda trigger is set, this flow will invoke the user migration Lambda if the USERNAME is not found in the user pool. </p> </li> </ul> <p> <code>ADMIN_NO_SRP_AUTH</code> is not a valid value.</p>",
                                        "enum": [
                                            "USER_SRP_AUTH",
                                            "REFRESH_TOKEN_AUTH",
                                            "REFRESH_TOKEN",
                                            "CUSTOM_AUTH",
                                            "ADMIN_NO_SRP_AUTH",
                                            "USER_PASSWORD_AUTH"
                                        ],
                                        "type": "string"
                                    },
                                    "AuthParameters": {
                                        "description": "<p>The authentication parameters. These are inputs corresponding to the <code>AuthFlow</code> that you are invoking. The required values depend on the value of <code>AuthFlow</code>:</p> <ul> <li> <p>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required), <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>: <code>REFRESH_TOKEN</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (if app client is configured with client secret), <code>DEVICE_KEY</code> </p> </li> </ul>",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "ClientId": {
                                        "description": "The app client ID.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+]+",
                                        "type": "string"
                                    },
                                    "ClientMetadata": {
                                        "description": "This is a random key-value pair map which can contain any key and will be passed to your PreAuthentication Lambda trigger as-is. It can be used to implement additional validations around authentication.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "UserContextData": {
                                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                        "properties": {
                                            "EncodedData": {
                                                "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "AuthFlow",
                                    "ClientId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListDevices": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Lists the devices.",
                "operationId": "ListDevices",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response to list devices.",
                                    "properties": {
                                        "Devices": {
                                            "description": "The devices returned in the list devices response.",
                                            "items": {
                                                "description": "The device type.",
                                                "properties": {
                                                    "DeviceAttributes": {
                                                        "description": "The device attributes.",
                                                        "items": {
                                                            "description": "Specifies whether the attribute is standard or custom.",
                                                            "properties": {
                                                                "Name": {
                                                                    "description": "The name of the attribute.",
                                                                    "maxLength": 32,
                                                                    "minLength": 1,
                                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                                    "type": "string"
                                                                },
                                                                "Value": {
                                                                    "description": "The value of the attribute.",
                                                                    "format": "password",
                                                                    "maxLength": 2048,
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "Name"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "DeviceCreateDate": {
                                                        "description": "The creation date of the device.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "DeviceKey": {
                                                        "description": "The device key.",
                                                        "maxLength": 55,
                                                        "minLength": 1,
                                                        "pattern": "[\\w-]+_[0-9a-f-]+",
                                                        "type": "string"
                                                    },
                                                    "DeviceLastAuthenticatedDate": {
                                                        "description": "The date in which the device was last authenticated.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "DeviceLastModifiedDate": {
                                                        "description": "The last modified date of the device.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "PaginationToken": {
                                            "description": "The pagination token for the list device response.",
                                            "minLength": 1,
                                            "pattern": "[\\S]+",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InvalidUserPoolConfigurationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to list the devices.",
                                "properties": {
                                    "AccessToken": {
                                        "description": "The access tokens for the request to list devices.",
                                        "format": "password",
                                        "pattern": "[A-Za-z0-9-_=.]+",
                                        "type": "string"
                                    },
                                    "Limit": {
                                        "description": "The limit of the device request.",
                                        "maximum": 60,
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "PaginationToken": {
                                        "description": "The pagination token for the list request.",
                                        "minLength": 1,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "AccessToken"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListGroups": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Lists the groups associated with a user pool.</p> <p>Requires developer credentials.</p>",
                "operationId": "ListGroups",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Groups": {
                                            "description": "The group objects for the groups.",
                                            "items": {
                                                "description": "The group type.",
                                                "properties": {
                                                    "CreationDate": {
                                                        "description": "The date the group was created.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "Description": {
                                                        "description": "A string containing the description of the group.",
                                                        "maxLength": 2048,
                                                        "type": "string"
                                                    },
                                                    "GroupName": {
                                                        "description": "The name of the group.",
                                                        "maxLength": 128,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    },
                                                    "LastModifiedDate": {
                                                        "description": "The date the group was last modified.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "Precedence": {
                                                        "description": "<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user's tokens. Groups with higher <code>Precedence</code> values take precedence over groups with lower <code>Precedence</code> values or with null <code>Precedence</code> values.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>",
                                                        "minimum": 0,
                                                        "type": "integer"
                                                    },
                                                    "RoleArn": {
                                                        "description": "The role ARN for the group.",
                                                        "maxLength": 2048,
                                                        "minLength": 20,
                                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                        "type": "string"
                                                    },
                                                    "UserPoolId": {
                                                        "description": "The user pool ID for the user pool.",
                                                        "maxLength": 55,
                                                        "minLength": 1,
                                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "NextToken": {
                                            "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                                            "minLength": 1,
                                            "pattern": "[\\S]+",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Limit": {
                                        "description": "The limit of the request to list groups.",
                                        "maximum": 60,
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "NextToken": {
                                        "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                                        "minLength": 1,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListIdentityProviders": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Lists information about all identity providers for a user pool.",
                "operationId": "ListIdentityProviders",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "NextToken": {
                                            "description": "A pagination token.",
                                            "minLength": 1,
                                            "pattern": "[\\S]+",
                                            "type": "string"
                                        },
                                        "Providers": {
                                            "description": "A list of identity provider objects.",
                                            "items": {
                                                "description": "A container for identity provider details.",
                                                "properties": {
                                                    "CreationDate": {
                                                        "description": "The date the provider was added to the user pool.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "LastModifiedDate": {
                                                        "description": "The date the provider was last modified.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "ProviderName": {
                                                        "description": "The identity provider name.",
                                                        "maxLength": 32,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    },
                                                    "ProviderType": {
                                                        "description": "The identity provider type.",
                                                        "enum": [
                                                            "SAML",
                                                            "Facebook",
                                                            "Google",
                                                            "LoginWithAmazon",
                                                            "OIDC"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "maxItems": 50,
                                            "minItems": 0,
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "Providers"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "MaxResults": {
                                        "description": "The maximum number of identity providers to return.",
                                        "maximum": 60,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "NextToken": {
                                        "description": "A pagination token.",
                                        "minLength": 1,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListResourceServers": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Lists the resource servers for a user pool.",
                "operationId": "ListResourceServers",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "NextToken": {
                                            "description": "A pagination token.",
                                            "minLength": 1,
                                            "pattern": "[\\S]+",
                                            "type": "string"
                                        },
                                        "ResourceServers": {
                                            "description": "The resource servers.",
                                            "items": {
                                                "description": "A container for information about a resource server for a user pool.",
                                                "properties": {
                                                    "Identifier": {
                                                        "description": "The identifier for the resource server.",
                                                        "maxLength": 256,
                                                        "minLength": 1,
                                                        "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                                        "type": "string"
                                                    },
                                                    "Name": {
                                                        "description": "The name of the resource server.",
                                                        "maxLength": 256,
                                                        "minLength": 1,
                                                        "pattern": "[\\w\\s+=,.@-]+",
                                                        "type": "string"
                                                    },
                                                    "Scopes": {
                                                        "description": "A list of scopes that are defined for the resource server.",
                                                        "items": {
                                                            "description": "A resource server scope.",
                                                            "properties": {
                                                                "ScopeDescription": {
                                                                    "description": "A description of the scope.",
                                                                    "maxLength": 256,
                                                                    "minLength": 1,
                                                                    "type": "string"
                                                                },
                                                                "ScopeName": {
                                                                    "description": "The name of the scope.",
                                                                    "maxLength": 256,
                                                                    "minLength": 1,
                                                                    "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "ScopeName",
                                                                "ScopeDescription"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "maxItems": 25,
                                                        "type": "array"
                                                    },
                                                    "UserPoolId": {
                                                        "description": "The user pool ID for the user pool that hosts the resource server.",
                                                        "maxLength": 55,
                                                        "minLength": 1,
                                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "ResourceServers"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "MaxResults": {
                                        "description": "The maximum number of resource servers to return.",
                                        "maximum": 50,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "NextToken": {
                                        "description": "A pagination token.",
                                        "minLength": 1,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListUserImportJobs": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Lists the user import jobs.",
                "operationId": "ListUserImportJobs",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server to the request to list the user import jobs.",
                                    "properties": {
                                        "PaginationToken": {
                                            "description": "An identifier that can be used to return the next set of user import jobs in the list.",
                                            "minLength": 1,
                                            "pattern": "[\\S]+",
                                            "type": "string"
                                        },
                                        "UserImportJobs": {
                                            "description": "The user import jobs.",
                                            "items": {
                                                "description": "The user import job type.",
                                                "properties": {
                                                    "CloudWatchLogsRoleArn": {
                                                        "description": "The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito Developer Guide.",
                                                        "maxLength": 2048,
                                                        "minLength": 20,
                                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                        "type": "string"
                                                    },
                                                    "CompletionDate": {
                                                        "description": "The date when the user import job was completed.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "CompletionMessage": {
                                                        "description": "The message returned when the user import job is completed.",
                                                        "maxLength": 128,
                                                        "minLength": 1,
                                                        "pattern": "[\\w]+",
                                                        "type": "string"
                                                    },
                                                    "CreationDate": {
                                                        "description": "The date the user import job was created.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "FailedUsers": {
                                                        "description": "The number of users that could not be imported.",
                                                        "type": "integer"
                                                    },
                                                    "ImportedUsers": {
                                                        "description": "The number of users that were successfully imported.",
                                                        "type": "integer"
                                                    },
                                                    "JobId": {
                                                        "description": "The job ID for the user import job.",
                                                        "maxLength": 55,
                                                        "minLength": 1,
                                                        "pattern": "import-[0-9a-zA-Z-]+",
                                                        "type": "string"
                                                    },
                                                    "JobName": {
                                                        "description": "The job name for the user import job.",
                                                        "maxLength": 128,
                                                        "minLength": 1,
                                                        "pattern": "[\\w\\s+=,.@-]+",
                                                        "type": "string"
                                                    },
                                                    "PreSignedUrl": {
                                                        "description": "The pre-signed URL to be used to upload the <code>.csv</code> file.",
                                                        "maxLength": 2048,
                                                        "minLength": 0,
                                                        "type": "string"
                                                    },
                                                    "SkippedUsers": {
                                                        "description": "The number of users that were skipped.",
                                                        "type": "integer"
                                                    },
                                                    "StartDate": {
                                                        "description": "The date when the user import job was started.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "Status": {
                                                        "description": "<p>The status of the user import job. One of the following:</p> <ul> <li> <p> <code>Created</code> - The job was created but not started.</p> </li> <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li> <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li> <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li> <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li> <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li> <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li> <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.</p> </li> </ul>",
                                                        "enum": [
                                                            "Created",
                                                            "Pending",
                                                            "InProgress",
                                                            "Stopping",
                                                            "Expired",
                                                            "Stopped",
                                                            "Failed",
                                                            "Succeeded"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "UserPoolId": {
                                                        "description": "The user pool ID for the user pool that the users are being imported into.",
                                                        "maxLength": 55,
                                                        "minLength": 1,
                                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "maxItems": 50,
                                            "minItems": 1,
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to list the user import jobs.",
                                "properties": {
                                    "MaxResults": {
                                        "description": "The maximum number of import jobs you want the request to return.",
                                        "maximum": 60,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "PaginationToken": {
                                        "description": "An identifier that was returned from the previous call to <code>ListUserImportJobs</code>, which can be used to return the next set of import jobs in the list.",
                                        "minLength": 1,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool that the users are being imported into.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "MaxResults"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListUserPoolClients": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Lists the clients that have been created for the specified user pool.",
                "operationId": "ListUserPoolClients",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server that lists user pool clients.",
                                    "properties": {
                                        "NextToken": {
                                            "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                                            "minLength": 1,
                                            "pattern": "[\\S]+",
                                            "type": "string"
                                        },
                                        "UserPoolClients": {
                                            "description": "The user pool clients in the response that lists user pool clients.",
                                            "items": {
                                                "description": "The description of the user pool client.",
                                                "properties": {
                                                    "ClientId": {
                                                        "description": "The ID of the client associated with the user pool.",
                                                        "format": "password",
                                                        "maxLength": 128,
                                                        "minLength": 1,
                                                        "pattern": "[\\w+]+",
                                                        "type": "string"
                                                    },
                                                    "ClientName": {
                                                        "description": "The client name from the user pool client description.",
                                                        "maxLength": 128,
                                                        "minLength": 1,
                                                        "pattern": "[\\w\\s+=,.@-]+",
                                                        "type": "string"
                                                    },
                                                    "UserPoolId": {
                                                        "description": "The user pool ID for the user pool where you want to describe the user pool client.",
                                                        "maxLength": 55,
                                                        "minLength": 1,
                                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to list the user pool clients.",
                                "properties": {
                                    "MaxResults": {
                                        "description": "The maximum number of results you want the request to return when listing the user pool clients.",
                                        "maximum": 60,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "NextToken": {
                                        "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                                        "minLength": 1,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool where you want to list user pool clients.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListUserPools": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Lists the user pools associated with an AWS account.",
                "operationId": "ListUserPools",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response to list user pools.",
                                    "properties": {
                                        "NextToken": {
                                            "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                                            "minLength": 1,
                                            "pattern": "[\\S]+",
                                            "type": "string"
                                        },
                                        "UserPools": {
                                            "description": "The user pools from the response to list users.",
                                            "items": {
                                                "description": "A user pool description.",
                                                "properties": {
                                                    "CreationDate": {
                                                        "description": "The date the user pool description was created.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "Id": {
                                                        "description": "The ID in a user pool description.",
                                                        "maxLength": 55,
                                                        "minLength": 1,
                                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                        "type": "string"
                                                    },
                                                    "LambdaConfig": {
                                                        "description": "The AWS Lambda configuration information in a user pool description.",
                                                        "properties": {
                                                            "CreateAuthChallenge": {
                                                                "description": "Creates an authentication challenge.",
                                                                "maxLength": 2048,
                                                                "minLength": 20,
                                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                                "type": "string"
                                                            },
                                                            "CustomMessage": {
                                                                "description": "A custom Message AWS Lambda trigger.",
                                                                "maxLength": 2048,
                                                                "minLength": 20,
                                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                                "type": "string"
                                                            },
                                                            "DefineAuthChallenge": {
                                                                "description": "Defines the authentication challenge.",
                                                                "maxLength": 2048,
                                                                "minLength": 20,
                                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                                "type": "string"
                                                            },
                                                            "PostAuthentication": {
                                                                "description": "A post-authentication AWS Lambda trigger.",
                                                                "maxLength": 2048,
                                                                "minLength": 20,
                                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                                "type": "string"
                                                            },
                                                            "PostConfirmation": {
                                                                "description": "A post-confirmation AWS Lambda trigger.",
                                                                "maxLength": 2048,
                                                                "minLength": 20,
                                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                                "type": "string"
                                                            },
                                                            "PreAuthentication": {
                                                                "description": "A pre-authentication AWS Lambda trigger.",
                                                                "maxLength": 2048,
                                                                "minLength": 20,
                                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                                "type": "string"
                                                            },
                                                            "PreSignUp": {
                                                                "description": "A pre-registration AWS Lambda trigger.",
                                                                "maxLength": 2048,
                                                                "minLength": 20,
                                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                                "type": "string"
                                                            },
                                                            "PreTokenGeneration": {
                                                                "description": "A Lambda trigger that is invoked before token generation.",
                                                                "maxLength": 2048,
                                                                "minLength": 20,
                                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                                "type": "string"
                                                            },
                                                            "UserMigration": {
                                                                "description": "The user migration Lambda config type.",
                                                                "maxLength": 2048,
                                                                "minLength": 20,
                                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                                "type": "string"
                                                            },
                                                            "VerifyAuthChallengeResponse": {
                                                                "description": "Verifies the authentication challenge response.",
                                                                "maxLength": 2048,
                                                                "minLength": 20,
                                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "LastModifiedDate": {
                                                        "description": "The date the user pool description was last modified.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "Name": {
                                                        "description": "The name in a user pool description.",
                                                        "maxLength": 128,
                                                        "minLength": 1,
                                                        "pattern": "[\\w\\s+=,.@-]+",
                                                        "type": "string"
                                                    },
                                                    "Status": {
                                                        "description": "The user pool status in a user pool description.",
                                                        "enum": [
                                                            "Enabled",
                                                            "Disabled"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to list user pools.",
                                "properties": {
                                    "MaxResults": {
                                        "description": "The maximum number of results you want the request to return when listing the user pools.",
                                        "maximum": 60,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "NextToken": {
                                        "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                                        "minLength": 1,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "MaxResults"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListUsers": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Lists the users in the Amazon Cognito user pool.",
                "operationId": "ListUsers",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The response from the request to list users.",
                                    "properties": {
                                        "PaginationToken": {
                                            "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                                            "minLength": 1,
                                            "pattern": "[\\S]+",
                                            "type": "string"
                                        },
                                        "Users": {
                                            "description": "The users returned in the request to list users.",
                                            "items": {
                                                "description": "The user type.",
                                                "properties": {
                                                    "Attributes": {
                                                        "description": "A container with information about the user type attributes.",
                                                        "items": {
                                                            "description": "Specifies whether the attribute is standard or custom.",
                                                            "properties": {
                                                                "Name": {
                                                                    "description": "The name of the attribute.",
                                                                    "maxLength": 32,
                                                                    "minLength": 1,
                                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                                    "type": "string"
                                                                },
                                                                "Value": {
                                                                    "description": "The value of the attribute.",
                                                                    "format": "password",
                                                                    "maxLength": 2048,
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "Name"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "Enabled": {
                                                        "description": "Specifies whether the user is enabled.",
                                                        "type": "boolean"
                                                    },
                                                    "MFAOptions": {
                                                        "description": "The MFA options for the user.",
                                                        "items": {
                                                            "description": "Specifies the different settings for multi-factor authentication (MFA).",
                                                            "properties": {
                                                                "AttributeName": {
                                                                    "description": "The attribute name of the MFA option type.",
                                                                    "maxLength": 32,
                                                                    "minLength": 1,
                                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                                    "type": "string"
                                                                },
                                                                "DeliveryMedium": {
                                                                    "description": "The delivery medium (email message or SMS message) to send the MFA code.",
                                                                    "enum": [
                                                                        "SMS",
                                                                        "EMAIL"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "UserCreateDate": {
                                                        "description": "The creation date of the user.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "UserLastModifiedDate": {
                                                        "description": "The last modified date of the user.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "UserStatus": {
                                                        "description": "<p>The user status. Can be one of the following:</p> <ul> <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li> <li> <p>CONFIRMED - User has been confirmed.</p> </li> <li> <p>ARCHIVED - User is no longer active.</p> </li> <li> <p>COMPROMISED - User is disabled due to a potential security threat.</p> </li> <li> <p>UNKNOWN - User status is not known.</p> </li> </ul>",
                                                        "enum": [
                                                            "UNCONFIRMED",
                                                            "CONFIRMED",
                                                            "ARCHIVED",
                                                            "COMPROMISED",
                                                            "UNKNOWN",
                                                            "RESET_REQUIRED",
                                                            "FORCE_CHANGE_PASSWORD"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "Username": {
                                                        "description": "The user name of the user you wish to describe.",
                                                        "format": "password",
                                                        "maxLength": 128,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to list users.",
                                "properties": {
                                    "AttributesToGet": {
                                        "description": "An array of strings, where each string is the name of a user attribute to be returned for each user in the search results. If the array is null, all attributes are returned.",
                                        "items": {
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "Filter": {
                                        "description": "<p>A filter string of the form \"<i>AttributeName</i> <i>Filter-Type</i> \"<i>AttributeValue</i>\"\". Quotation marks within the filter string must be escaped using the backslash (\\) character. For example, \"<code>family_name</code> = \\\"Reddy\\\"\".</p> <ul> <li> <p> <i>AttributeName</i>: The name of the attribute to search for. You can only search for one attribute at a time.</p> </li> <li> <p> <i>Filter-Type</i>: For an exact match, use =, for example, \"<code>given_name</code> = \\\"Jon\\\"\". For a prefix (\"starts with\") match, use ^=, for example, \"<code>given_name</code> ^= \\\"Jon\\\"\". </p> </li> <li> <p> <i>AttributeValue</i>: The attribute value that must be matched for each user.</p> </li> </ul> <p>If the filter string is empty, <code>ListUsers</code> returns all users in the user pool.</p> <p>You can only search for the following standard attributes:</p> <ul> <li> <p> <code>username</code> (case-sensitive)</p> </li> <li> <p> <code>email</code> </p> </li> <li> <p> <code>phone_number</code> </p> </li> <li> <p> <code>name</code> </p> </li> <li> <p> <code>given_name</code> </p> </li> <li> <p> <code>family_name</code> </p> </li> <li> <p> <code>preferred_username</code> </p> </li> <li> <p> <code>cognito:user_status</code> (called <b>Status</b> in the Console) (case-insensitive)</p> </li> <li> <p> <code>status (called <b>Enabled</b> in the Console) (case-sensitive)</code> </p> </li> <li> <p> <code>sub</code> </p> </li> </ul> <p>Custom attributes are not searchable.</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api\">Searching for Users Using the ListUsers API</a> and <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples\">Examples of Using the ListUsers API</a> in the <i>Amazon Cognito Developer Guide</i>.</p>",
                                        "maxLength": 256,
                                        "type": "string"
                                    },
                                    "Limit": {
                                        "description": "Maximum number of users to be returned.",
                                        "maximum": 60,
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "PaginationToken": {
                                        "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                                        "minLength": 1,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool on which the search should be performed.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListUsersInGroup": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Lists the users in the specified group.</p> <p>Requires developer credentials.</p>",
                "operationId": "ListUsersInGroup",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "NextToken": {
                                            "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                                            "minLength": 1,
                                            "pattern": "[\\S]+",
                                            "type": "string"
                                        },
                                        "Users": {
                                            "description": "The users returned in the request to list users.",
                                            "items": {
                                                "description": "The user type.",
                                                "properties": {
                                                    "Attributes": {
                                                        "description": "A container with information about the user type attributes.",
                                                        "items": {
                                                            "description": "Specifies whether the attribute is standard or custom.",
                                                            "properties": {
                                                                "Name": {
                                                                    "description": "The name of the attribute.",
                                                                    "maxLength": 32,
                                                                    "minLength": 1,
                                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                                    "type": "string"
                                                                },
                                                                "Value": {
                                                                    "description": "The value of the attribute.",
                                                                    "format": "password",
                                                                    "maxLength": 2048,
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "Name"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "Enabled": {
                                                        "description": "Specifies whether the user is enabled.",
                                                        "type": "boolean"
                                                    },
                                                    "MFAOptions": {
                                                        "description": "The MFA options for the user.",
                                                        "items": {
                                                            "description": "Specifies the different settings for multi-factor authentication (MFA).",
                                                            "properties": {
                                                                "AttributeName": {
                                                                    "description": "The attribute name of the MFA option type.",
                                                                    "maxLength": 32,
                                                                    "minLength": 1,
                                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                                    "type": "string"
                                                                },
                                                                "DeliveryMedium": {
                                                                    "description": "The delivery medium (email message or SMS message) to send the MFA code.",
                                                                    "enum": [
                                                                        "SMS",
                                                                        "EMAIL"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "UserCreateDate": {
                                                        "description": "The creation date of the user.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "UserLastModifiedDate": {
                                                        "description": "The last modified date of the user.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "UserStatus": {
                                                        "description": "<p>The user status. Can be one of the following:</p> <ul> <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li> <li> <p>CONFIRMED - User has been confirmed.</p> </li> <li> <p>ARCHIVED - User is no longer active.</p> </li> <li> <p>COMPROMISED - User is disabled due to a potential security threat.</p> </li> <li> <p>UNKNOWN - User status is not known.</p> </li> </ul>",
                                                        "enum": [
                                                            "UNCONFIRMED",
                                                            "CONFIRMED",
                                                            "ARCHIVED",
                                                            "COMPROMISED",
                                                            "UNKNOWN",
                                                            "RESET_REQUIRED",
                                                            "FORCE_CHANGE_PASSWORD"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "Username": {
                                                        "description": "The user name of the user you wish to describe.",
                                                        "format": "password",
                                                        "maxLength": 128,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "GroupName": {
                                        "description": "The name of the group.",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "Limit": {
                                        "description": "The limit of the request to list users.",
                                        "maximum": 60,
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "NextToken": {
                                        "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                                        "minLength": 1,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "GroupName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ResendConfirmationCode": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Resends the confirmation (for confirmation of registration) to a specific user in the user pool.",
                "operationId": "ResendConfirmationCode",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The response from the server when the Amazon Cognito Your User Pools service makes the request to resend a confirmation code.",
                                    "properties": {
                                        "CodeDeliveryDetails": {
                                            "description": "The code delivery details returned by the server in response to the request to resend the confirmation code.",
                                            "properties": {
                                                "AttributeName": {
                                                    "description": "The attribute name.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "DeliveryMedium": {
                                                    "description": "The delivery medium (email message or phone number).",
                                                    "enum": [
                                                        "SMS",
                                                        "EMAIL"
                                                    ],
                                                    "type": "string"
                                                },
                                                "Destination": {
                                                    "description": "The destination for the code delivery details.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "UnexpectedLambdaException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "UserLambdaValidationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InvalidLambdaResponseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "InvalidSmsRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "InvalidSmsRoleTrustRelationshipException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "490": {
                        "description": "InvalidEmailRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "491": {
                        "description": "CodeDeliveryFailureException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "492": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "493": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to resend the confirmation code.",
                                "properties": {
                                    "AnalyticsMetadata": {
                                        "description": "The Amazon Pinpoint analytics metadata for collecting metrics for <code>ResendConfirmationCode</code> calls.",
                                        "properties": {
                                            "AnalyticsEndpointId": {
                                                "description": "The endpoint ID.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "ClientId": {
                                        "description": "The ID of the client associated with the user pool.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+]+",
                                        "type": "string"
                                    },
                                    "SecretHash": {
                                        "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+=/]+",
                                        "type": "string"
                                    },
                                    "UserContextData": {
                                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                        "properties": {
                                            "EncodedData": {
                                                "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "Username": {
                                        "description": "The user name of the user to whom you wish to resend a confirmation code.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "ClientId",
                                    "Username"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#RespondToAuthChallenge": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Responds to the authentication challenge.",
                "operationId": "RespondToAuthChallenge",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The response to respond to the authentication challenge.",
                                    "properties": {
                                        "AuthenticationResult": {
                                            "description": "The result returned by the server in response to the request to respond to the authentication challenge.",
                                            "properties": {
                                                "AccessToken": {
                                                    "description": "The access token.",
                                                    "format": "password",
                                                    "pattern": "[A-Za-z0-9-_=.]+",
                                                    "type": "string"
                                                },
                                                "ExpiresIn": {
                                                    "description": "The expiration period of the authentication result in seconds.",
                                                    "type": "integer"
                                                },
                                                "IdToken": {
                                                    "description": "The ID token.",
                                                    "format": "password",
                                                    "pattern": "[A-Za-z0-9-_=.]+",
                                                    "type": "string"
                                                },
                                                "NewDeviceMetadata": {
                                                    "description": "The new device metadata from an authentication result.",
                                                    "properties": {
                                                        "DeviceGroupKey": {
                                                            "description": "The device group key.",
                                                            "type": "string"
                                                        },
                                                        "DeviceKey": {
                                                            "description": "The device key.",
                                                            "maxLength": 55,
                                                            "minLength": 1,
                                                            "pattern": "[\\w-]+_[0-9a-f-]+",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "RefreshToken": {
                                                    "description": "The refresh token.",
                                                    "format": "password",
                                                    "pattern": "[A-Za-z0-9-_=.]+",
                                                    "type": "string"
                                                },
                                                "TokenType": {
                                                    "description": "The token type.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "ChallengeName": {
                                            "description": "The challenge name. For more information, see .",
                                            "enum": [
                                                "SMS_MFA",
                                                "SOFTWARE_TOKEN_MFA",
                                                "SELECT_MFA_TYPE",
                                                "MFA_SETUP",
                                                "PASSWORD_VERIFIER",
                                                "CUSTOM_CHALLENGE",
                                                "DEVICE_SRP_AUTH",
                                                "DEVICE_PASSWORD_VERIFIER",
                                                "ADMIN_NO_SRP_AUTH",
                                                "NEW_PASSWORD_REQUIRED"
                                            ],
                                            "type": "string"
                                        },
                                        "ChallengeParameters": {
                                            "description": "The challenge parameters. For more information, see .",
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "Session": {
                                            "description": "The session which should be passed both ways in challenge-response calls to the service. If the or API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.",
                                            "maxLength": 2048,
                                            "minLength": 20,
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "CodeMismatchException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ExpiredCodeException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UnexpectedLambdaException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "UserLambdaValidationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "InvalidPasswordException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "InvalidLambdaResponseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "490": {
                        "description": "InvalidUserPoolConfigurationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "491": {
                        "description": "MFAMethodNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "492": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "493": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "494": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "495": {
                        "description": "InvalidSmsRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "496": {
                        "description": "InvalidSmsRoleTrustRelationshipException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "497": {
                        "description": "AliasExistsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "498": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "499": {
                        "description": "SoftwareTokenMFANotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "The request to respond to an authentication challenge.",
                                "properties": {
                                    "AnalyticsMetadata": {
                                        "description": "The Amazon Pinpoint analytics metadata for collecting metrics for <code>RespondToAuthChallenge</code> calls.",
                                        "properties": {
                                            "AnalyticsEndpointId": {
                                                "description": "The endpoint ID.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "ChallengeName": {
                                        "description": "<p>The challenge name. For more information, see .</p> <p> <code>ADMIN_NO_SRP_AUTH</code> is not a valid value.</p>",
                                        "enum": [
                                            "SMS_MFA",
                                            "SOFTWARE_TOKEN_MFA",
                                            "SELECT_MFA_TYPE",
                                            "MFA_SETUP",
                                            "PASSWORD_VERIFIER",
                                            "CUSTOM_CHALLENGE",
                                            "DEVICE_SRP_AUTH",
                                            "DEVICE_PASSWORD_VERIFIER",
                                            "ADMIN_NO_SRP_AUTH",
                                            "NEW_PASSWORD_REQUIRED"
                                        ],
                                        "type": "string"
                                    },
                                    "ChallengeResponses": {
                                        "description": "<p>The challenge responses. These are inputs corresponding to the value of <code>ChallengeName</code>, for example:</p> <ul> <li> <p> <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret). </p> </li> </ul>",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "ClientId": {
                                        "description": "The app client ID.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+]+",
                                        "type": "string"
                                    },
                                    "Session": {
                                        "description": "The session which should be passed both ways in challenge-response calls to the service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "type": "string"
                                    },
                                    "UserContextData": {
                                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                        "properties": {
                                            "EncodedData": {
                                                "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "ClientId",
                                    "ChallengeName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#SetRiskConfiguration": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Configures actions on detected risks. To delete the risk configuration for <code>UserPoolId</code> or <code>ClientId</code>, pass null values for all four configuration types.</p> <p>To enable Amazon Cognito advanced security features, update the user pool to include the <code>UserPoolAddOns</code> key<code>AdvancedSecurityMode</code>.</p> <p>See .</p>",
                "operationId": "SetRiskConfiguration",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "RiskConfiguration": {
                                            "description": "The risk configuration.",
                                            "properties": {
                                                "AccountTakeoverRiskConfiguration": {
                                                    "description": "The account takeover risk configuration object including the <code>NotifyConfiguration</code> object and <code>Actions</code> to take in the case of an account takeover.",
                                                    "properties": {
                                                        "Actions": {
                                                            "description": "Account takeover risk configuration actions",
                                                            "properties": {
                                                                "HighAction": {
                                                                    "description": "Action to take for a high risk.",
                                                                    "properties": {
                                                                        "EventAction": {
                                                                            "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                                            "enum": [
                                                                                "BLOCK",
                                                                                "MFA_IF_CONFIGURED",
                                                                                "MFA_REQUIRED",
                                                                                "NO_ACTION"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "Notify": {
                                                                            "description": "Flag specifying whether to send a notification.",
                                                                            "type": "boolean"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "Notify",
                                                                        "EventAction"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "LowAction": {
                                                                    "description": "Action to take for a low risk.",
                                                                    "properties": {
                                                                        "EventAction": {
                                                                            "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                                            "enum": [
                                                                                "BLOCK",
                                                                                "MFA_IF_CONFIGURED",
                                                                                "MFA_REQUIRED",
                                                                                "NO_ACTION"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "Notify": {
                                                                            "description": "Flag specifying whether to send a notification.",
                                                                            "type": "boolean"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "Notify",
                                                                        "EventAction"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "MediumAction": {
                                                                    "description": "Action to take for a medium risk.",
                                                                    "properties": {
                                                                        "EventAction": {
                                                                            "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                                            "enum": [
                                                                                "BLOCK",
                                                                                "MFA_IF_CONFIGURED",
                                                                                "MFA_REQUIRED",
                                                                                "NO_ACTION"
                                                                            ],
                                                                            "type": "string"
                                                                        },
                                                                        "Notify": {
                                                                            "description": "Flag specifying whether to send a notification.",
                                                                            "type": "boolean"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "Notify",
                                                                        "EventAction"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "NotifyConfiguration": {
                                                            "description": "The notify configuration used to construct email notifications.",
                                                            "properties": {
                                                                "BlockEmail": {
                                                                    "description": "Email template used when a detected risk event is blocked.",
                                                                    "properties": {
                                                                        "HtmlBody": {
                                                                            "description": "The HTML body.",
                                                                            "maxLength": 20000,
                                                                            "minLength": 6,
                                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                                            "type": "string"
                                                                        },
                                                                        "Subject": {
                                                                            "description": "The subject.",
                                                                            "maxLength": 140,
                                                                            "minLength": 1,
                                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                                            "type": "string"
                                                                        },
                                                                        "TextBody": {
                                                                            "description": "The text body.",
                                                                            "maxLength": 20000,
                                                                            "minLength": 6,
                                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "Subject"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "From": {
                                                                    "description": "The email address that is sending the email. It must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.",
                                                                    "type": "string"
                                                                },
                                                                "MfaEmail": {
                                                                    "description": "The MFA email template used when MFA is challenged as part of a detected risk.",
                                                                    "properties": {
                                                                        "HtmlBody": {
                                                                            "description": "The HTML body.",
                                                                            "maxLength": 20000,
                                                                            "minLength": 6,
                                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                                            "type": "string"
                                                                        },
                                                                        "Subject": {
                                                                            "description": "The subject.",
                                                                            "maxLength": 140,
                                                                            "minLength": 1,
                                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                                            "type": "string"
                                                                        },
                                                                        "TextBody": {
                                                                            "description": "The text body.",
                                                                            "maxLength": 20000,
                                                                            "minLength": 6,
                                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "Subject"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "NoActionEmail": {
                                                                    "description": "The email template used when a detected risk event is allowed.",
                                                                    "properties": {
                                                                        "HtmlBody": {
                                                                            "description": "The HTML body.",
                                                                            "maxLength": 20000,
                                                                            "minLength": 6,
                                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                                            "type": "string"
                                                                        },
                                                                        "Subject": {
                                                                            "description": "The subject.",
                                                                            "maxLength": 140,
                                                                            "minLength": 1,
                                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                                            "type": "string"
                                                                        },
                                                                        "TextBody": {
                                                                            "description": "The text body.",
                                                                            "maxLength": 20000,
                                                                            "minLength": 6,
                                                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "Subject"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "ReplyTo": {
                                                                    "description": "The destination to which the receiver of an email should reply to.",
                                                                    "type": "string"
                                                                },
                                                                "SourceArn": {
                                                                    "description": "The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. It permits Amazon Cognito to send for the email address specified in the <code>From</code> parameter.",
                                                                    "maxLength": 2048,
                                                                    "minLength": 20,
                                                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "SourceArn"
                                                            ],
                                                            "type": "object"
                                                        }
                                                    },
                                                    "required": [
                                                        "Actions"
                                                    ],
                                                    "type": "object"
                                                },
                                                "ClientId": {
                                                    "description": "The app client ID.",
                                                    "format": "password",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w+]+",
                                                    "type": "string"
                                                },
                                                "CompromisedCredentialsRiskConfiguration": {
                                                    "description": "The compromised credentials risk configuration object including the <code>EventFilter</code> and the <code>EventAction</code> ",
                                                    "properties": {
                                                        "Actions": {
                                                            "description": "The compromised credentials risk configuration actions.",
                                                            "properties": {
                                                                "EventAction": {
                                                                    "description": "The event action.",
                                                                    "enum": [
                                                                        "BLOCK",
                                                                        "NO_ACTION"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "EventAction"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "EventFilter": {
                                                            "description": "Perform the action for these events. The default is to perform all events if no event filter is specified.",
                                                            "items": {
                                                                "enum": [
                                                                    "SIGN_IN",
                                                                    "PASSWORD_CHANGE",
                                                                    "SIGN_UP"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "required": [
                                                        "Actions"
                                                    ],
                                                    "type": "object"
                                                },
                                                "LastModifiedDate": {
                                                    "description": "The last modified date.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "RiskExceptionConfiguration": {
                                                    "description": "The configuration to override the risk decision.",
                                                    "properties": {
                                                        "BlockedIPRangeList": {
                                                            "description": "Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation: a compact representation of an IP address and its associated routing prefix.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "maxItems": 20,
                                                            "type": "array"
                                                        },
                                                        "SkippedIPRangeList": {
                                                            "description": "Risk detection is not performed on the IP addresses in the range list. The IP range is in CIDR notation.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "maxItems": 20,
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "RiskConfiguration"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserPoolAddOnNotEnabledException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "CodeDeliveryFailureException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InvalidEmailRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "AccountTakeoverRiskConfiguration": {
                                        "description": "The account takeover risk configuration.",
                                        "properties": {
                                            "Actions": {
                                                "description": "Account takeover risk configuration actions",
                                                "properties": {
                                                    "HighAction": {
                                                        "description": "Action to take for a high risk.",
                                                        "properties": {
                                                            "EventAction": {
                                                                "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                                "enum": [
                                                                    "BLOCK",
                                                                    "MFA_IF_CONFIGURED",
                                                                    "MFA_REQUIRED",
                                                                    "NO_ACTION"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "Notify": {
                                                                "description": "Flag specifying whether to send a notification.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "required": [
                                                            "Notify",
                                                            "EventAction"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "LowAction": {
                                                        "description": "Action to take for a low risk.",
                                                        "properties": {
                                                            "EventAction": {
                                                                "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                                "enum": [
                                                                    "BLOCK",
                                                                    "MFA_IF_CONFIGURED",
                                                                    "MFA_REQUIRED",
                                                                    "NO_ACTION"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "Notify": {
                                                                "description": "Flag specifying whether to send a notification.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "required": [
                                                            "Notify",
                                                            "EventAction"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "MediumAction": {
                                                        "description": "Action to take for a medium risk.",
                                                        "properties": {
                                                            "EventAction": {
                                                                "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                                "enum": [
                                                                    "BLOCK",
                                                                    "MFA_IF_CONFIGURED",
                                                                    "MFA_REQUIRED",
                                                                    "NO_ACTION"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "Notify": {
                                                                "description": "Flag specifying whether to send a notification.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "required": [
                                                            "Notify",
                                                            "EventAction"
                                                        ],
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "NotifyConfiguration": {
                                                "description": "The notify configuration used to construct email notifications.",
                                                "properties": {
                                                    "BlockEmail": {
                                                        "description": "Email template used when a detected risk event is blocked.",
                                                        "properties": {
                                                            "HtmlBody": {
                                                                "description": "The HTML body.",
                                                                "maxLength": 20000,
                                                                "minLength": 6,
                                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                                "type": "string"
                                                            },
                                                            "Subject": {
                                                                "description": "The subject.",
                                                                "maxLength": 140,
                                                                "minLength": 1,
                                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                                "type": "string"
                                                            },
                                                            "TextBody": {
                                                                "description": "The text body.",
                                                                "maxLength": 20000,
                                                                "minLength": 6,
                                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "Subject"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "From": {
                                                        "description": "The email address that is sending the email. It must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.",
                                                        "type": "string"
                                                    },
                                                    "MfaEmail": {
                                                        "description": "The MFA email template used when MFA is challenged as part of a detected risk.",
                                                        "properties": {
                                                            "HtmlBody": {
                                                                "description": "The HTML body.",
                                                                "maxLength": 20000,
                                                                "minLength": 6,
                                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                                "type": "string"
                                                            },
                                                            "Subject": {
                                                                "description": "The subject.",
                                                                "maxLength": 140,
                                                                "minLength": 1,
                                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                                "type": "string"
                                                            },
                                                            "TextBody": {
                                                                "description": "The text body.",
                                                                "maxLength": 20000,
                                                                "minLength": 6,
                                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "Subject"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "NoActionEmail": {
                                                        "description": "The email template used when a detected risk event is allowed.",
                                                        "properties": {
                                                            "HtmlBody": {
                                                                "description": "The HTML body.",
                                                                "maxLength": 20000,
                                                                "minLength": 6,
                                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                                "type": "string"
                                                            },
                                                            "Subject": {
                                                                "description": "The subject.",
                                                                "maxLength": 140,
                                                                "minLength": 1,
                                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                                "type": "string"
                                                            },
                                                            "TextBody": {
                                                                "description": "The text body.",
                                                                "maxLength": 20000,
                                                                "minLength": 6,
                                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "Subject"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "ReplyTo": {
                                                        "description": "The destination to which the receiver of an email should reply to.",
                                                        "type": "string"
                                                    },
                                                    "SourceArn": {
                                                        "description": "The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. It permits Amazon Cognito to send for the email address specified in the <code>From</code> parameter.",
                                                        "maxLength": 2048,
                                                        "minLength": 20,
                                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "SourceArn"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "Actions"
                                        ],
                                        "type": "object"
                                    },
                                    "ClientId": {
                                        "description": "<p>The app client ID. If <code>ClientId</code> is null, then the risk configuration is mapped to <code>userPoolId</code>. When the client ID is null, the same risk configuration is applied to all the clients in the userPool.</p> <p>Otherwise, <code>ClientId</code> is mapped to the client. When the client ID is not null, the user pool configuration is overridden and the risk configuration for the client is used instead.</p>",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+]+",
                                        "type": "string"
                                    },
                                    "CompromisedCredentialsRiskConfiguration": {
                                        "description": "The compromised credentials risk configuration.",
                                        "properties": {
                                            "Actions": {
                                                "description": "The compromised credentials risk configuration actions.",
                                                "properties": {
                                                    "EventAction": {
                                                        "description": "The event action.",
                                                        "enum": [
                                                            "BLOCK",
                                                            "NO_ACTION"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "EventAction"
                                                ],
                                                "type": "object"
                                            },
                                            "EventFilter": {
                                                "description": "Perform the action for these events. The default is to perform all events if no event filter is specified.",
                                                "items": {
                                                    "enum": [
                                                        "SIGN_IN",
                                                        "PASSWORD_CHANGE",
                                                        "SIGN_UP"
                                                    ],
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "required": [
                                            "Actions"
                                        ],
                                        "type": "object"
                                    },
                                    "RiskExceptionConfiguration": {
                                        "description": "The configuration to override the risk decision.",
                                        "properties": {
                                            "BlockedIPRangeList": {
                                                "description": "Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation: a compact representation of an IP address and its associated routing prefix.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "maxItems": 20,
                                                "type": "array"
                                            },
                                            "SkippedIPRangeList": {
                                                "description": "Risk detection is not performed on the IP addresses in the range list. The IP range is in CIDR notation.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "maxItems": 20,
                                                "type": "array"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID. ",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#SetUICustomization": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Sets the UI customization information for a user pool's built-in app UI.</p> <p>You can specify app UI customization settings for a single client (with a specific <code>clientId</code>) or for all clients (by setting the <code>clientId</code> to <code>ALL</code>). If you specify <code>ALL</code>, the default configuration will be used for every client that has no UI customization set previously. If you specify UI customization settings for a particular client, it will no longer fall back to the <code>ALL</code> configuration. </p> <note> <p>To use this API, your user pool must have a domain associated with it. Otherwise, there is no place to host the app's pages, and the service will throw an error.</p> </note>",
                "operationId": "SetUICustomization",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "UICustomization": {
                                            "description": "The UI customization information.",
                                            "properties": {
                                                "CSS": {
                                                    "description": "The CSS values in the UI customization.",
                                                    "type": "string"
                                                },
                                                "CSSVersion": {
                                                    "description": "The CSS version number.",
                                                    "type": "string"
                                                },
                                                "ClientId": {
                                                    "description": "The client ID for the client app.",
                                                    "format": "password",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w+]+",
                                                    "type": "string"
                                                },
                                                "CreationDate": {
                                                    "description": "The creation date for the UI customization.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "ImageUrl": {
                                                    "description": "The logo image for the UI customization.",
                                                    "type": "string"
                                                },
                                                "LastModifiedDate": {
                                                    "description": "The last-modified date for the UI customization.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID for the user pool.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "UICustomization"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "CSS": {
                                        "description": "The CSS values in the UI customization.",
                                        "type": "string"
                                    },
                                    "ClientId": {
                                        "description": "The client ID for the client app.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+]+",
                                        "type": "string"
                                    },
                                    "ImageFile": {
                                        "description": "The uploaded logo image for the UI customization.",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#SetUserMFAPreference": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Set the user's multi-factor authentication (MFA) method preference.",
                "operationId": "SetUserMFAPreference",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "AccessToken": {
                                        "description": "The access token.",
                                        "format": "password",
                                        "pattern": "[A-Za-z0-9-_=.]+",
                                        "type": "string"
                                    },
                                    "SMSMfaSettings": {
                                        "description": "The SMS text message multi-factor authentication (MFA) settings.",
                                        "properties": {
                                            "Enabled": {
                                                "description": "Specifies whether SMS text message MFA is enabled.",
                                                "type": "boolean"
                                            },
                                            "PreferredMfa": {
                                                "description": "The preferred MFA method.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "SoftwareTokenMfaSettings": {
                                        "description": "The time-based one-time password software token MFA settings.",
                                        "properties": {
                                            "Enabled": {
                                                "description": "Specifies whether software token MFA is enabled.",
                                                "type": "boolean"
                                            },
                                            "PreferredMfa": {
                                                "description": "The preferred MFA method.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "AccessToken"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#SetUserPoolMfaConfig": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Set the user pool MFA configuration.",
                "operationId": "SetUserPoolMfaConfig",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "MfaConfiguration": {
                                            "description": "The MFA configuration.",
                                            "enum": [
                                                "OFF",
                                                "ON",
                                                "OPTIONAL"
                                            ],
                                            "type": "string"
                                        },
                                        "SmsMfaConfiguration": {
                                            "description": "The SMS text message MFA configuration.",
                                            "properties": {
                                                "SmsAuthenticationMessage": {
                                                    "description": "The SMS authentication message.",
                                                    "maxLength": 140,
                                                    "minLength": 6,
                                                    "pattern": ".*\\{####\\}.*",
                                                    "type": "string"
                                                },
                                                "SmsConfiguration": {
                                                    "description": "The SMS configuration.",
                                                    "properties": {
                                                        "ExternalId": {
                                                            "description": "The external ID.",
                                                            "type": "string"
                                                        },
                                                        "SnsCallerArn": {
                                                            "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "SnsCallerArn"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "SoftwareTokenMfaConfiguration": {
                                            "description": "The software token MFA configuration.",
                                            "properties": {
                                                "Enabled": {
                                                    "description": "Specifies whether software token MFA is enabled.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InvalidSmsRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InvalidSmsRoleTrustRelationshipException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "MfaConfiguration": {
                                        "description": "The MFA configuration.",
                                        "enum": [
                                            "OFF",
                                            "ON",
                                            "OPTIONAL"
                                        ],
                                        "type": "string"
                                    },
                                    "SmsMfaConfiguration": {
                                        "description": "The SMS text message MFA configuration.",
                                        "properties": {
                                            "SmsAuthenticationMessage": {
                                                "description": "The SMS authentication message.",
                                                "maxLength": 140,
                                                "minLength": 6,
                                                "pattern": ".*\\{####\\}.*",
                                                "type": "string"
                                            },
                                            "SmsConfiguration": {
                                                "description": "The SMS configuration.",
                                                "properties": {
                                                    "ExternalId": {
                                                        "description": "The external ID.",
                                                        "type": "string"
                                                    },
                                                    "SnsCallerArn": {
                                                        "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.",
                                                        "maxLength": 2048,
                                                        "minLength": 20,
                                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "SnsCallerArn"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "SoftwareTokenMfaConfiguration": {
                                        "description": "The software token MFA configuration.",
                                        "properties": {
                                            "Enabled": {
                                                "description": "Specifies whether software token MFA is enabled.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#SetUserSettings": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Sets the user settings like multi-factor authentication (MFA). If MFA is to be removed for a particular attribute pass the attribute with code delivery as null. If null list is passed, all MFA options are removed.",
                "operationId": "SetUserSettings",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The response from the server for a set user settings request.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to set user settings.",
                                "properties": {
                                    "AccessToken": {
                                        "description": "The access token for the set user settings request.",
                                        "format": "password",
                                        "pattern": "[A-Za-z0-9-_=.]+",
                                        "type": "string"
                                    },
                                    "MFAOptions": {
                                        "description": "Specifies the options for MFA (e.g., email or phone number).",
                                        "items": {
                                            "description": "Specifies the different settings for multi-factor authentication (MFA).",
                                            "properties": {
                                                "AttributeName": {
                                                    "description": "The attribute name of the MFA option type.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "DeliveryMedium": {
                                                    "description": "The delivery medium (email message or SMS message) to send the MFA code.",
                                                    "enum": [
                                                        "SMS",
                                                        "EMAIL"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "AccessToken",
                                    "MFAOptions"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#SignUp": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Registers the user in the specified user pool and creates a user name, password, and user attributes.",
                "operationId": "SignUp",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The response from the server for a registration request.",
                                    "properties": {
                                        "CodeDeliveryDetails": {
                                            "description": "The code delivery details returned by the server response to the user registration request.",
                                            "properties": {
                                                "AttributeName": {
                                                    "description": "The attribute name.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "DeliveryMedium": {
                                                    "description": "The delivery medium (email message or phone number).",
                                                    "enum": [
                                                        "SMS",
                                                        "EMAIL"
                                                    ],
                                                    "type": "string"
                                                },
                                                "Destination": {
                                                    "description": "The destination for the code delivery details.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "UserConfirmed": {
                                            "description": "A response from the server indicating that a user registration has been confirmed.",
                                            "type": "boolean"
                                        },
                                        "UserSub": {
                                            "description": "The UUID of the authenticated user. This is not the same as <code>username</code>.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "UserConfirmed",
                                        "UserSub"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "UnexpectedLambdaException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "UserLambdaValidationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InvalidPasswordException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InvalidLambdaResponseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "UsernameExistsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "490": {
                        "description": "InvalidSmsRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "491": {
                        "description": "InvalidSmsRoleTrustRelationshipException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "492": {
                        "description": "InvalidEmailRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "493": {
                        "description": "CodeDeliveryFailureException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to register a user.",
                                "properties": {
                                    "AnalyticsMetadata": {
                                        "description": "The Amazon Pinpoint analytics metadata for collecting metrics for <code>SignUp</code> calls.",
                                        "properties": {
                                            "AnalyticsEndpointId": {
                                                "description": "The endpoint ID.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "ClientId": {
                                        "description": "The ID of the client associated with the user pool.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+]+",
                                        "type": "string"
                                    },
                                    "Password": {
                                        "description": "The password of the user you wish to register.",
                                        "format": "password",
                                        "maxLength": 256,
                                        "minLength": 6,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    },
                                    "SecretHash": {
                                        "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+=/]+",
                                        "type": "string"
                                    },
                                    "UserAttributes": {
                                        "description": "<p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>",
                                        "items": {
                                            "description": "Specifies whether the attribute is standard or custom.",
                                            "properties": {
                                                "Name": {
                                                    "description": "The name of the attribute.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "Value": {
                                                    "description": "The value of the attribute.",
                                                    "format": "password",
                                                    "maxLength": 2048,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "Name"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "UserContextData": {
                                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                        "properties": {
                                            "EncodedData": {
                                                "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "Username": {
                                        "description": "The user name of the user you wish to register.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "ValidationData": {
                                        "description": "The validation data in the request to register a user.",
                                        "items": {
                                            "description": "Specifies whether the attribute is standard or custom.",
                                            "properties": {
                                                "Name": {
                                                    "description": "The name of the attribute.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "Value": {
                                                    "description": "The value of the attribute.",
                                                    "format": "password",
                                                    "maxLength": 2048,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "Name"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "ClientId",
                                    "Username",
                                    "Password"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#StartUserImportJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Starts the user import.",
                "operationId": "StartUserImportJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server to the request to start the user import job.",
                                    "properties": {
                                        "UserImportJob": {
                                            "description": "The job object that represents the user import job.",
                                            "properties": {
                                                "CloudWatchLogsRoleArn": {
                                                    "description": "The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito Developer Guide.",
                                                    "maxLength": 2048,
                                                    "minLength": 20,
                                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                    "type": "string"
                                                },
                                                "CompletionDate": {
                                                    "description": "The date when the user import job was completed.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "CompletionMessage": {
                                                    "description": "The message returned when the user import job is completed.",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w]+",
                                                    "type": "string"
                                                },
                                                "CreationDate": {
                                                    "description": "The date the user import job was created.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "FailedUsers": {
                                                    "description": "The number of users that could not be imported.",
                                                    "type": "integer"
                                                },
                                                "ImportedUsers": {
                                                    "description": "The number of users that were successfully imported.",
                                                    "type": "integer"
                                                },
                                                "JobId": {
                                                    "description": "The job ID for the user import job.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "import-[0-9a-zA-Z-]+",
                                                    "type": "string"
                                                },
                                                "JobName": {
                                                    "description": "The job name for the user import job.",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w\\s+=,.@-]+",
                                                    "type": "string"
                                                },
                                                "PreSignedUrl": {
                                                    "description": "The pre-signed URL to be used to upload the <code>.csv</code> file.",
                                                    "maxLength": 2048,
                                                    "minLength": 0,
                                                    "type": "string"
                                                },
                                                "SkippedUsers": {
                                                    "description": "The number of users that were skipped.",
                                                    "type": "integer"
                                                },
                                                "StartDate": {
                                                    "description": "The date when the user import job was started.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "Status": {
                                                    "description": "<p>The status of the user import job. One of the following:</p> <ul> <li> <p> <code>Created</code> - The job was created but not started.</p> </li> <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li> <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li> <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li> <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li> <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li> <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li> <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.</p> </li> </ul>",
                                                    "enum": [
                                                        "Created",
                                                        "Pending",
                                                        "InProgress",
                                                        "Stopping",
                                                        "Expired",
                                                        "Stopped",
                                                        "Failed",
                                                        "Succeeded"
                                                    ],
                                                    "type": "string"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID for the user pool that the users are being imported into.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "PreconditionNotMetException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to start the user import job.",
                                "properties": {
                                    "JobId": {
                                        "description": "The job ID for the user import job.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "import-[0-9a-zA-Z-]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool that the users are being imported into.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "JobId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#StopUserImportJob": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Stops the user import job.",
                "operationId": "StopUserImportJob",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server to the request to stop the user import job.",
                                    "properties": {
                                        "UserImportJob": {
                                            "description": "The job object that represents the user import job.",
                                            "properties": {
                                                "CloudWatchLogsRoleArn": {
                                                    "description": "The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito Developer Guide.",
                                                    "maxLength": 2048,
                                                    "minLength": 20,
                                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                    "type": "string"
                                                },
                                                "CompletionDate": {
                                                    "description": "The date when the user import job was completed.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "CompletionMessage": {
                                                    "description": "The message returned when the user import job is completed.",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w]+",
                                                    "type": "string"
                                                },
                                                "CreationDate": {
                                                    "description": "The date the user import job was created.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "FailedUsers": {
                                                    "description": "The number of users that could not be imported.",
                                                    "type": "integer"
                                                },
                                                "ImportedUsers": {
                                                    "description": "The number of users that were successfully imported.",
                                                    "type": "integer"
                                                },
                                                "JobId": {
                                                    "description": "The job ID for the user import job.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "import-[0-9a-zA-Z-]+",
                                                    "type": "string"
                                                },
                                                "JobName": {
                                                    "description": "The job name for the user import job.",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w\\s+=,.@-]+",
                                                    "type": "string"
                                                },
                                                "PreSignedUrl": {
                                                    "description": "The pre-signed URL to be used to upload the <code>.csv</code> file.",
                                                    "maxLength": 2048,
                                                    "minLength": 0,
                                                    "type": "string"
                                                },
                                                "SkippedUsers": {
                                                    "description": "The number of users that were skipped.",
                                                    "type": "integer"
                                                },
                                                "StartDate": {
                                                    "description": "The date when the user import job was started.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "Status": {
                                                    "description": "<p>The status of the user import job. One of the following:</p> <ul> <li> <p> <code>Created</code> - The job was created but not started.</p> </li> <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li> <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li> <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li> <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li> <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li> <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li> <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.</p> </li> </ul>",
                                                    "enum": [
                                                        "Created",
                                                        "Pending",
                                                        "InProgress",
                                                        "Stopping",
                                                        "Expired",
                                                        "Stopped",
                                                        "Failed",
                                                        "Succeeded"
                                                    ],
                                                    "type": "string"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID for the user pool that the users are being imported into.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "PreconditionNotMetException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to stop the user import job.",
                                "properties": {
                                    "JobId": {
                                        "description": "The job ID for the user import job.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "import-[0-9a-zA-Z-]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool that the users are being imported into.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "JobId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#UpdateAuthEventFeedback": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Provides the feedback for an authentication event whether it was from a valid user or not. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.",
                "operationId": "UpdateAuthEventFeedback",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UserPoolAddOnNotEnabledException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "EventId": {
                                        "description": "The event ID.",
                                        "maxLength": 50,
                                        "minLength": 1,
                                        "pattern": "[\\w+-]+",
                                        "type": "string"
                                    },
                                    "FeedbackToken": {
                                        "description": "The feedback token.",
                                        "format": "password",
                                        "pattern": "[A-Za-z0-9-_=.]+",
                                        "type": "string"
                                    },
                                    "FeedbackValue": {
                                        "description": "The authentication event feedback value.",
                                        "enum": [
                                            "Valid",
                                            "Invalid"
                                        ],
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "Username": {
                                        "description": "The user pool username.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Username",
                                    "EventId",
                                    "FeedbackToken",
                                    "FeedbackValue"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#UpdateDeviceStatus": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Updates the device status.",
                "operationId": "UpdateDeviceStatus",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The response to the request to update the device status.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InvalidUserPoolConfigurationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to update the device status.",
                                "properties": {
                                    "AccessToken": {
                                        "description": "The access token.",
                                        "format": "password",
                                        "pattern": "[A-Za-z0-9-_=.]+",
                                        "type": "string"
                                    },
                                    "DeviceKey": {
                                        "description": "The device key.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-f-]+",
                                        "type": "string"
                                    },
                                    "DeviceRememberedStatus": {
                                        "description": "The status of whether a device is remembered.",
                                        "enum": [
                                            "remembered",
                                            "not_remembered"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "AccessToken",
                                    "DeviceKey"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#UpdateGroup": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Updates the specified group with the specified attributes.</p> <p>Requires developer credentials.</p>",
                "operationId": "UpdateGroup",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Group": {
                                            "description": "The group object for the group.",
                                            "properties": {
                                                "CreationDate": {
                                                    "description": "The date the group was created.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "Description": {
                                                    "description": "A string containing the description of the group.",
                                                    "maxLength": 2048,
                                                    "type": "string"
                                                },
                                                "GroupName": {
                                                    "description": "The name of the group.",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "LastModifiedDate": {
                                                    "description": "The date the group was last modified.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "Precedence": {
                                                    "description": "<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user's tokens. Groups with higher <code>Precedence</code> values take precedence over groups with lower <code>Precedence</code> values or with null <code>Precedence</code> values.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>",
                                                    "minimum": 0,
                                                    "type": "integer"
                                                },
                                                "RoleArn": {
                                                    "description": "The role ARN for the group.",
                                                    "maxLength": 2048,
                                                    "minLength": 20,
                                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                    "type": "string"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID for the user pool.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Description": {
                                        "description": "A string containing the new description of the group.",
                                        "maxLength": 2048,
                                        "type": "string"
                                    },
                                    "GroupName": {
                                        "description": "The name of the group.",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "Precedence": {
                                        "description": "The new precedence value for the group. For more information about this parameter, see .",
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "RoleArn": {
                                        "description": "The new role ARN for the group. This is used for setting the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the token.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "GroupName",
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#UpdateIdentityProvider": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Updates identity provider information for a user pool.",
                "operationId": "UpdateIdentityProvider",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "IdentityProvider": {
                                            "description": "The identity provider object.",
                                            "properties": {
                                                "AttributeMapping": {
                                                    "description": "A mapping of identity provider attributes to standard and custom user pool attributes.",
                                                    "items": {
                                                        "properties": {
                                                            "key": {
                                                                "maxLength": 32,
                                                                "minLength": 1,
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "CreationDate": {
                                                    "description": "The date the identity provider was created.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "IdpIdentifiers": {
                                                    "description": "A list of identity provider identifiers.",
                                                    "items": {
                                                        "maxLength": 40,
                                                        "minLength": 1,
                                                        "pattern": "[\\w\\s+=.@-]+",
                                                        "type": "string"
                                                    },
                                                    "maxItems": 50,
                                                    "minItems": 0,
                                                    "type": "array"
                                                },
                                                "LastModifiedDate": {
                                                    "description": "The date the identity provider was last modified.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "ProviderDetails": {
                                                    "description": "The identity provider details, such as <code>MetadataURL</code> and <code>MetadataFile</code>.",
                                                    "items": {
                                                        "properties": {
                                                            "key": {
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                },
                                                "ProviderName": {
                                                    "description": "The identity provider name.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "ProviderType": {
                                                    "description": "The identity provider type.",
                                                    "enum": [
                                                        "SAML",
                                                        "Facebook",
                                                        "Google",
                                                        "LoginWithAmazon",
                                                        "OIDC"
                                                    ],
                                                    "type": "string"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "IdentityProvider"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "UnsupportedIdentityProviderException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "AttributeMapping": {
                                        "description": "The identity provider attribute mapping to be changed.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "IdpIdentifiers": {
                                        "description": "A list of identity provider identifiers.",
                                        "items": {
                                            "maxLength": 40,
                                            "minLength": 1,
                                            "pattern": "[\\w\\s+=.@-]+",
                                            "type": "string"
                                        },
                                        "maxItems": 50,
                                        "minItems": 0,
                                        "type": "array"
                                    },
                                    "ProviderDetails": {
                                        "description": "The identity provider details to be updated, such as <code>MetadataURL</code> and <code>MetadataFile</code>.",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "ProviderName": {
                                        "description": "The identity provider name.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "ProviderName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#UpdateResourceServer": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Updates the name and scopes of resource server. All other fields are read-only.",
                "operationId": "UpdateResourceServer",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "ResourceServer": {
                                            "description": "The resource server.",
                                            "properties": {
                                                "Identifier": {
                                                    "description": "The identifier for the resource server.",
                                                    "maxLength": 256,
                                                    "minLength": 1,
                                                    "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                                    "type": "string"
                                                },
                                                "Name": {
                                                    "description": "The name of the resource server.",
                                                    "maxLength": 256,
                                                    "minLength": 1,
                                                    "pattern": "[\\w\\s+=,.@-]+",
                                                    "type": "string"
                                                },
                                                "Scopes": {
                                                    "description": "A list of scopes that are defined for the resource server.",
                                                    "items": {
                                                        "description": "A resource server scope.",
                                                        "properties": {
                                                            "ScopeDescription": {
                                                                "description": "A description of the scope.",
                                                                "maxLength": 256,
                                                                "minLength": 1,
                                                                "type": "string"
                                                            },
                                                            "ScopeName": {
                                                                "description": "The name of the scope.",
                                                                "maxLength": 256,
                                                                "minLength": 1,
                                                                "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "ScopeName",
                                                            "ScopeDescription"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "maxItems": 25,
                                                    "type": "array"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID for the user pool that hosts the resource server.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "ResourceServer"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Identifier": {
                                        "description": "The identifier for the resource server.",
                                        "maxLength": 256,
                                        "minLength": 1,
                                        "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                        "type": "string"
                                    },
                                    "Name": {
                                        "description": "The name of the resource server.",
                                        "maxLength": 256,
                                        "minLength": 1,
                                        "pattern": "[\\w\\s+=,.@-]+",
                                        "type": "string"
                                    },
                                    "Scopes": {
                                        "description": "The scope values to be set for the resource server.",
                                        "items": {
                                            "description": "A resource server scope.",
                                            "properties": {
                                                "ScopeDescription": {
                                                    "description": "A description of the scope.",
                                                    "maxLength": 256,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "ScopeName": {
                                                    "description": "The name of the scope.",
                                                    "maxLength": 256,
                                                    "minLength": 1,
                                                    "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "ScopeName",
                                                "ScopeDescription"
                                            ],
                                            "type": "object"
                                        },
                                        "maxItems": 25,
                                        "type": "array"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "Identifier",
                                    "Name"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#UpdateUserAttributes": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Allows a user to update a specific attribute (one at a time).",
                "operationId": "UpdateUserAttributes",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server for the request to update user attributes.",
                                    "properties": {
                                        "CodeDeliveryDetailsList": {
                                            "description": "The code delivery details list from the server for the request to update user attributes.",
                                            "items": {
                                                "description": "The code delivery details being returned from the server.",
                                                "properties": {
                                                    "AttributeName": {
                                                        "description": "The attribute name.",
                                                        "maxLength": 32,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    },
                                                    "DeliveryMedium": {
                                                        "description": "The delivery medium (email message or phone number).",
                                                        "enum": [
                                                            "SMS",
                                                            "EMAIL"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "Destination": {
                                                        "description": "The destination for the code delivery details.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "CodeMismatchException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ExpiredCodeException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UnexpectedLambdaException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "UserLambdaValidationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "InvalidLambdaResponseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "AliasExistsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "490": {
                        "description": "InvalidSmsRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "491": {
                        "description": "InvalidSmsRoleTrustRelationshipException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "492": {
                        "description": "InvalidEmailRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "493": {
                        "description": "CodeDeliveryFailureException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "494": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "495": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "496": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "497": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to update user attributes.",
                                "properties": {
                                    "AccessToken": {
                                        "description": "The access token for the request to update user attributes.",
                                        "format": "password",
                                        "pattern": "[A-Za-z0-9-_=.]+",
                                        "type": "string"
                                    },
                                    "UserAttributes": {
                                        "description": "<p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>",
                                        "items": {
                                            "description": "Specifies whether the attribute is standard or custom.",
                                            "properties": {
                                                "Name": {
                                                    "description": "The name of the attribute.",
                                                    "maxLength": 32,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "Value": {
                                                    "description": "The value of the attribute.",
                                                    "format": "password",
                                                    "maxLength": 2048,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "Name"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "UserAttributes",
                                    "AccessToken"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#UpdateUserPool": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Updates the specified user pool with the specified attributes. If you don't provide a value for an attribute, it will be set to the default value. You can get a list of the current user pool settings with .",
                "operationId": "UpdateUserPool",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server when you make a request to update the user pool.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ConcurrentModificationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "UserImportInProgressException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "InvalidSmsRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "InvalidSmsRoleTrustRelationshipException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "UserPoolTaggingException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "490": {
                        "description": "InvalidEmailRoleAccessPolicyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to update the user pool.",
                                "properties": {
                                    "AdminCreateUserConfig": {
                                        "description": "The configuration for <code>AdminCreateUser</code> requests.",
                                        "properties": {
                                            "AllowAdminCreateUserOnly": {
                                                "description": "Set to <code>True</code> if only the administrator is allowed to create user profiles. Set to <code>False</code> if users can sign themselves up via an app.",
                                                "type": "boolean"
                                            },
                                            "InviteMessageTemplate": {
                                                "description": "<p>The message template to be used for the welcome message to new users.</p> <p>See also <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization\">Customizing User Invitation Messages</a>.</p>",
                                                "properties": {
                                                    "EmailMessage": {
                                                        "description": "The message template for email messages.",
                                                        "maxLength": 20000,
                                                        "minLength": 6,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                                        "type": "string"
                                                    },
                                                    "EmailSubject": {
                                                        "description": "The subject line for email messages.",
                                                        "maxLength": 140,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                        "type": "string"
                                                    },
                                                    "SMSMessage": {
                                                        "description": "The message template for SMS messages.",
                                                        "maxLength": 140,
                                                        "minLength": 6,
                                                        "pattern": ".*\\{####\\}.*",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "UnusedAccountValidityDays": {
                                                "description": "The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the <code>MessageAction</code> parameter. The default value for this parameter is 7.",
                                                "maximum": 365,
                                                "minimum": 0,
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "AutoVerifiedAttributes": {
                                        "description": "The attributes that are automatically verified when the Amazon Cognito service makes a request to update user pools.",
                                        "items": {
                                            "enum": [
                                                "phone_number",
                                                "email"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "DeviceConfiguration": {
                                        "description": "Device configuration.",
                                        "properties": {
                                            "ChallengeRequiredOnNewDevice": {
                                                "description": "Indicates whether a challenge is required on a new device. Only applicable to a new device.",
                                                "type": "boolean"
                                            },
                                            "DeviceOnlyRememberedOnUserPrompt": {
                                                "description": "If true, a device is only remembered on user prompt.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "EmailConfiguration": {
                                        "description": "Email configuration.",
                                        "properties": {
                                            "ReplyToEmailAddress": {
                                                "description": "The destination to which the receiver of the email should reply to.",
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                "type": "string"
                                            },
                                            "SourceArn": {
                                                "description": "The Amazon Resource Name (ARN) of the email source.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "EmailVerificationMessage": {
                                        "description": "The contents of the email verification message.",
                                        "maxLength": 20000,
                                        "minLength": 6,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                        "type": "string"
                                    },
                                    "EmailVerificationSubject": {
                                        "description": "The subject of the email verification message.",
                                        "maxLength": 140,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                        "type": "string"
                                    },
                                    "LambdaConfig": {
                                        "description": "The AWS Lambda configuration information from the request to update the user pool.",
                                        "properties": {
                                            "CreateAuthChallenge": {
                                                "description": "Creates an authentication challenge.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "CustomMessage": {
                                                "description": "A custom Message AWS Lambda trigger.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "DefineAuthChallenge": {
                                                "description": "Defines the authentication challenge.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "PostAuthentication": {
                                                "description": "A post-authentication AWS Lambda trigger.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "PostConfirmation": {
                                                "description": "A post-confirmation AWS Lambda trigger.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "PreAuthentication": {
                                                "description": "A pre-authentication AWS Lambda trigger.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "PreSignUp": {
                                                "description": "A pre-registration AWS Lambda trigger.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "PreTokenGeneration": {
                                                "description": "A Lambda trigger that is invoked before token generation.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "UserMigration": {
                                                "description": "The user migration Lambda config type.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "VerifyAuthChallengeResponse": {
                                                "description": "Verifies the authentication challenge response.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "MfaConfiguration": {
                                        "description": "<p>Can be one of the following values:</p> <ul> <li> <p> <code>OFF</code> - MFA tokens are not required and cannot be specified during user registration.</p> </li> <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.</p> </li> <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li> </ul>",
                                        "enum": [
                                            "OFF",
                                            "ON",
                                            "OPTIONAL"
                                        ],
                                        "type": "string"
                                    },
                                    "Policies": {
                                        "description": "A container with the policies you wish to update in a user pool.",
                                        "properties": {
                                            "PasswordPolicy": {
                                                "description": "The password policy.",
                                                "properties": {
                                                    "MinimumLength": {
                                                        "description": "The minimum length of the password policy that you have set. Cannot be less than 6.",
                                                        "maximum": 99,
                                                        "minimum": 6,
                                                        "type": "integer"
                                                    },
                                                    "RequireLowercase": {
                                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.",
                                                        "type": "boolean"
                                                    },
                                                    "RequireNumbers": {
                                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one number in their password.",
                                                        "type": "boolean"
                                                    },
                                                    "RequireSymbols": {
                                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.",
                                                        "type": "boolean"
                                                    },
                                                    "RequireUppercase": {
                                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "SmsAuthenticationMessage": {
                                        "description": "The contents of the SMS authentication message.",
                                        "maxLength": 140,
                                        "minLength": 6,
                                        "pattern": ".*\\{####\\}.*",
                                        "type": "string"
                                    },
                                    "SmsConfiguration": {
                                        "description": "SMS configuration.",
                                        "properties": {
                                            "ExternalId": {
                                                "description": "The external ID.",
                                                "type": "string"
                                            },
                                            "SnsCallerArn": {
                                                "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "SnsCallerArn"
                                        ],
                                        "type": "object"
                                    },
                                    "SmsVerificationMessage": {
                                        "description": "A container with information about the SMS verification message.",
                                        "maxLength": 140,
                                        "minLength": 6,
                                        "pattern": ".*\\{####\\}.*",
                                        "type": "string"
                                    },
                                    "UserPoolAddOns": {
                                        "description": "Used to enable advanced security risk detection. Set the key <code>AdvancedSecurityMode</code> to the value \"AUDIT\".",
                                        "properties": {
                                            "AdvancedSecurityMode": {
                                                "description": "The advanced security mode.",
                                                "enum": [
                                                    "OFF",
                                                    "AUDIT",
                                                    "ENFORCED"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "AdvancedSecurityMode"
                                        ],
                                        "type": "object"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool you want to update.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "UserPoolTags": {
                                        "description": "The cost allocation tags for the user pool. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</a> ",
                                        "items": {
                                            "properties": {
                                                "key": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "VerificationMessageTemplate": {
                                        "description": "The template for verification messages.",
                                        "properties": {
                                            "DefaultEmailOption": {
                                                "description": "The default email option.",
                                                "enum": [
                                                    "CONFIRM_WITH_LINK",
                                                    "CONFIRM_WITH_CODE"
                                                ],
                                                "type": "string"
                                            },
                                            "EmailMessage": {
                                                "description": "The email message template.",
                                                "maxLength": 20000,
                                                "minLength": 6,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                                "type": "string"
                                            },
                                            "EmailMessageByLink": {
                                                "description": "The email message template for sending a confirmation link to the user.",
                                                "maxLength": 20000,
                                                "minLength": 6,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{##[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*##\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                                "type": "string"
                                            },
                                            "EmailSubject": {
                                                "description": "The subject line for the email message template.",
                                                "maxLength": 140,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                "type": "string"
                                            },
                                            "EmailSubjectByLink": {
                                                "description": "The subject line for the email message template for sending a confirmation link to the user.",
                                                "maxLength": 140,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                "type": "string"
                                            },
                                            "SmsMessage": {
                                                "description": "The SMS message template.",
                                                "maxLength": 140,
                                                "minLength": 6,
                                                "pattern": ".*\\{####\\}.*",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "UserPoolId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#UpdateUserPoolClient": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Updates the specified user pool app client with the specified attributes. If you don't provide a value for an attribute, it will be set to the default value. You can get a list of the current user pool app client settings with .",
                "operationId": "UpdateUserPoolClient",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Represents the response from the server to the request to update the user pool client.",
                                    "properties": {
                                        "UserPoolClient": {
                                            "description": "The user pool client value from the response from the server when an update user pool client request is made.",
                                            "properties": {
                                                "AllowedOAuthFlows": {
                                                    "description": "<p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>token</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>",
                                                    "items": {
                                                        "enum": [
                                                            "code",
                                                            "implicit",
                                                            "client_credentials"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "maxItems": 3,
                                                    "minItems": 0,
                                                    "type": "array"
                                                },
                                                "AllowedOAuthFlowsUserPoolClient": {
                                                    "description": "Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.",
                                                    "type": "boolean"
                                                },
                                                "AllowedOAuthScopes": {
                                                    "description": "A list of allowed <code>OAuth</code> scopes. Currently supported values are <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and <code>\"Cognito\"</code>.",
                                                    "items": {
                                                        "maxLength": 256,
                                                        "minLength": 1,
                                                        "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                                        "type": "string"
                                                    },
                                                    "maxItems": 25,
                                                    "type": "array"
                                                },
                                                "AnalyticsConfiguration": {
                                                    "description": "The Amazon Pinpoint analytics configuration for the user pool client.",
                                                    "properties": {
                                                        "ApplicationId": {
                                                            "description": "The application ID for an Amazon Pinpoint application.",
                                                            "pattern": "^[0-9a-fA-F]+$",
                                                            "type": "string"
                                                        },
                                                        "ExternalId": {
                                                            "description": "The external ID.",
                                                            "type": "string"
                                                        },
                                                        "RoleArn": {
                                                            "description": "The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.",
                                                            "maxLength": 2048,
                                                            "minLength": 20,
                                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                            "type": "string"
                                                        },
                                                        "UserDataShared": {
                                                            "description": "If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.",
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "required": [
                                                        "ApplicationId",
                                                        "RoleArn",
                                                        "ExternalId"
                                                    ],
                                                    "type": "object"
                                                },
                                                "CallbackURLs": {
                                                    "description": "<p>A list of allowed redirect (callback) URLs for the identity providers.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                                                    "items": {
                                                        "maxLength": 1024,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    },
                                                    "maxItems": 100,
                                                    "minItems": 0,
                                                    "type": "array"
                                                },
                                                "ClientId": {
                                                    "description": "The ID of the client associated with the user pool.",
                                                    "format": "password",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w+]+",
                                                    "type": "string"
                                                },
                                                "ClientName": {
                                                    "description": "The client name from the user pool request of the client type.",
                                                    "maxLength": 128,
                                                    "minLength": 1,
                                                    "pattern": "[\\w\\s+=,.@-]+",
                                                    "type": "string"
                                                },
                                                "ClientSecret": {
                                                    "description": "The client secret from the user pool request of the client type.",
                                                    "format": "password",
                                                    "maxLength": 64,
                                                    "minLength": 1,
                                                    "pattern": "[\\w+]+",
                                                    "type": "string"
                                                },
                                                "CreationDate": {
                                                    "description": "The date the user pool client was created.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "DefaultRedirectURI": {
                                                    "description": "<p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                                                    "maxLength": 1024,
                                                    "minLength": 1,
                                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                    "type": "string"
                                                },
                                                "ExplicitAuthFlows": {
                                                    "description": "The explicit authentication flows.",
                                                    "items": {
                                                        "enum": [
                                                            "ADMIN_NO_SRP_AUTH",
                                                            "CUSTOM_AUTH_FLOW_ONLY",
                                                            "USER_PASSWORD_AUTH"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "LastModifiedDate": {
                                                    "description": "The date the user pool client was last modified.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "LogoutURLs": {
                                                    "description": "A list of allowed logout URLs for the identity providers.",
                                                    "items": {
                                                        "maxLength": 1024,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    },
                                                    "maxItems": 100,
                                                    "minItems": 0,
                                                    "type": "array"
                                                },
                                                "ReadAttributes": {
                                                    "description": "The Read-only attributes.",
                                                    "items": {
                                                        "maxLength": 2048,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "RefreshTokenValidity": {
                                                    "description": "The time limit, in days, after which the refresh token is no longer valid and cannot be used.",
                                                    "maximum": 3650,
                                                    "minimum": 0,
                                                    "type": "integer"
                                                },
                                                "SupportedIdentityProviders": {
                                                    "description": "A list of provider names for the identity providers that are supported on this client.",
                                                    "items": {
                                                        "maxLength": 32,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                },
                                                "UserPoolId": {
                                                    "description": "The user pool ID for the user pool client.",
                                                    "maxLength": 55,
                                                    "minLength": 1,
                                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                                    "type": "string"
                                                },
                                                "WriteAttributes": {
                                                    "description": "The writeable attributes.",
                                                    "items": {
                                                        "maxLength": 2048,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ConcurrentModificationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "ScopeDoesNotExistException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "InvalidOAuthFlowException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to update the user pool client.",
                                "properties": {
                                    "AllowedOAuthFlows": {
                                        "description": "<p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>token</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>",
                                        "items": {
                                            "enum": [
                                                "code",
                                                "implicit",
                                                "client_credentials"
                                            ],
                                            "type": "string"
                                        },
                                        "maxItems": 3,
                                        "minItems": 0,
                                        "type": "array"
                                    },
                                    "AllowedOAuthFlowsUserPoolClient": {
                                        "description": "Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.",
                                        "type": "boolean"
                                    },
                                    "AllowedOAuthScopes": {
                                        "description": "A list of allowed <code>OAuth</code> scopes. Currently supported values are <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and <code>\"Cognito\"</code>.",
                                        "items": {
                                            "maxLength": 256,
                                            "minLength": 1,
                                            "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                            "type": "string"
                                        },
                                        "maxItems": 25,
                                        "type": "array"
                                    },
                                    "AnalyticsConfiguration": {
                                        "description": "The Amazon Pinpoint analytics configuration for collecting metrics for this user pool.",
                                        "properties": {
                                            "ApplicationId": {
                                                "description": "The application ID for an Amazon Pinpoint application.",
                                                "pattern": "^[0-9a-fA-F]+$",
                                                "type": "string"
                                            },
                                            "ExternalId": {
                                                "description": "The external ID.",
                                                "type": "string"
                                            },
                                            "RoleArn": {
                                                "description": "The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            },
                                            "UserDataShared": {
                                                "description": "If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.",
                                                "type": "boolean"
                                            }
                                        },
                                        "required": [
                                            "ApplicationId",
                                            "RoleArn",
                                            "ExternalId"
                                        ],
                                        "type": "object"
                                    },
                                    "CallbackURLs": {
                                        "description": "<p>A list of allowed redirect (callback) URLs for the identity providers.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                                        "items": {
                                            "maxLength": 1024,
                                            "minLength": 1,
                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                            "type": "string"
                                        },
                                        "maxItems": 100,
                                        "minItems": 0,
                                        "type": "array"
                                    },
                                    "ClientId": {
                                        "description": "The ID of the client associated with the user pool.",
                                        "format": "password",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w+]+",
                                        "type": "string"
                                    },
                                    "ClientName": {
                                        "description": "The client name from the update user pool client request.",
                                        "maxLength": 128,
                                        "minLength": 1,
                                        "pattern": "[\\w\\s+=,.@-]+",
                                        "type": "string"
                                    },
                                    "DefaultRedirectURI": {
                                        "description": "<p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                                        "maxLength": 1024,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "ExplicitAuthFlows": {
                                        "description": "Explicit authentication flows.",
                                        "items": {
                                            "enum": [
                                                "ADMIN_NO_SRP_AUTH",
                                                "CUSTOM_AUTH_FLOW_ONLY",
                                                "USER_PASSWORD_AUTH"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "LogoutURLs": {
                                        "description": "A list of allowed logout URLs for the identity providers.",
                                        "items": {
                                            "maxLength": 1024,
                                            "minLength": 1,
                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                            "type": "string"
                                        },
                                        "maxItems": 100,
                                        "minItems": 0,
                                        "type": "array"
                                    },
                                    "ReadAttributes": {
                                        "description": "The read-only attributes of the user pool.",
                                        "items": {
                                            "maxLength": 2048,
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "RefreshTokenValidity": {
                                        "description": "The time limit, in days, after which the refresh token is no longer valid and cannot be used.",
                                        "maximum": 3650,
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "SupportedIdentityProviders": {
                                        "description": "A list of provider names for the identity providers that are supported on this client.",
                                        "items": {
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "UserPoolId": {
                                        "description": "The user pool ID for the user pool where you want to update the user pool client.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    },
                                    "WriteAttributes": {
                                        "description": "The writeable attributes of the user pool.",
                                        "items": {
                                            "maxLength": 2048,
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "UserPoolId",
                                    "ClientId"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#UpdateUserPoolDomain": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Updates the Secure Sockets Layer (SSL) certificate for the custom domain for your user pool.</p> <p>You can use this operation to provide the Amazon Resource Name (ARN) of a new certificate to Amazon Cognito. You cannot use it to change the domain for a user pool.</p> <p>A custom domain is used to host the Amazon Cognito hosted UI, which provides sign-up and sign-in pages for your application. When you set up a custom domain, you provide a certificate that you manage with AWS Certificate Manager (ACM). When necessary, you can use this operation to change the certificate that you applied to your custom domain.</p> <p>Usually, this is unnecessary following routine certificate renewal with ACM. When you renew your existing certificate in ACM, the ARN for your certificate remains the same, and your custom domain uses the new certificate automatically.</p> <p>However, if you replace your existing certificate with a new one, ACM gives the new certificate a new ARN. To apply the new certificate to your custom domain, you must provide this ARN to Amazon Cognito.</p> <p>When you add your new certificate in ACM, you must choose US East (N. Virginia) as the AWS Region.</p> <p>After you submit your request, Amazon Cognito requires up to 1 hour to distribute your new certificate to your custom domain.</p> <p>For more information about adding a custom domain to your user pool, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html\">Using Your Own Domain for the Hosted UI</a>.</p>",
                "operationId": "UpdateUserPoolDomain",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "The UpdateUserPoolDomain response output.",
                                    "properties": {
                                        "CloudFrontDomain": {
                                            "description": "The Amazon CloudFront endpoint that Amazon Cognito set up when you added the custom domain to your user pool.",
                                            "maxLength": 63,
                                            "minLength": 1,
                                            "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "The UpdateUserPoolDomain request input.",
                                "properties": {
                                    "CustomDomainConfig": {
                                        "description": "The configuration for a custom domain that hosts the sign-up and sign-in pages for your application. Use this object to specify an SSL certificate that is managed by ACM.",
                                        "properties": {
                                            "CertificateArn": {
                                                "description": "The Amazon Resource Name (ARN) of an AWS Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "CertificateArn"
                                        ],
                                        "type": "object"
                                    },
                                    "Domain": {
                                        "description": "<p>The domain name for the custom domain that hosts the sign-up and sign-in pages for your application. For example: <code>auth.example.com</code>. </p> <p>This string can include only lowercase letters, numbers, and hyphens. Do not use a hyphen for the first or last character. Use periods to separate subdomain names.</p>",
                                        "maxLength": 63,
                                        "minLength": 1,
                                        "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                                        "type": "string"
                                    },
                                    "UserPoolId": {
                                        "description": "The ID of the user pool that is associated with the custom domain that you are updating the certificate for.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Domain",
                                    "UserPoolId",
                                    "CustomDomainConfig"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#VerifySoftwareToken": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Use this API to register a user's entered TOTP code and mark the user's software token MFA status as \"verified\" if successful. The request takes an access token or a session string, but not both.",
                "operationId": "VerifySoftwareToken",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "Session": {
                                            "description": "The session which should be passed both ways in challenge-response calls to the service.",
                                            "maxLength": 2048,
                                            "minLength": 20,
                                            "type": "string"
                                        },
                                        "Status": {
                                            "description": "The status of the verify software token.",
                                            "enum": [
                                                "SUCCESS",
                                                "ERROR"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InvalidUserPoolConfigurationException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "EnableSoftwareTokenMFAException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "490": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "491": {
                        "description": "SoftwareTokenMFANotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "492": {
                        "description": "CodeMismatchException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "AccessToken": {
                                        "description": "The access token.",
                                        "format": "password",
                                        "pattern": "[A-Za-z0-9-_=.]+",
                                        "type": "string"
                                    },
                                    "FriendlyDeviceName": {
                                        "description": "The friendly device name.",
                                        "type": "string"
                                    },
                                    "Session": {
                                        "description": "The session which should be passed both ways in challenge-response calls to the service.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "type": "string"
                                    },
                                    "UserCode": {
                                        "description": "The one time password computed using the secret code returned by ",
                                        "maxLength": 6,
                                        "minLength": 6,
                                        "pattern": "[0-9]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "UserCode"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#VerifyUserAttribute": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Verifies the specified user attributes in the user pool.",
                "operationId": "VerifyUserAttribute",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "A container representing the response from the server from the request to verify user attributes.",
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ResourceNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "CodeMismatchException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ExpiredCodeException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "NotAuthorizedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "PasswordResetRequiredException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "488": {
                        "description": "UserNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "489": {
                        "description": "UserNotConfirmedException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "490": {
                        "description": "InternalErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Represents the request to verify user attributes.",
                                "properties": {
                                    "AccessToken": {
                                        "description": "Represents the access token of the request to verify user attributes.",
                                        "format": "password",
                                        "pattern": "[A-Za-z0-9-_=.]+",
                                        "type": "string"
                                    },
                                    "AttributeName": {
                                        "description": "The attribute name in the request to verify user attributes.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "Code": {
                                        "description": "The verification code in the request to verify user attributes.",
                                        "maxLength": 2048,
                                        "minLength": 1,
                                        "pattern": "[\\S]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "AccessToken",
                                    "AttributeName",
                                    "Code"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AWSAccountIdType": {
                "type": "string"
            },
            "AccountTakeoverActionNotifyType": {
                "type": "boolean"
            },
            "AccountTakeoverActionType": {
                "description": "Account takeover action type.",
                "properties": {
                    "EventAction": {
                        "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                        "enum": [
                            "BLOCK",
                            "MFA_IF_CONFIGURED",
                            "MFA_REQUIRED",
                            "NO_ACTION"
                        ],
                        "type": "string"
                    },
                    "Notify": {
                        "description": "Flag specifying whether to send a notification.",
                        "type": "boolean"
                    }
                },
                "required": [
                    "Notify",
                    "EventAction"
                ],
                "type": "object"
            },
            "AccountTakeoverActionsType": {
                "description": "Account takeover actions type.",
                "properties": {
                    "HighAction": {
                        "description": "Action to take for a high risk.",
                        "properties": {
                            "EventAction": {
                                "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                "enum": [
                                    "BLOCK",
                                    "MFA_IF_CONFIGURED",
                                    "MFA_REQUIRED",
                                    "NO_ACTION"
                                ],
                                "type": "string"
                            },
                            "Notify": {
                                "description": "Flag specifying whether to send a notification.",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "Notify",
                            "EventAction"
                        ],
                        "type": "object"
                    },
                    "LowAction": {
                        "description": "Action to take for a low risk.",
                        "properties": {
                            "EventAction": {
                                "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                "enum": [
                                    "BLOCK",
                                    "MFA_IF_CONFIGURED",
                                    "MFA_REQUIRED",
                                    "NO_ACTION"
                                ],
                                "type": "string"
                            },
                            "Notify": {
                                "description": "Flag specifying whether to send a notification.",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "Notify",
                            "EventAction"
                        ],
                        "type": "object"
                    },
                    "MediumAction": {
                        "description": "Action to take for a medium risk.",
                        "properties": {
                            "EventAction": {
                                "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                "enum": [
                                    "BLOCK",
                                    "MFA_IF_CONFIGURED",
                                    "MFA_REQUIRED",
                                    "NO_ACTION"
                                ],
                                "type": "string"
                            },
                            "Notify": {
                                "description": "Flag specifying whether to send a notification.",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "Notify",
                            "EventAction"
                        ],
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "AccountTakeoverEventActionType": {
                "enum": [
                    "BLOCK",
                    "MFA_IF_CONFIGURED",
                    "MFA_REQUIRED",
                    "NO_ACTION"
                ],
                "type": "string"
            },
            "AccountTakeoverRiskConfigurationType": {
                "description": "Configuration for mitigation actions and notification for different levels of risk detected for a potential account takeover.",
                "properties": {
                    "Actions": {
                        "description": "Account takeover risk configuration actions",
                        "properties": {
                            "HighAction": {
                                "description": "Action to take for a high risk.",
                                "properties": {
                                    "EventAction": {
                                        "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                        "enum": [
                                            "BLOCK",
                                            "MFA_IF_CONFIGURED",
                                            "MFA_REQUIRED",
                                            "NO_ACTION"
                                        ],
                                        "type": "string"
                                    },
                                    "Notify": {
                                        "description": "Flag specifying whether to send a notification.",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "Notify",
                                    "EventAction"
                                ],
                                "type": "object"
                            },
                            "LowAction": {
                                "description": "Action to take for a low risk.",
                                "properties": {
                                    "EventAction": {
                                        "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                        "enum": [
                                            "BLOCK",
                                            "MFA_IF_CONFIGURED",
                                            "MFA_REQUIRED",
                                            "NO_ACTION"
                                        ],
                                        "type": "string"
                                    },
                                    "Notify": {
                                        "description": "Flag specifying whether to send a notification.",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "Notify",
                                    "EventAction"
                                ],
                                "type": "object"
                            },
                            "MediumAction": {
                                "description": "Action to take for a medium risk.",
                                "properties": {
                                    "EventAction": {
                                        "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                        "enum": [
                                            "BLOCK",
                                            "MFA_IF_CONFIGURED",
                                            "MFA_REQUIRED",
                                            "NO_ACTION"
                                        ],
                                        "type": "string"
                                    },
                                    "Notify": {
                                        "description": "Flag specifying whether to send a notification.",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "Notify",
                                    "EventAction"
                                ],
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "NotifyConfiguration": {
                        "description": "The notify configuration used to construct email notifications.",
                        "properties": {
                            "BlockEmail": {
                                "description": "Email template used when a detected risk event is blocked.",
                                "properties": {
                                    "HtmlBody": {
                                        "description": "The HTML body.",
                                        "maxLength": 20000,
                                        "minLength": 6,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                        "type": "string"
                                    },
                                    "Subject": {
                                        "description": "The subject.",
                                        "maxLength": 140,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                        "type": "string"
                                    },
                                    "TextBody": {
                                        "description": "The text body.",
                                        "maxLength": 20000,
                                        "minLength": 6,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Subject"
                                ],
                                "type": "object"
                            },
                            "From": {
                                "description": "The email address that is sending the email. It must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.",
                                "type": "string"
                            },
                            "MfaEmail": {
                                "description": "The MFA email template used when MFA is challenged as part of a detected risk.",
                                "properties": {
                                    "HtmlBody": {
                                        "description": "The HTML body.",
                                        "maxLength": 20000,
                                        "minLength": 6,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                        "type": "string"
                                    },
                                    "Subject": {
                                        "description": "The subject.",
                                        "maxLength": 140,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                        "type": "string"
                                    },
                                    "TextBody": {
                                        "description": "The text body.",
                                        "maxLength": 20000,
                                        "minLength": 6,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Subject"
                                ],
                                "type": "object"
                            },
                            "NoActionEmail": {
                                "description": "The email template used when a detected risk event is allowed.",
                                "properties": {
                                    "HtmlBody": {
                                        "description": "The HTML body.",
                                        "maxLength": 20000,
                                        "minLength": 6,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                        "type": "string"
                                    },
                                    "Subject": {
                                        "description": "The subject.",
                                        "maxLength": 140,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                        "type": "string"
                                    },
                                    "TextBody": {
                                        "description": "The text body.",
                                        "maxLength": 20000,
                                        "minLength": 6,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Subject"
                                ],
                                "type": "object"
                            },
                            "ReplyTo": {
                                "description": "The destination to which the receiver of an email should reply to.",
                                "type": "string"
                            },
                            "SourceArn": {
                                "description": "The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. It permits Amazon Cognito to send for the email address specified in the <code>From</code> parameter.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "SourceArn"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "Actions"
                ],
                "type": "object"
            },
            "AddCustomAttributesRequest": {
                "description": "Represents the request to add custom attributes.",
                "properties": {
                    "CustomAttributes": {
                        "description": "An array of custom attributes, such as Mutable and Name.",
                        "items": {
                            "description": "Contains information about the schema attribute.",
                            "properties": {
                                "AttributeDataType": {
                                    "description": "The attribute data type.",
                                    "enum": [
                                        "String",
                                        "Number",
                                        "DateTime",
                                        "Boolean"
                                    ],
                                    "type": "string"
                                },
                                "DeveloperOnlyAttribute": {
                                    "description": "Specifies whether the attribute type is developer only.",
                                    "type": "boolean"
                                },
                                "Mutable": {
                                    "description": "<p>Specifies whether the value of the attribute can be changed.</p> <p>For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html\">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>",
                                    "type": "boolean"
                                },
                                "Name": {
                                    "description": "A schema attribute of the name type.",
                                    "maxLength": 20,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "NumberAttributeConstraints": {
                                    "description": "Specifies the constraints for an attribute of the number type.",
                                    "properties": {
                                        "MaxValue": {
                                            "description": "The maximum value of an attribute that is of the number data type.",
                                            "type": "string"
                                        },
                                        "MinValue": {
                                            "description": "The minimum value of an attribute that is of the number data type.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "Required": {
                                    "description": "Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.",
                                    "type": "boolean"
                                },
                                "StringAttributeConstraints": {
                                    "description": "Specifies the constraints for an attribute of the string type.",
                                    "properties": {
                                        "MaxLength": {
                                            "description": "The maximum length.",
                                            "type": "string"
                                        },
                                        "MinLength": {
                                            "description": "The minimum length.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "maxItems": 25,
                        "minItems": 1,
                        "type": "array"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool where you want to add custom attributes.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "CustomAttributes"
                ],
                "type": "object"
            },
            "AddCustomAttributesResponse": {
                "description": "Represents the response from the server for the request to add custom attributes.",
                "properties": {},
                "type": "object"
            },
            "AdminAddUserToGroupRequest": {
                "properties": {
                    "GroupName": {
                        "description": "The group name.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The username for the user.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username",
                    "GroupName"
                ],
                "type": "object"
            },
            "AdminConfirmSignUpRequest": {
                "description": "Represents the request to confirm user registration.",
                "properties": {
                    "UserPoolId": {
                        "description": "The user pool ID for which you want to confirm user registration.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user name for which you want to confirm user registration.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username"
                ],
                "type": "object"
            },
            "AdminConfirmSignUpResponse": {
                "description": "Represents the response from the server for the request to confirm registration.",
                "properties": {},
                "type": "object"
            },
            "AdminCreateUserConfigType": {
                "description": "The configuration for creating a new user profile.",
                "properties": {
                    "AllowAdminCreateUserOnly": {
                        "description": "Set to <code>True</code> if only the administrator is allowed to create user profiles. Set to <code>False</code> if users can sign themselves up via an app.",
                        "type": "boolean"
                    },
                    "InviteMessageTemplate": {
                        "description": "<p>The message template to be used for the welcome message to new users.</p> <p>See also <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization\">Customizing User Invitation Messages</a>.</p>",
                        "properties": {
                            "EmailMessage": {
                                "description": "The message template for email messages.",
                                "maxLength": 20000,
                                "minLength": 6,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                "type": "string"
                            },
                            "EmailSubject": {
                                "description": "The subject line for email messages.",
                                "maxLength": 140,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                "type": "string"
                            },
                            "SMSMessage": {
                                "description": "The message template for SMS messages.",
                                "maxLength": 140,
                                "minLength": 6,
                                "pattern": ".*\\{####\\}.*",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "UnusedAccountValidityDays": {
                        "description": "The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the <code>MessageAction</code> parameter. The default value for this parameter is 7.",
                        "maximum": 365,
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "AdminCreateUserRequest": {
                "description": "Represents the request to create a user in the specified user pool.",
                "properties": {
                    "DesiredDeliveryMediums": {
                        "description": "Specify <code>\"EMAIL\"</code> if email will be used to send the welcome message. Specify <code>\"SMS\"</code> if the phone number will be used. The default value is <code>\"SMS\"</code>. More than one value can be specified.",
                        "items": {
                            "enum": [
                                "SMS",
                                "EMAIL"
                            ],
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "ForceAliasCreation": {
                        "description": "<p>This parameter is only used if the <code>phone_number_verified</code> or <code>email_verified</code> attribute is set to <code>True</code>. Otherwise, it is ignored.</p> <p>If this parameter is set to <code>True</code> and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias.</p> <p>If this parameter is set to <code>False</code>, the API throws an <code>AliasExistsException</code> error if the alias already exists. The default value is <code>False</code>.</p>",
                        "type": "boolean"
                    },
                    "MessageAction": {
                        "description": "Set to <code>\"RESEND\"</code> to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to <code>\"SUPPRESS\"</code> to suppress sending the message. Only one value can be specified.",
                        "enum": [
                            "RESEND",
                            "SUPPRESS"
                        ],
                        "type": "string"
                    },
                    "TemporaryPassword": {
                        "description": "<p>The user's temporary password. This password must conform to the password policy that you specified when you created the user pool.</p> <p>The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page along with a new password to be used in all future sign-ins.</p> <p>This parameter is not required. If you do not specify a value, Amazon Cognito generates one for you.</p> <p>The temporary password can only be used until the user account expiration limit that you specified when you created the user pool. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the <code>MessageAction</code> parameter.</p>",
                        "format": "password",
                        "maxLength": 256,
                        "minLength": 6,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "UserAttributes": {
                        "description": "<p>An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes other than <code>Username</code>. However, any attributes that you specify as required (in or in the <b>Attributes</b> tab of the console) must be supplied either by you (in your call to <code>AdminCreateUser</code>) or by the user (when he or she signs up in response to your welcome message).</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p> <p>To send a message inviting the user to sign up, you must specify the user's email address or phone number. This can be done in your call to AdminCreateUser or in the <b>Users</b> tab of the Amazon Cognito console for managing your user pools.</p> <p>In your call to <code>AdminCreateUser</code>, you can set the <code>email_verified</code> attribute to <code>True</code>, and you can set the <code>phone_number_verified</code> attribute to <code>True</code>. (You can also do this by calling .)</p> <ul> <li> <p> <b>email</b>: The email address of the user to whom the message that contains the code and username will be sent. Required if the <code>email_verified</code> attribute is set to <code>True</code>, or if <code>\"EMAIL\"</code> is specified in the <code>DesiredDeliveryMediums</code> parameter.</p> </li> <li> <p> <b>phone_number</b>: The phone number of the user to whom the message that contains the code and username will be sent. Required if the <code>phone_number_verified</code> attribute is set to <code>True</code>, or if <code>\"SMS\"</code> is specified in the <code>DesiredDeliveryMediums</code> parameter.</p> </li> </ul>",
                        "items": {
                            "description": "Specifies whether the attribute is standard or custom.",
                            "properties": {
                                "Name": {
                                    "description": "The name of the attribute.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "Value": {
                                    "description": "The value of the attribute.",
                                    "format": "password",
                                    "maxLength": 2048,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Name"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool where the user will be created.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "ValidationData": {
                        "description": "<p>The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. For example, you might choose to allow or disallow user sign-up based on the user's domain.</p> <p>To configure custom validation, you must create a Pre Sign-up Lambda trigger for the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger receives the validation data and uses it in the validation process.</p> <p>The user's validation data is not persisted.</p>",
                        "items": {
                            "description": "Specifies whether the attribute is standard or custom.",
                            "properties": {
                                "Name": {
                                    "description": "The name of the attribute.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "Value": {
                                    "description": "The value of the attribute.",
                                    "format": "password",
                                    "maxLength": 2048,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Name"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username"
                ],
                "type": "object"
            },
            "AdminCreateUserResponse": {
                "description": "Represents the response from the server to the request to create the user.",
                "properties": {
                    "User": {
                        "description": "The newly created user.",
                        "properties": {
                            "Attributes": {
                                "description": "A container with information about the user type attributes.",
                                "items": {
                                    "description": "Specifies whether the attribute is standard or custom.",
                                    "properties": {
                                        "Name": {
                                            "description": "The name of the attribute.",
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                            "type": "string"
                                        },
                                        "Value": {
                                            "description": "The value of the attribute.",
                                            "format": "password",
                                            "maxLength": 2048,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "Name"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "Enabled": {
                                "description": "Specifies whether the user is enabled.",
                                "type": "boolean"
                            },
                            "MFAOptions": {
                                "description": "The MFA options for the user.",
                                "items": {
                                    "description": "Specifies the different settings for multi-factor authentication (MFA).",
                                    "properties": {
                                        "AttributeName": {
                                            "description": "The attribute name of the MFA option type.",
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                            "type": "string"
                                        },
                                        "DeliveryMedium": {
                                            "description": "The delivery medium (email message or SMS message) to send the MFA code.",
                                            "enum": [
                                                "SMS",
                                                "EMAIL"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "UserCreateDate": {
                                "description": "The creation date of the user.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "UserLastModifiedDate": {
                                "description": "The last modified date of the user.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "UserStatus": {
                                "description": "<p>The user status. Can be one of the following:</p> <ul> <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li> <li> <p>CONFIRMED - User has been confirmed.</p> </li> <li> <p>ARCHIVED - User is no longer active.</p> </li> <li> <p>COMPROMISED - User is disabled due to a potential security threat.</p> </li> <li> <p>UNKNOWN - User status is not known.</p> </li> </ul>",
                                "enum": [
                                    "UNCONFIRMED",
                                    "CONFIRMED",
                                    "ARCHIVED",
                                    "COMPROMISED",
                                    "UNKNOWN",
                                    "RESET_REQUIRED",
                                    "FORCE_CHANGE_PASSWORD"
                                ],
                                "type": "string"
                            },
                            "Username": {
                                "description": "The user name of the user you wish to describe.",
                                "format": "password",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "AdminCreateUserUnusedAccountValidityDaysType": {
                "maximum": 365,
                "minimum": 0,
                "type": "integer"
            },
            "AdminDeleteUserAttributesRequest": {
                "description": "Represents the request to delete user attributes as an administrator.",
                "properties": {
                    "UserAttributeNames": {
                        "description": "<p>An array of strings representing the user attribute names you wish to delete.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>",
                        "items": {
                            "maxLength": 32,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool where you want to delete user attributes.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user name of the user from which you would like to delete attributes.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username",
                    "UserAttributeNames"
                ],
                "type": "object"
            },
            "AdminDeleteUserAttributesResponse": {
                "description": "Represents the response received from the server for a request to delete user attributes.",
                "properties": {},
                "type": "object"
            },
            "AdminDeleteUserRequest": {
                "description": "Represents the request to delete a user as an administrator.",
                "properties": {
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool where you want to delete the user.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user name of the user you wish to delete.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username"
                ],
                "type": "object"
            },
            "AdminDisableProviderForUserRequest": {
                "properties": {
                    "User": {
                        "description": "The user to be disabled.",
                        "properties": {
                            "ProviderAttributeName": {
                                "description": "The name of the provider attribute to link to, for example, <code>NameID</code>.",
                                "type": "string"
                            },
                            "ProviderAttributeValue": {
                                "description": "The value of the provider attribute to link to, for example, <code>xxxxx_account</code>.",
                                "type": "string"
                            },
                            "ProviderName": {
                                "description": "The name of the provider, for example, Facebook, Google, or Login with Amazon.",
                                "maxLength": 32,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool.",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "User"
                ],
                "type": "object"
            },
            "AdminDisableProviderForUserResponse": {
                "properties": {},
                "type": "object"
            },
            "AdminDisableUserRequest": {
                "description": "Represents the request to disable any user as an administrator.",
                "properties": {
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool where you want to disable the user.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user name of the user you wish to disable.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username"
                ],
                "type": "object"
            },
            "AdminDisableUserResponse": {
                "description": "Represents the response received from the server to disable the user as an administrator.",
                "properties": {},
                "type": "object"
            },
            "AdminEnableUserRequest": {
                "description": "Represents the request that enables the user as an administrator.",
                "properties": {
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool where you want to enable the user.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user name of the user you wish to enable.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username"
                ],
                "type": "object"
            },
            "AdminEnableUserResponse": {
                "description": "Represents the response from the server for the request to enable a user as an administrator.",
                "properties": {},
                "type": "object"
            },
            "AdminForgetDeviceRequest": {
                "description": "Sends the forgot device request, as an administrator.",
                "properties": {
                    "DeviceKey": {
                        "description": "The device key.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-f-]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user name.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username",
                    "DeviceKey"
                ],
                "type": "object"
            },
            "AdminGetDeviceRequest": {
                "description": "Represents the request to get the device, as an administrator.",
                "properties": {
                    "DeviceKey": {
                        "description": "The device key.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-f-]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user name.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "DeviceKey",
                    "UserPoolId",
                    "Username"
                ],
                "type": "object"
            },
            "AdminGetDeviceResponse": {
                "description": "Gets the device response, as an administrator.",
                "properties": {
                    "Device": {
                        "description": "The device.",
                        "properties": {
                            "DeviceAttributes": {
                                "description": "The device attributes.",
                                "items": {
                                    "description": "Specifies whether the attribute is standard or custom.",
                                    "properties": {
                                        "Name": {
                                            "description": "The name of the attribute.",
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                            "type": "string"
                                        },
                                        "Value": {
                                            "description": "The value of the attribute.",
                                            "format": "password",
                                            "maxLength": 2048,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "Name"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "DeviceCreateDate": {
                                "description": "The creation date of the device.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "DeviceKey": {
                                "description": "The device key.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-f-]+",
                                "type": "string"
                            },
                            "DeviceLastAuthenticatedDate": {
                                "description": "The date in which the device was last authenticated.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "DeviceLastModifiedDate": {
                                "description": "The last modified date of the device.",
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "Device"
                ],
                "type": "object"
            },
            "AdminGetUserRequest": {
                "description": "Represents the request to get the specified user as an administrator.",
                "properties": {
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool where you want to get information about the user.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user name of the user you wish to retrieve.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username"
                ],
                "type": "object"
            },
            "AdminGetUserResponse": {
                "description": "Represents the response from the server from the request to get the specified user as an administrator.",
                "properties": {
                    "Enabled": {
                        "description": "Indicates that the status is enabled.",
                        "type": "boolean"
                    },
                    "MFAOptions": {
                        "description": "Specifies the options for MFA (e.g., email or phone number).",
                        "items": {
                            "description": "Specifies the different settings for multi-factor authentication (MFA).",
                            "properties": {
                                "AttributeName": {
                                    "description": "The attribute name of the MFA option type.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "DeliveryMedium": {
                                    "description": "The delivery medium (email message or SMS message) to send the MFA code.",
                                    "enum": [
                                        "SMS",
                                        "EMAIL"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "PreferredMfaSetting": {
                        "description": "The user's preferred MFA setting.",
                        "type": "string"
                    },
                    "UserAttributes": {
                        "description": "An array of name-value pairs representing user attributes.",
                        "items": {
                            "description": "Specifies whether the attribute is standard or custom.",
                            "properties": {
                                "Name": {
                                    "description": "The name of the attribute.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "Value": {
                                    "description": "The value of the attribute.",
                                    "format": "password",
                                    "maxLength": 2048,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Name"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "UserCreateDate": {
                        "description": "The date the user was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "UserLastModifiedDate": {
                        "description": "The date the user was last modified.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "UserMFASettingList": {
                        "description": "The list of the user's MFA settings.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "UserStatus": {
                        "description": "<p>The user status. Can be one of the following:</p> <ul> <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li> <li> <p>CONFIRMED - User has been confirmed.</p> </li> <li> <p>ARCHIVED - User is no longer active.</p> </li> <li> <p>COMPROMISED - User is disabled due to a potential security threat.</p> </li> <li> <p>UNKNOWN - User status is not known.</p> </li> </ul>",
                        "enum": [
                            "UNCONFIRMED",
                            "CONFIRMED",
                            "ARCHIVED",
                            "COMPROMISED",
                            "UNKNOWN",
                            "RESET_REQUIRED",
                            "FORCE_CHANGE_PASSWORD"
                        ],
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user name of the user about whom you are receiving information.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "Username"
                ],
                "type": "object"
            },
            "AdminInitiateAuthRequest": {
                "description": "Initiates the authorization request, as an administrator.",
                "properties": {
                    "AnalyticsMetadata": {
                        "description": "The analytics metadata for collecting Amazon Pinpoint metrics for <code>AdminInitiateAuth</code> calls.",
                        "properties": {
                            "AnalyticsEndpointId": {
                                "description": "The endpoint ID.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "AuthFlow": {
                        "description": "<p>The authentication flow for this call to execute. The API action will depend on this value. For example:</p> <ul> <li> <p> <code>REFRESH_TOKEN_AUTH</code> will take in a valid refresh token and return new tokens.</p> </li> <li> <p> <code>USER_SRP_AUTH</code> will take in <code>USERNAME</code> and <code>SRP_A</code> and return the SRP variables to be used for next challenge execution.</p> </li> <li> <p> <code>USER_PASSWORD_AUTH</code> will take in <code>USERNAME</code> and <code>PASSWORD</code> and return the next challenge or tokens.</p> </li> </ul> <p>Valid values include:</p> <ul> <li> <p> <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote Password (SRP) protocol.</p> </li> <li> <p> <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.</p> </li> <li> <p> <code>CUSTOM_AUTH</code>: Custom authentication flow.</p> </li> <li> <p> <code>ADMIN_NO_SRP_AUTH</code>: Non-SRP authentication flow; you can pass in the USERNAME and PASSWORD directly if the flow is enabled for calling the app client.</p> </li> <li> <p> <code>USER_PASSWORD_AUTH</code>: Non-SRP authentication flow; USERNAME and PASSWORD are passed directly. If a user migration Lambda trigger is set, this flow will invoke the user migration Lambda if the USERNAME is not found in the user pool. </p> </li> </ul>",
                        "enum": [
                            "USER_SRP_AUTH",
                            "REFRESH_TOKEN_AUTH",
                            "REFRESH_TOKEN",
                            "CUSTOM_AUTH",
                            "ADMIN_NO_SRP_AUTH",
                            "USER_PASSWORD_AUTH"
                        ],
                        "type": "string"
                    },
                    "AuthParameters": {
                        "description": "<p>The authentication parameters. These are inputs corresponding to the <code>AuthFlow</code> that you are invoking. The required values depend on the value of <code>AuthFlow</code>:</p> <ul> <li> <p>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required), <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>: <code>REFRESH_TOKEN</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>ADMIN_NO_SRP_AUTH</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (if app client is configured with client secret), <code>PASSWORD</code> (required), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (if app client is configured with client secret), <code>DEVICE_KEY</code> </p> </li> </ul>",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ClientId": {
                        "description": "The app client ID.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "ClientMetadata": {
                        "description": "This is a random key-value pair map which can contain any key and will be passed to your PreAuthentication Lambda trigger as-is. It can be used to implement additional validations around authentication.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ContextData": {
                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                        "properties": {
                            "EncodedData": {
                                "description": "Encoded data containing device fingerprinting details, collected using the Amazon Cognito context data collection library.",
                                "type": "string"
                            },
                            "HttpHeaders": {
                                "description": "HttpHeaders received on your server in same order.",
                                "items": {
                                    "description": "The HTTP header.",
                                    "properties": {
                                        "headerName": {
                                            "description": "The header name",
                                            "type": "string"
                                        },
                                        "headerValue": {
                                            "description": "The header value.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "IpAddress": {
                                "description": "Source IP address of your user.",
                                "type": "string"
                            },
                            "ServerName": {
                                "description": "Your server endpoint where this API is invoked.",
                                "type": "string"
                            },
                            "ServerPath": {
                                "description": "Your server path where this API is invoked. ",
                                "type": "string"
                            }
                        },
                        "required": [
                            "IpAddress",
                            "ServerName",
                            "ServerPath",
                            "HttpHeaders"
                        ],
                        "type": "object"
                    },
                    "UserPoolId": {
                        "description": "The ID of the Amazon Cognito user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "ClientId",
                    "AuthFlow"
                ],
                "type": "object"
            },
            "AdminInitiateAuthResponse": {
                "description": "Initiates the authentication response, as an administrator.",
                "properties": {
                    "AuthenticationResult": {
                        "description": "The result of the authentication response. This is only returned if the caller does not need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, <code>ChallengeName</code>, <code>ChallengeParameters</code>, and <code>Session</code> are returned.",
                        "properties": {
                            "AccessToken": {
                                "description": "The access token.",
                                "format": "password",
                                "pattern": "[A-Za-z0-9-_=.]+",
                                "type": "string"
                            },
                            "ExpiresIn": {
                                "description": "The expiration period of the authentication result in seconds.",
                                "type": "integer"
                            },
                            "IdToken": {
                                "description": "The ID token.",
                                "format": "password",
                                "pattern": "[A-Za-z0-9-_=.]+",
                                "type": "string"
                            },
                            "NewDeviceMetadata": {
                                "description": "The new device metadata from an authentication result.",
                                "properties": {
                                    "DeviceGroupKey": {
                                        "description": "The device group key.",
                                        "type": "string"
                                    },
                                    "DeviceKey": {
                                        "description": "The device key.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-f-]+",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "RefreshToken": {
                                "description": "The refresh token.",
                                "format": "password",
                                "pattern": "[A-Za-z0-9-_=.]+",
                                "type": "string"
                            },
                            "TokenType": {
                                "description": "The token type.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "ChallengeName": {
                        "description": "<p>The name of the challenge which you are responding to with this call. This is returned to you in the <code>AdminInitiateAuth</code> response if you need to pass another challenge.</p> <ul> <li> <p> <code>MFA_SETUP</code>: If MFA is required, users who do not have at least one of the MFA methods set up are presented with an <code>MFA_SETUP</code> challenge. The user must set up at least one MFA type to continue to authenticate.</p> </li> <li> <p> <code>SELECT_MFA_TYPE</code>: Selects the MFA type. Valid MFA options are <code>SMS_MFA</code> for text SMS MFA, and <code>SOFTWARE_TOKEN_MFA</code> for TOTP software token MFA.</p> </li> <li> <p> <code>SMS_MFA</code>: Next challenge is to supply an <code>SMS_MFA_CODE</code>, delivered via SMS.</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: Next challenge is to supply <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after the client-side SRP calculations.</p> </li> <li> <p> <code>CUSTOM_CHALLENGE</code>: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.</p> </li> <li> <p> <code>DEVICE_SRP_AUTH</code>: If device tracking was enabled on your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.</p> </li> <li> <p> <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to <code>PASSWORD_VERIFIER</code>, but for devices only.</p> </li> <li> <p> <code>ADMIN_NO_SRP_AUTH</code>: This is returned if you need to authenticate with <code>USERNAME</code> and <code>PASSWORD</code> directly. An app client must be enabled to use this flow.</p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: For users which are required to change their passwords after successful first login. This challenge should be passed with <code>NEW_PASSWORD</code> and any other required attributes.</p> </li> </ul>",
                        "enum": [
                            "SMS_MFA",
                            "SOFTWARE_TOKEN_MFA",
                            "SELECT_MFA_TYPE",
                            "MFA_SETUP",
                            "PASSWORD_VERIFIER",
                            "CUSTOM_CHALLENGE",
                            "DEVICE_SRP_AUTH",
                            "DEVICE_PASSWORD_VERIFIER",
                            "ADMIN_NO_SRP_AUTH",
                            "NEW_PASSWORD_REQUIRED"
                        ],
                        "type": "string"
                    },
                    "ChallengeParameters": {
                        "description": "<p>The challenge parameters. These are returned to you in the <code>AdminInitiateAuth</code> response if you need to pass another challenge. The responses in this parameter should be used to compute inputs to the next call (<code>AdminRespondToAuthChallenge</code>).</p> <p>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable).</p> <p>The value of the <code>USER_ID_FOR_SRP</code> attribute will be the user's actual username, not an alias (such as email address or phone number), even if you specified an alias in your call to <code>AdminInitiateAuth</code>. This is because, in the <code>AdminRespondToAuthChallenge</code> API <code>ChallengeResponses</code>, the <code>USERNAME</code> attribute cannot be an alias.</p>",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "Session": {
                        "description": "The session which should be passed both ways in challenge-response calls to the service. If <code>AdminInitiateAuth</code> or <code>AdminRespondToAuthChallenge</code> API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>AdminRespondToAuthChallenge</code> API call.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AdminLinkProviderForUserRequest": {
                "properties": {
                    "DestinationUser": {
                        "description": "<p>The existing user in the user pool to be linked to the external identity provider user account. Can be a native (Username + Password) Cognito User Pools user or a federated user (for example, a SAML or Facebook user). If the user doesn't exist, an exception is thrown. This is the user that is returned when the new user (with the linked identity provider attribute) signs in.</p> <p>For a native username + password user, the <code>ProviderAttributeValue</code> for the <code>DestinationUser</code> should be the username in the user pool. For a federated user, it should be the provider-specific <code>user_id</code>.</p> <p>The <code>ProviderAttributeName</code> of the <code>DestinationUser</code> is ignored.</p> <p>The <code>ProviderName</code> should be set to <code>Cognito</code> for users in Cognito user pools.</p>",
                        "properties": {
                            "ProviderAttributeName": {
                                "description": "The name of the provider attribute to link to, for example, <code>NameID</code>.",
                                "type": "string"
                            },
                            "ProviderAttributeValue": {
                                "description": "The value of the provider attribute to link to, for example, <code>xxxxx_account</code>.",
                                "type": "string"
                            },
                            "ProviderName": {
                                "description": "The name of the provider, for example, Facebook, Google, or Login with Amazon.",
                                "maxLength": 32,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "SourceUser": {
                        "description": "<p>An external identity provider account for a user who does not currently exist yet in the user pool. This user must be a federated user (for example, a SAML or Facebook user), not another native user.</p> <p>If the <code>SourceUser</code> is a federated social identity provider user (Facebook, Google, or Login with Amazon), you must set the <code>ProviderAttributeName</code> to <code>Cognito_Subject</code>. For social identity providers, the <code>ProviderName</code> will be <code>Facebook</code>, <code>Google</code>, or <code>LoginWithAmazon</code>, and Cognito will automatically parse the Facebook, Google, and Login with Amazon tokens for <code>id</code>, <code>sub</code>, and <code>user_id</code>, respectively. The <code>ProviderAttributeValue</code> for the user must be the same value as the <code>id</code>, <code>sub</code>, or <code>user_id</code> value found in the social identity provider token.</p> <p/> <p>For SAML, the <code>ProviderAttributeName</code> can be any value that matches a claim in the SAML assertion. If you wish to link SAML users based on the subject of the SAML assertion, you should map the subject to a claim through the SAML identity provider and submit that claim name as the <code>ProviderAttributeName</code>. If you set <code>ProviderAttributeName</code> to <code>Cognito_Subject</code>, Cognito will automatically parse the default unique identifier found in the subject from the SAML token.</p>",
                        "properties": {
                            "ProviderAttributeName": {
                                "description": "The name of the provider attribute to link to, for example, <code>NameID</code>.",
                                "type": "string"
                            },
                            "ProviderAttributeValue": {
                                "description": "The value of the provider attribute to link to, for example, <code>xxxxx_account</code>.",
                                "type": "string"
                            },
                            "ProviderName": {
                                "description": "The name of the provider, for example, Facebook, Google, or Login with Amazon.",
                                "maxLength": 32,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool.",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "DestinationUser",
                    "SourceUser"
                ],
                "type": "object"
            },
            "AdminLinkProviderForUserResponse": {
                "properties": {},
                "type": "object"
            },
            "AdminListDevicesRequest": {
                "description": "Represents the request to list devices, as an administrator.",
                "properties": {
                    "Limit": {
                        "description": "The limit of the devices request.",
                        "maximum": 60,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "PaginationToken": {
                        "description": "The pagination token.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user name.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username"
                ],
                "type": "object"
            },
            "AdminListDevicesResponse": {
                "description": "Lists the device's response, as an administrator.",
                "properties": {
                    "Devices": {
                        "description": "The devices in the list of devices response.",
                        "items": {
                            "description": "The device type.",
                            "properties": {
                                "DeviceAttributes": {
                                    "description": "The device attributes.",
                                    "items": {
                                        "description": "Specifies whether the attribute is standard or custom.",
                                        "properties": {
                                            "Name": {
                                                "description": "The name of the attribute.",
                                                "maxLength": 32,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                "type": "string"
                                            },
                                            "Value": {
                                                "description": "The value of the attribute.",
                                                "format": "password",
                                                "maxLength": 2048,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "Name"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "DeviceCreateDate": {
                                    "description": "The creation date of the device.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "DeviceKey": {
                                    "description": "The device key.",
                                    "maxLength": 55,
                                    "minLength": 1,
                                    "pattern": "[\\w-]+_[0-9a-f-]+",
                                    "type": "string"
                                },
                                "DeviceLastAuthenticatedDate": {
                                    "description": "The date in which the device was last authenticated.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "DeviceLastModifiedDate": {
                                    "description": "The last modified date of the device.",
                                    "format": "date-time",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "PaginationToken": {
                        "description": "The pagination token.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AdminListGroupsForUserRequest": {
                "properties": {
                    "Limit": {
                        "description": "The limit of the request to list groups.",
                        "maximum": 60,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "NextToken": {
                        "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The username for the user.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "Username",
                    "UserPoolId"
                ],
                "type": "object"
            },
            "AdminListGroupsForUserResponse": {
                "properties": {
                    "Groups": {
                        "description": "The groups that the user belongs to.",
                        "items": {
                            "description": "The group type.",
                            "properties": {
                                "CreationDate": {
                                    "description": "The date the group was created.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "Description": {
                                    "description": "A string containing the description of the group.",
                                    "maxLength": 2048,
                                    "type": "string"
                                },
                                "GroupName": {
                                    "description": "The name of the group.",
                                    "maxLength": 128,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "LastModifiedDate": {
                                    "description": "The date the group was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "Precedence": {
                                    "description": "<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user's tokens. Groups with higher <code>Precedence</code> values take precedence over groups with lower <code>Precedence</code> values or with null <code>Precedence</code> values.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "RoleArn": {
                                    "description": "The role ARN for the group.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                    "type": "string"
                                },
                                "UserPoolId": {
                                    "description": "The user pool ID for the user pool.",
                                    "maxLength": 55,
                                    "minLength": 1,
                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AdminListUserAuthEventsRequest": {
                "properties": {
                    "MaxResults": {
                        "description": "The maximum number of authentication events to return.",
                        "maximum": 60,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "NextToken": {
                        "description": "A pagination token.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user pool username or an alias.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username"
                ],
                "type": "object"
            },
            "AdminListUserAuthEventsResponse": {
                "properties": {
                    "AuthEvents": {
                        "description": "The response object. It includes the <code>EventID</code>, <code>EventType</code>, <code>CreationDate</code>, <code>EventRisk</code>, and <code>EventResponse</code>.",
                        "items": {
                            "description": "The authentication event type.",
                            "properties": {
                                "ChallengeResponses": {
                                    "description": "The challenge responses.",
                                    "items": {
                                        "description": "The challenge response type.",
                                        "properties": {
                                            "ChallengeName": {
                                                "description": "The challenge name",
                                                "enum": [
                                                    "Password",
                                                    "Mfa"
                                                ],
                                                "type": "string"
                                            },
                                            "ChallengeResponse": {
                                                "description": "The challenge response.",
                                                "enum": [
                                                    "Success",
                                                    "Failure"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "CreationDate": {
                                    "description": "The creation date",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "EventContextData": {
                                    "description": "The user context data captured at the time of an event request. It provides additional information about the client from which event the request is received.",
                                    "properties": {
                                        "City": {
                                            "description": "The user's city.",
                                            "type": "string"
                                        },
                                        "Country": {
                                            "description": "The user's country.",
                                            "type": "string"
                                        },
                                        "DeviceName": {
                                            "description": "The user's device name.",
                                            "type": "string"
                                        },
                                        "IpAddress": {
                                            "description": "The user's IP address.",
                                            "type": "string"
                                        },
                                        "Timezone": {
                                            "description": "The user's time zone.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "EventFeedback": {
                                    "description": "A flag specifying the user feedback captured at the time of an event request is good or bad. ",
                                    "properties": {
                                        "FeedbackDate": {
                                            "description": "The event feedback date.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "FeedbackValue": {
                                            "description": "The event feedback value.",
                                            "enum": [
                                                "Valid",
                                                "Invalid"
                                            ],
                                            "type": "string"
                                        },
                                        "Provider": {
                                            "description": "The provider.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "FeedbackValue",
                                        "Provider"
                                    ],
                                    "type": "object"
                                },
                                "EventId": {
                                    "description": "The event ID.",
                                    "type": "string"
                                },
                                "EventResponse": {
                                    "description": "The event response.",
                                    "enum": [
                                        "Success",
                                        "Failure"
                                    ],
                                    "type": "string"
                                },
                                "EventRisk": {
                                    "description": "The event risk.",
                                    "properties": {
                                        "RiskDecision": {
                                            "description": "The risk decision.",
                                            "enum": [
                                                "NoRisk",
                                                "AccountTakeover",
                                                "Block"
                                            ],
                                            "type": "string"
                                        },
                                        "RiskLevel": {
                                            "description": "The risk level.",
                                            "enum": [
                                                "Low",
                                                "Medium",
                                                "High"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "EventType": {
                                    "description": "The event type.",
                                    "enum": [
                                        "SignIn",
                                        "SignUp",
                                        "ForgotPassword"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "A pagination token.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AdminRemoveUserFromGroupRequest": {
                "properties": {
                    "GroupName": {
                        "description": "The group name.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The username for the user.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username",
                    "GroupName"
                ],
                "type": "object"
            },
            "AdminResetUserPasswordRequest": {
                "description": "Represents the request to reset a user's password as an administrator.",
                "properties": {
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool where you want to reset the user's password.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user name of the user whose password you wish to reset.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username"
                ],
                "type": "object"
            },
            "AdminResetUserPasswordResponse": {
                "description": "Represents the response from the server to reset a user password as an administrator.",
                "properties": {},
                "type": "object"
            },
            "AdminRespondToAuthChallengeRequest": {
                "description": "The request to respond to the authentication challenge, as an administrator.",
                "properties": {
                    "AnalyticsMetadata": {
                        "description": "The analytics metadata for collecting Amazon Pinpoint metrics for <code>AdminRespondToAuthChallenge</code> calls.",
                        "properties": {
                            "AnalyticsEndpointId": {
                                "description": "The endpoint ID.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "ChallengeName": {
                        "description": "The challenge name. For more information, see .",
                        "enum": [
                            "SMS_MFA",
                            "SOFTWARE_TOKEN_MFA",
                            "SELECT_MFA_TYPE",
                            "MFA_SETUP",
                            "PASSWORD_VERIFIER",
                            "CUSTOM_CHALLENGE",
                            "DEVICE_SRP_AUTH",
                            "DEVICE_PASSWORD_VERIFIER",
                            "ADMIN_NO_SRP_AUTH",
                            "NEW_PASSWORD_REQUIRED"
                        ],
                        "type": "string"
                    },
                    "ChallengeResponses": {
                        "description": "<p>The challenge responses. These are inputs corresponding to the value of <code>ChallengeName</code>, for example:</p> <ul> <li> <p> <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p> </li> <li> <p> <code>ADMIN_NO_SRP_AUTH</code>: <code>PASSWORD</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret). </p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret). </p> </li> </ul> <p>The value of the <code>USERNAME</code> attribute must be the user's actual username, not an alias (such as email address or phone number). To make this easier, the <code>AdminInitiateAuth</code> response includes the actual username value in the <code>USERNAMEUSER_ID_FOR_SRP</code> attribute, even if you specified an alias in your call to <code>AdminInitiateAuth</code>.</p>",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ClientId": {
                        "description": "The app client ID.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "ContextData": {
                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                        "properties": {
                            "EncodedData": {
                                "description": "Encoded data containing device fingerprinting details, collected using the Amazon Cognito context data collection library.",
                                "type": "string"
                            },
                            "HttpHeaders": {
                                "description": "HttpHeaders received on your server in same order.",
                                "items": {
                                    "description": "The HTTP header.",
                                    "properties": {
                                        "headerName": {
                                            "description": "The header name",
                                            "type": "string"
                                        },
                                        "headerValue": {
                                            "description": "The header value.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "IpAddress": {
                                "description": "Source IP address of your user.",
                                "type": "string"
                            },
                            "ServerName": {
                                "description": "Your server endpoint where this API is invoked.",
                                "type": "string"
                            },
                            "ServerPath": {
                                "description": "Your server path where this API is invoked. ",
                                "type": "string"
                            }
                        },
                        "required": [
                            "IpAddress",
                            "ServerName",
                            "ServerPath",
                            "HttpHeaders"
                        ],
                        "type": "object"
                    },
                    "Session": {
                        "description": "The session which should be passed both ways in challenge-response calls to the service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The ID of the Amazon Cognito user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "ClientId",
                    "ChallengeName"
                ],
                "type": "object"
            },
            "AdminRespondToAuthChallengeResponse": {
                "description": "Responds to the authentication challenge, as an administrator.",
                "properties": {
                    "AuthenticationResult": {
                        "description": "The result returned by the server in response to the authentication request.",
                        "properties": {
                            "AccessToken": {
                                "description": "The access token.",
                                "format": "password",
                                "pattern": "[A-Za-z0-9-_=.]+",
                                "type": "string"
                            },
                            "ExpiresIn": {
                                "description": "The expiration period of the authentication result in seconds.",
                                "type": "integer"
                            },
                            "IdToken": {
                                "description": "The ID token.",
                                "format": "password",
                                "pattern": "[A-Za-z0-9-_=.]+",
                                "type": "string"
                            },
                            "NewDeviceMetadata": {
                                "description": "The new device metadata from an authentication result.",
                                "properties": {
                                    "DeviceGroupKey": {
                                        "description": "The device group key.",
                                        "type": "string"
                                    },
                                    "DeviceKey": {
                                        "description": "The device key.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-f-]+",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "RefreshToken": {
                                "description": "The refresh token.",
                                "format": "password",
                                "pattern": "[A-Za-z0-9-_=.]+",
                                "type": "string"
                            },
                            "TokenType": {
                                "description": "The token type.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "ChallengeName": {
                        "description": "The name of the challenge. For more information, see .",
                        "enum": [
                            "SMS_MFA",
                            "SOFTWARE_TOKEN_MFA",
                            "SELECT_MFA_TYPE",
                            "MFA_SETUP",
                            "PASSWORD_VERIFIER",
                            "CUSTOM_CHALLENGE",
                            "DEVICE_SRP_AUTH",
                            "DEVICE_PASSWORD_VERIFIER",
                            "ADMIN_NO_SRP_AUTH",
                            "NEW_PASSWORD_REQUIRED"
                        ],
                        "type": "string"
                    },
                    "ChallengeParameters": {
                        "description": "The challenge parameters. For more information, see .",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "Session": {
                        "description": "The session which should be passed both ways in challenge-response calls to the service. If the or API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AdminSetUserMFAPreferenceRequest": {
                "properties": {
                    "SMSMfaSettings": {
                        "description": "The SMS text message MFA settings.",
                        "properties": {
                            "Enabled": {
                                "description": "Specifies whether SMS text message MFA is enabled.",
                                "type": "boolean"
                            },
                            "PreferredMfa": {
                                "description": "The preferred MFA method.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "SoftwareTokenMfaSettings": {
                        "description": "The time-based one-time password software token MFA settings.",
                        "properties": {
                            "Enabled": {
                                "description": "Specifies whether software token MFA is enabled.",
                                "type": "boolean"
                            },
                            "PreferredMfa": {
                                "description": "The preferred MFA method.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user pool username or alias.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "Username",
                    "UserPoolId"
                ],
                "type": "object"
            },
            "AdminSetUserMFAPreferenceResponse": {
                "properties": {},
                "type": "object"
            },
            "AdminSetUserSettingsRequest": {
                "description": "Represents the request to set user settings as an administrator.",
                "properties": {
                    "MFAOptions": {
                        "description": "Specifies the options for MFA (e.g., email or phone number).",
                        "items": {
                            "description": "Specifies the different settings for multi-factor authentication (MFA).",
                            "properties": {
                                "AttributeName": {
                                    "description": "The attribute name of the MFA option type.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "DeliveryMedium": {
                                    "description": "The delivery medium (email message or SMS message) to send the MFA code.",
                                    "enum": [
                                        "SMS",
                                        "EMAIL"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool where you want to set the user's settings, such as MFA options.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user name of the user for whom you wish to set user settings.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username",
                    "MFAOptions"
                ],
                "type": "object"
            },
            "AdminSetUserSettingsResponse": {
                "description": "Represents the response from the server to set user settings as an administrator.",
                "properties": {},
                "type": "object"
            },
            "AdminUpdateAuthEventFeedbackRequest": {
                "properties": {
                    "EventId": {
                        "description": "The authentication event ID.",
                        "maxLength": 50,
                        "minLength": 1,
                        "pattern": "[\\w+-]+",
                        "type": "string"
                    },
                    "FeedbackValue": {
                        "description": "The authentication event feedback value.",
                        "enum": [
                            "Valid",
                            "Invalid"
                        ],
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user pool username.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username",
                    "EventId",
                    "FeedbackValue"
                ],
                "type": "object"
            },
            "AdminUpdateAuthEventFeedbackResponse": {
                "properties": {},
                "type": "object"
            },
            "AdminUpdateDeviceStatusRequest": {
                "description": "The request to update the device status, as an administrator.",
                "properties": {
                    "DeviceKey": {
                        "description": "The device key.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-f-]+",
                        "type": "string"
                    },
                    "DeviceRememberedStatus": {
                        "description": "The status indicating whether a device has been remembered or not.",
                        "enum": [
                            "remembered",
                            "not_remembered"
                        ],
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user name.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username",
                    "DeviceKey"
                ],
                "type": "object"
            },
            "AdminUpdateDeviceStatusResponse": {
                "description": "The status response from the request to update the device, as an administrator.",
                "properties": {},
                "type": "object"
            },
            "AdminUpdateUserAttributesRequest": {
                "description": "Represents the request to update the user's attributes as an administrator.",
                "properties": {
                    "UserAttributes": {
                        "description": "<p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>",
                        "items": {
                            "description": "Specifies whether the attribute is standard or custom.",
                            "properties": {
                                "Name": {
                                    "description": "The name of the attribute.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "Value": {
                                    "description": "The value of the attribute.",
                                    "format": "password",
                                    "maxLength": 2048,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Name"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool where you want to update user attributes.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user name of the user for whom you want to update user attributes.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username",
                    "UserAttributes"
                ],
                "type": "object"
            },
            "AdminUpdateUserAttributesResponse": {
                "description": "Represents the response from the server for the request to update user attributes as an administrator.",
                "properties": {},
                "type": "object"
            },
            "AdminUserGlobalSignOutRequest": {
                "description": "The request to sign out of all devices, as an administrator.",
                "properties": {
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user name.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username"
                ],
                "type": "object"
            },
            "AdminUserGlobalSignOutResponse": {
                "description": "The global sign-out response, as an administrator.",
                "properties": {},
                "type": "object"
            },
            "AdvancedSecurityModeType": {
                "enum": [
                    "OFF",
                    "AUDIT",
                    "ENFORCED"
                ],
                "type": "string"
            },
            "AliasAttributeType": {
                "enum": [
                    "phone_number",
                    "email",
                    "preferred_username"
                ],
                "type": "string"
            },
            "AliasAttributesListType": {
                "items": {
                    "enum": [
                        "phone_number",
                        "email",
                        "preferred_username"
                    ],
                    "type": "string"
                },
                "type": "array"
            },
            "AliasExistsException": {},
            "AnalyticsConfigurationType": {
                "description": "The Amazon Pinpoint analytics configuration for collecting metrics for a user pool.",
                "properties": {
                    "ApplicationId": {
                        "description": "The application ID for an Amazon Pinpoint application.",
                        "pattern": "^[0-9a-fA-F]+$",
                        "type": "string"
                    },
                    "ExternalId": {
                        "description": "The external ID.",
                        "type": "string"
                    },
                    "RoleArn": {
                        "description": "The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    },
                    "UserDataShared": {
                        "description": "If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.",
                        "type": "boolean"
                    }
                },
                "required": [
                    "ApplicationId",
                    "RoleArn",
                    "ExternalId"
                ],
                "type": "object"
            },
            "AnalyticsMetadataType": {
                "description": "<p>An Amazon Pinpoint analytics endpoint.</p> <p>An endpoint uniquely identifies a mobile device, email address, or phone number that can receive messages from Amazon Pinpoint analytics.</p>",
                "properties": {
                    "AnalyticsEndpointId": {
                        "description": "The endpoint ID.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ArnType": {
                "maxLength": 2048,
                "minLength": 20,
                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                "type": "string"
            },
            "AssociateSoftwareTokenRequest": {
                "properties": {
                    "AccessToken": {
                        "description": "The access token.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    },
                    "Session": {
                        "description": "The session which should be passed both ways in challenge-response calls to the service. This allows authentication of the user as part of the MFA setup process.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AssociateSoftwareTokenResponse": {
                "properties": {
                    "SecretCode": {
                        "description": "A unique generated shared secret code that is used in the TOTP algorithm to generate a one time code.",
                        "format": "password",
                        "minLength": 16,
                        "pattern": "[A-Za-z0-9]+",
                        "type": "string"
                    },
                    "Session": {
                        "description": "The session which should be passed both ways in challenge-response calls to the service. This allows authentication of the user as part of the MFA setup process.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AttributeDataType": {
                "enum": [
                    "String",
                    "Number",
                    "DateTime",
                    "Boolean"
                ],
                "type": "string"
            },
            "AttributeListType": {
                "items": {
                    "description": "Specifies whether the attribute is standard or custom.",
                    "properties": {
                        "Name": {
                            "description": "The name of the attribute.",
                            "maxLength": 32,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "Value": {
                            "description": "The value of the attribute.",
                            "format": "password",
                            "maxLength": 2048,
                            "type": "string"
                        }
                    },
                    "required": [
                        "Name"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "AttributeMappingKeyType": {
                "maxLength": 32,
                "minLength": 1,
                "type": "string"
            },
            "AttributeMappingType": {
                "items": {
                    "properties": {
                        "key": {
                            "maxLength": 32,
                            "minLength": 1,
                            "type": "string"
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "AttributeNameListType": {
                "items": {
                    "maxLength": 32,
                    "minLength": 1,
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                    "type": "string"
                },
                "type": "array"
            },
            "AttributeNameType": {
                "maxLength": 32,
                "minLength": 1,
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "type": "string"
            },
            "AttributeType": {
                "description": "Specifies whether the attribute is standard or custom.",
                "properties": {
                    "Name": {
                        "description": "The name of the attribute.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "Value": {
                        "description": "The value of the attribute.",
                        "format": "password",
                        "maxLength": 2048,
                        "type": "string"
                    }
                },
                "required": [
                    "Name"
                ],
                "type": "object"
            },
            "AttributeValueType": {
                "format": "password",
                "maxLength": 2048,
                "type": "string"
            },
            "AuthEventType": {
                "description": "The authentication event type.",
                "properties": {
                    "ChallengeResponses": {
                        "description": "The challenge responses.",
                        "items": {
                            "description": "The challenge response type.",
                            "properties": {
                                "ChallengeName": {
                                    "description": "The challenge name",
                                    "enum": [
                                        "Password",
                                        "Mfa"
                                    ],
                                    "type": "string"
                                },
                                "ChallengeResponse": {
                                    "description": "The challenge response.",
                                    "enum": [
                                        "Success",
                                        "Failure"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "CreationDate": {
                        "description": "The creation date",
                        "format": "date-time",
                        "type": "string"
                    },
                    "EventContextData": {
                        "description": "The user context data captured at the time of an event request. It provides additional information about the client from which event the request is received.",
                        "properties": {
                            "City": {
                                "description": "The user's city.",
                                "type": "string"
                            },
                            "Country": {
                                "description": "The user's country.",
                                "type": "string"
                            },
                            "DeviceName": {
                                "description": "The user's device name.",
                                "type": "string"
                            },
                            "IpAddress": {
                                "description": "The user's IP address.",
                                "type": "string"
                            },
                            "Timezone": {
                                "description": "The user's time zone.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "EventFeedback": {
                        "description": "A flag specifying the user feedback captured at the time of an event request is good or bad. ",
                        "properties": {
                            "FeedbackDate": {
                                "description": "The event feedback date.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "FeedbackValue": {
                                "description": "The event feedback value.",
                                "enum": [
                                    "Valid",
                                    "Invalid"
                                ],
                                "type": "string"
                            },
                            "Provider": {
                                "description": "The provider.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "FeedbackValue",
                            "Provider"
                        ],
                        "type": "object"
                    },
                    "EventId": {
                        "description": "The event ID.",
                        "type": "string"
                    },
                    "EventResponse": {
                        "description": "The event response.",
                        "enum": [
                            "Success",
                            "Failure"
                        ],
                        "type": "string"
                    },
                    "EventRisk": {
                        "description": "The event risk.",
                        "properties": {
                            "RiskDecision": {
                                "description": "The risk decision.",
                                "enum": [
                                    "NoRisk",
                                    "AccountTakeover",
                                    "Block"
                                ],
                                "type": "string"
                            },
                            "RiskLevel": {
                                "description": "The risk level.",
                                "enum": [
                                    "Low",
                                    "Medium",
                                    "High"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "EventType": {
                        "description": "The event type.",
                        "enum": [
                            "SignIn",
                            "SignUp",
                            "ForgotPassword"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AuthEventsType": {
                "items": {
                    "description": "The authentication event type.",
                    "properties": {
                        "ChallengeResponses": {
                            "description": "The challenge responses.",
                            "items": {
                                "description": "The challenge response type.",
                                "properties": {
                                    "ChallengeName": {
                                        "description": "The challenge name",
                                        "enum": [
                                            "Password",
                                            "Mfa"
                                        ],
                                        "type": "string"
                                    },
                                    "ChallengeResponse": {
                                        "description": "The challenge response.",
                                        "enum": [
                                            "Success",
                                            "Failure"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "CreationDate": {
                            "description": "The creation date",
                            "format": "date-time",
                            "type": "string"
                        },
                        "EventContextData": {
                            "description": "The user context data captured at the time of an event request. It provides additional information about the client from which event the request is received.",
                            "properties": {
                                "City": {
                                    "description": "The user's city.",
                                    "type": "string"
                                },
                                "Country": {
                                    "description": "The user's country.",
                                    "type": "string"
                                },
                                "DeviceName": {
                                    "description": "The user's device name.",
                                    "type": "string"
                                },
                                "IpAddress": {
                                    "description": "The user's IP address.",
                                    "type": "string"
                                },
                                "Timezone": {
                                    "description": "The user's time zone.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "EventFeedback": {
                            "description": "A flag specifying the user feedback captured at the time of an event request is good or bad. ",
                            "properties": {
                                "FeedbackDate": {
                                    "description": "The event feedback date.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "FeedbackValue": {
                                    "description": "The event feedback value.",
                                    "enum": [
                                        "Valid",
                                        "Invalid"
                                    ],
                                    "type": "string"
                                },
                                "Provider": {
                                    "description": "The provider.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "FeedbackValue",
                                "Provider"
                            ],
                            "type": "object"
                        },
                        "EventId": {
                            "description": "The event ID.",
                            "type": "string"
                        },
                        "EventResponse": {
                            "description": "The event response.",
                            "enum": [
                                "Success",
                                "Failure"
                            ],
                            "type": "string"
                        },
                        "EventRisk": {
                            "description": "The event risk.",
                            "properties": {
                                "RiskDecision": {
                                    "description": "The risk decision.",
                                    "enum": [
                                        "NoRisk",
                                        "AccountTakeover",
                                        "Block"
                                    ],
                                    "type": "string"
                                },
                                "RiskLevel": {
                                    "description": "The risk level.",
                                    "enum": [
                                        "Low",
                                        "Medium",
                                        "High"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "EventType": {
                            "description": "The event type.",
                            "enum": [
                                "SignIn",
                                "SignUp",
                                "ForgotPassword"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "AuthFlowType": {
                "enum": [
                    "USER_SRP_AUTH",
                    "REFRESH_TOKEN_AUTH",
                    "REFRESH_TOKEN",
                    "CUSTOM_AUTH",
                    "ADMIN_NO_SRP_AUTH",
                    "USER_PASSWORD_AUTH"
                ],
                "type": "string"
            },
            "AuthParametersType": {
                "items": {
                    "properties": {
                        "key": {
                            "type": "string"
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "AuthenticationResultType": {
                "description": "The authentication result.",
                "properties": {
                    "AccessToken": {
                        "description": "The access token.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    },
                    "ExpiresIn": {
                        "description": "The expiration period of the authentication result in seconds.",
                        "type": "integer"
                    },
                    "IdToken": {
                        "description": "The ID token.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    },
                    "NewDeviceMetadata": {
                        "description": "The new device metadata from an authentication result.",
                        "properties": {
                            "DeviceGroupKey": {
                                "description": "The device group key.",
                                "type": "string"
                            },
                            "DeviceKey": {
                                "description": "The device key.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-f-]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "RefreshToken": {
                        "description": "The refresh token.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    },
                    "TokenType": {
                        "description": "The token type.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BlockedIPRangeListType": {
                "items": {
                    "type": "string"
                },
                "maxItems": 20,
                "type": "array"
            },
            "BooleanType": {
                "type": "boolean"
            },
            "CSSType": {
                "type": "string"
            },
            "CSSVersionType": {
                "type": "string"
            },
            "CallbackURLsListType": {
                "items": {
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                    "type": "string"
                },
                "maxItems": 100,
                "minItems": 0,
                "type": "array"
            },
            "ChallengeName": {
                "enum": [
                    "Password",
                    "Mfa"
                ],
                "type": "string"
            },
            "ChallengeNameType": {
                "enum": [
                    "SMS_MFA",
                    "SOFTWARE_TOKEN_MFA",
                    "SELECT_MFA_TYPE",
                    "MFA_SETUP",
                    "PASSWORD_VERIFIER",
                    "CUSTOM_CHALLENGE",
                    "DEVICE_SRP_AUTH",
                    "DEVICE_PASSWORD_VERIFIER",
                    "ADMIN_NO_SRP_AUTH",
                    "NEW_PASSWORD_REQUIRED"
                ],
                "type": "string"
            },
            "ChallengeParametersType": {
                "items": {
                    "properties": {
                        "key": {
                            "type": "string"
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ChallengeResponse": {
                "enum": [
                    "Success",
                    "Failure"
                ],
                "type": "string"
            },
            "ChallengeResponseListType": {
                "items": {
                    "description": "The challenge response type.",
                    "properties": {
                        "ChallengeName": {
                            "description": "The challenge name",
                            "enum": [
                                "Password",
                                "Mfa"
                            ],
                            "type": "string"
                        },
                        "ChallengeResponse": {
                            "description": "The challenge response.",
                            "enum": [
                                "Success",
                                "Failure"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ChallengeResponseType": {
                "description": "The challenge response type.",
                "properties": {
                    "ChallengeName": {
                        "description": "The challenge name",
                        "enum": [
                            "Password",
                            "Mfa"
                        ],
                        "type": "string"
                    },
                    "ChallengeResponse": {
                        "description": "The challenge response.",
                        "enum": [
                            "Success",
                            "Failure"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ChallengeResponsesType": {
                "items": {
                    "properties": {
                        "key": {
                            "type": "string"
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ChangePasswordRequest": {
                "description": "Represents the request to change a user password.",
                "properties": {
                    "AccessToken": {
                        "description": "The access token.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    },
                    "PreviousPassword": {
                        "description": "The old password.",
                        "format": "password",
                        "maxLength": 256,
                        "minLength": 6,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "ProposedPassword": {
                        "description": "The new password.",
                        "format": "password",
                        "maxLength": 256,
                        "minLength": 6,
                        "pattern": "[\\S]+",
                        "type": "string"
                    }
                },
                "required": [
                    "PreviousPassword",
                    "ProposedPassword",
                    "AccessToken"
                ],
                "type": "object"
            },
            "ChangePasswordResponse": {
                "description": "The response from the server to the change password request.",
                "properties": {},
                "type": "object"
            },
            "ClientIdType": {
                "format": "password",
                "maxLength": 128,
                "minLength": 1,
                "pattern": "[\\w+]+",
                "type": "string"
            },
            "ClientMetadataType": {
                "items": {
                    "properties": {
                        "key": {
                            "type": "string"
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ClientNameType": {
                "maxLength": 128,
                "minLength": 1,
                "pattern": "[\\w\\s+=,.@-]+",
                "type": "string"
            },
            "ClientPermissionListType": {
                "items": {
                    "maxLength": 2048,
                    "minLength": 1,
                    "type": "string"
                },
                "type": "array"
            },
            "ClientPermissionType": {
                "maxLength": 2048,
                "minLength": 1,
                "type": "string"
            },
            "ClientSecretType": {
                "format": "password",
                "maxLength": 64,
                "minLength": 1,
                "pattern": "[\\w+]+",
                "type": "string"
            },
            "CodeDeliveryDetailsListType": {
                "items": {
                    "description": "The code delivery details being returned from the server.",
                    "properties": {
                        "AttributeName": {
                            "description": "The attribute name.",
                            "maxLength": 32,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "DeliveryMedium": {
                            "description": "The delivery medium (email message or phone number).",
                            "enum": [
                                "SMS",
                                "EMAIL"
                            ],
                            "type": "string"
                        },
                        "Destination": {
                            "description": "The destination for the code delivery details.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "CodeDeliveryDetailsType": {
                "description": "The code delivery details being returned from the server.",
                "properties": {
                    "AttributeName": {
                        "description": "The attribute name.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "DeliveryMedium": {
                        "description": "The delivery medium (email message or phone number).",
                        "enum": [
                            "SMS",
                            "EMAIL"
                        ],
                        "type": "string"
                    },
                    "Destination": {
                        "description": "The destination for the code delivery details.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CodeDeliveryFailureException": {},
            "CodeMismatchException": {},
            "CompletionMessageType": {
                "maxLength": 128,
                "minLength": 1,
                "pattern": "[\\w]+",
                "type": "string"
            },
            "CompromisedCredentialsActionsType": {
                "description": "The compromised credentials actions type",
                "properties": {
                    "EventAction": {
                        "description": "The event action.",
                        "enum": [
                            "BLOCK",
                            "NO_ACTION"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "EventAction"
                ],
                "type": "object"
            },
            "CompromisedCredentialsEventActionType": {
                "enum": [
                    "BLOCK",
                    "NO_ACTION"
                ],
                "type": "string"
            },
            "CompromisedCredentialsRiskConfigurationType": {
                "description": "The compromised credentials risk configuration type.",
                "properties": {
                    "Actions": {
                        "description": "The compromised credentials risk configuration actions.",
                        "properties": {
                            "EventAction": {
                                "description": "The event action.",
                                "enum": [
                                    "BLOCK",
                                    "NO_ACTION"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "EventAction"
                        ],
                        "type": "object"
                    },
                    "EventFilter": {
                        "description": "Perform the action for these events. The default is to perform all events if no event filter is specified.",
                        "items": {
                            "enum": [
                                "SIGN_IN",
                                "PASSWORD_CHANGE",
                                "SIGN_UP"
                            ],
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "Actions"
                ],
                "type": "object"
            },
            "ConcurrentModificationException": {},
            "ConfirmDeviceRequest": {
                "description": "Confirms the device request.",
                "properties": {
                    "AccessToken": {
                        "description": "The access token.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    },
                    "DeviceKey": {
                        "description": "The device key.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-f-]+",
                        "type": "string"
                    },
                    "DeviceName": {
                        "description": "The device name.",
                        "maxLength": 1024,
                        "minLength": 1,
                        "type": "string"
                    },
                    "DeviceSecretVerifierConfig": {
                        "description": "The configuration of the device secret verifier.",
                        "properties": {
                            "PasswordVerifier": {
                                "description": "The password verifier.",
                                "type": "string"
                            },
                            "Salt": {
                                "description": "The salt.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "AccessToken",
                    "DeviceKey"
                ],
                "type": "object"
            },
            "ConfirmDeviceResponse": {
                "description": "Confirms the device response.",
                "properties": {
                    "UserConfirmationNecessary": {
                        "description": "Indicates whether the user confirmation is necessary to confirm the device response.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "ConfirmForgotPasswordRequest": {
                "description": "The request representing the confirmation for a password reset.",
                "properties": {
                    "AnalyticsMetadata": {
                        "description": "The Amazon Pinpoint analytics metadata for collecting metrics for <code>ConfirmForgotPassword</code> calls.",
                        "properties": {
                            "AnalyticsEndpointId": {
                                "description": "The endpoint ID.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "ClientId": {
                        "description": "The app client ID of the app associated with the user pool.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "ConfirmationCode": {
                        "description": "The confirmation code sent by a user's request to retrieve a forgotten password. For more information, see ",
                        "maxLength": 2048,
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "Password": {
                        "description": "The password sent by a user's request to retrieve a forgotten password.",
                        "format": "password",
                        "maxLength": 256,
                        "minLength": 6,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "SecretHash": {
                        "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+=/]+",
                        "type": "string"
                    },
                    "UserContextData": {
                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                        "properties": {
                            "EncodedData": {
                                "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "Username": {
                        "description": "The user name of the user for whom you want to enter a code to retrieve a forgotten password.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "ClientId",
                    "Username",
                    "ConfirmationCode",
                    "Password"
                ],
                "type": "object"
            },
            "ConfirmForgotPasswordResponse": {
                "description": "The response from the server that results from a user's request to retrieve a forgotten password.",
                "properties": {},
                "type": "object"
            },
            "ConfirmSignUpRequest": {
                "description": "Represents the request to confirm registration of a user.",
                "properties": {
                    "AnalyticsMetadata": {
                        "description": "The Amazon Pinpoint analytics metadata for collecting metrics for <code>ConfirmSignUp</code> calls.",
                        "properties": {
                            "AnalyticsEndpointId": {
                                "description": "The endpoint ID.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "ClientId": {
                        "description": "The ID of the app client associated with the user pool.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "ConfirmationCode": {
                        "description": "The confirmation code sent by a user's request to confirm registration.",
                        "maxLength": 2048,
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "ForceAliasCreation": {
                        "description": "Boolean to be specified to force user confirmation irrespective of existing alias. By default set to <code>False</code>. If this parameter is set to <code>True</code> and the phone number/email used for sign up confirmation already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user being confirmed. If set to <code>False</code>, the API will throw an <b>AliasExistsException</b> error.",
                        "type": "boolean"
                    },
                    "SecretHash": {
                        "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+=/]+",
                        "type": "string"
                    },
                    "UserContextData": {
                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                        "properties": {
                            "EncodedData": {
                                "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "Username": {
                        "description": "The user name of the user whose registration you wish to confirm.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "ClientId",
                    "Username",
                    "ConfirmationCode"
                ],
                "type": "object"
            },
            "ConfirmSignUpResponse": {
                "description": "Represents the response from the server for the registration confirmation.",
                "properties": {},
                "type": "object"
            },
            "ConfirmationCodeType": {
                "maxLength": 2048,
                "minLength": 1,
                "pattern": "[\\S]+",
                "type": "string"
            },
            "ContextDataType": {
                "description": "Contextual user data type used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                "properties": {
                    "EncodedData": {
                        "description": "Encoded data containing device fingerprinting details, collected using the Amazon Cognito context data collection library.",
                        "type": "string"
                    },
                    "HttpHeaders": {
                        "description": "HttpHeaders received on your server in same order.",
                        "items": {
                            "description": "The HTTP header.",
                            "properties": {
                                "headerName": {
                                    "description": "The header name",
                                    "type": "string"
                                },
                                "headerValue": {
                                    "description": "The header value.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "IpAddress": {
                        "description": "Source IP address of your user.",
                        "type": "string"
                    },
                    "ServerName": {
                        "description": "Your server endpoint where this API is invoked.",
                        "type": "string"
                    },
                    "ServerPath": {
                        "description": "Your server path where this API is invoked. ",
                        "type": "string"
                    }
                },
                "required": [
                    "IpAddress",
                    "ServerName",
                    "ServerPath",
                    "HttpHeaders"
                ],
                "type": "object"
            },
            "CreateGroupRequest": {
                "properties": {
                    "Description": {
                        "description": "A string containing the description of the group.",
                        "maxLength": 2048,
                        "type": "string"
                    },
                    "GroupName": {
                        "description": "The name of the group. Must be unique.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "Precedence": {
                        "description": "<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower <code>Precedence</code> values take precedence over groups with higher or null <code>Precedence</code> values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user's tokens.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "RoleArn": {
                        "description": "The role ARN for the group.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "GroupName",
                    "UserPoolId"
                ],
                "type": "object"
            },
            "CreateGroupResponse": {
                "properties": {
                    "Group": {
                        "description": "The group object for the group.",
                        "properties": {
                            "CreationDate": {
                                "description": "The date the group was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "Description": {
                                "description": "A string containing the description of the group.",
                                "maxLength": 2048,
                                "type": "string"
                            },
                            "GroupName": {
                                "description": "The name of the group.",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            },
                            "LastModifiedDate": {
                                "description": "The date the group was last modified.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "Precedence": {
                                "description": "<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user's tokens. Groups with higher <code>Precedence</code> values take precedence over groups with lower <code>Precedence</code> values or with null <code>Precedence</code> values.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>",
                                "minimum": 0,
                                "type": "integer"
                            },
                            "RoleArn": {
                                "description": "The role ARN for the group.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID for the user pool.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "CreateIdentityProviderRequest": {
                "properties": {
                    "AttributeMapping": {
                        "description": "A mapping of identity provider attributes to standard and custom user pool attributes.",
                        "items": {
                            "properties": {
                                "key": {
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "IdpIdentifiers": {
                        "description": "A list of identity provider identifiers.",
                        "items": {
                            "maxLength": 40,
                            "minLength": 1,
                            "pattern": "[\\w\\s+=.@-]+",
                            "type": "string"
                        },
                        "maxItems": 50,
                        "minItems": 0,
                        "type": "array"
                    },
                    "ProviderDetails": {
                        "description": "The identity provider details, such as <code>MetadataURL</code> and <code>MetadataFile</code>.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ProviderName": {
                        "description": "The identity provider name.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "[^_][\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}][^_]+",
                        "type": "string"
                    },
                    "ProviderType": {
                        "description": "The identity provider type.",
                        "enum": [
                            "SAML",
                            "Facebook",
                            "Google",
                            "LoginWithAmazon",
                            "OIDC"
                        ],
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "ProviderName",
                    "ProviderType",
                    "ProviderDetails"
                ],
                "type": "object"
            },
            "CreateIdentityProviderResponse": {
                "properties": {
                    "IdentityProvider": {
                        "description": "The newly created identity provider object.",
                        "properties": {
                            "AttributeMapping": {
                                "description": "A mapping of identity provider attributes to standard and custom user pool attributes.",
                                "items": {
                                    "properties": {
                                        "key": {
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "CreationDate": {
                                "description": "The date the identity provider was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "IdpIdentifiers": {
                                "description": "A list of identity provider identifiers.",
                                "items": {
                                    "maxLength": 40,
                                    "minLength": 1,
                                    "pattern": "[\\w\\s+=.@-]+",
                                    "type": "string"
                                },
                                "maxItems": 50,
                                "minItems": 0,
                                "type": "array"
                            },
                            "LastModifiedDate": {
                                "description": "The date the identity provider was last modified.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "ProviderDetails": {
                                "description": "The identity provider details, such as <code>MetadataURL</code> and <code>MetadataFile</code>.",
                                "items": {
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "ProviderName": {
                                "description": "The identity provider name.",
                                "maxLength": 32,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            },
                            "ProviderType": {
                                "description": "The identity provider type.",
                                "enum": [
                                    "SAML",
                                    "Facebook",
                                    "Google",
                                    "LoginWithAmazon",
                                    "OIDC"
                                ],
                                "type": "string"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "IdentityProvider"
                ],
                "type": "object"
            },
            "CreateResourceServerRequest": {
                "properties": {
                    "Identifier": {
                        "description": "A unique resource server identifier for the resource server. This could be an HTTPS endpoint where the resource server is located. For example, <code>https://my-weather-api.example.com</code>.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                        "type": "string"
                    },
                    "Name": {
                        "description": "A friendly name for the resource server.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "[\\w\\s+=,.@-]+",
                        "type": "string"
                    },
                    "Scopes": {
                        "description": "A list of scopes. Each scope is map, where the keys are <code>name</code> and <code>description</code>.",
                        "items": {
                            "description": "A resource server scope.",
                            "properties": {
                                "ScopeDescription": {
                                    "description": "A description of the scope.",
                                    "maxLength": 256,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "ScopeName": {
                                    "description": "The name of the scope.",
                                    "maxLength": 256,
                                    "minLength": 1,
                                    "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ScopeName",
                                "ScopeDescription"
                            ],
                            "type": "object"
                        },
                        "maxItems": 25,
                        "type": "array"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Identifier",
                    "Name"
                ],
                "type": "object"
            },
            "CreateResourceServerResponse": {
                "properties": {
                    "ResourceServer": {
                        "description": "The newly created resource server.",
                        "properties": {
                            "Identifier": {
                                "description": "The identifier for the resource server.",
                                "maxLength": 256,
                                "minLength": 1,
                                "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                "type": "string"
                            },
                            "Name": {
                                "description": "The name of the resource server.",
                                "maxLength": 256,
                                "minLength": 1,
                                "pattern": "[\\w\\s+=,.@-]+",
                                "type": "string"
                            },
                            "Scopes": {
                                "description": "A list of scopes that are defined for the resource server.",
                                "items": {
                                    "description": "A resource server scope.",
                                    "properties": {
                                        "ScopeDescription": {
                                            "description": "A description of the scope.",
                                            "maxLength": 256,
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "ScopeName": {
                                            "description": "The name of the scope.",
                                            "maxLength": 256,
                                            "minLength": 1,
                                            "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "ScopeName",
                                        "ScopeDescription"
                                    ],
                                    "type": "object"
                                },
                                "maxItems": 25,
                                "type": "array"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID for the user pool that hosts the resource server.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "ResourceServer"
                ],
                "type": "object"
            },
            "CreateUserImportJobRequest": {
                "description": "Represents the request to create the user import job.",
                "properties": {
                    "CloudWatchLogsRoleArn": {
                        "description": "The role ARN for the Amazon CloudWatch Logging role for the user import job.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    },
                    "JobName": {
                        "description": "The job name for the user import job.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w\\s+=,.@-]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool that the users are being imported into.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "JobName",
                    "UserPoolId",
                    "CloudWatchLogsRoleArn"
                ],
                "type": "object"
            },
            "CreateUserImportJobResponse": {
                "description": "Represents the response from the server to the request to create the user import job.",
                "properties": {
                    "UserImportJob": {
                        "description": "The job object that represents the user import job.",
                        "properties": {
                            "CloudWatchLogsRoleArn": {
                                "description": "The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito Developer Guide.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "CompletionDate": {
                                "description": "The date when the user import job was completed.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "CompletionMessage": {
                                "description": "The message returned when the user import job is completed.",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w]+",
                                "type": "string"
                            },
                            "CreationDate": {
                                "description": "The date the user import job was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "FailedUsers": {
                                "description": "The number of users that could not be imported.",
                                "type": "integer"
                            },
                            "ImportedUsers": {
                                "description": "The number of users that were successfully imported.",
                                "type": "integer"
                            },
                            "JobId": {
                                "description": "The job ID for the user import job.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "import-[0-9a-zA-Z-]+",
                                "type": "string"
                            },
                            "JobName": {
                                "description": "The job name for the user import job.",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w\\s+=,.@-]+",
                                "type": "string"
                            },
                            "PreSignedUrl": {
                                "description": "The pre-signed URL to be used to upload the <code>.csv</code> file.",
                                "maxLength": 2048,
                                "minLength": 0,
                                "type": "string"
                            },
                            "SkippedUsers": {
                                "description": "The number of users that were skipped.",
                                "type": "integer"
                            },
                            "StartDate": {
                                "description": "The date when the user import job was started.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "Status": {
                                "description": "<p>The status of the user import job. One of the following:</p> <ul> <li> <p> <code>Created</code> - The job was created but not started.</p> </li> <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li> <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li> <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li> <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li> <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li> <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li> <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.</p> </li> </ul>",
                                "enum": [
                                    "Created",
                                    "Pending",
                                    "InProgress",
                                    "Stopping",
                                    "Expired",
                                    "Stopped",
                                    "Failed",
                                    "Succeeded"
                                ],
                                "type": "string"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID for the user pool that the users are being imported into.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "CreateUserPoolClientRequest": {
                "description": "Represents the request to create a user pool client.",
                "properties": {
                    "AllowedOAuthFlows": {
                        "description": "<p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>token</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>",
                        "items": {
                            "enum": [
                                "code",
                                "implicit",
                                "client_credentials"
                            ],
                            "type": "string"
                        },
                        "maxItems": 3,
                        "minItems": 0,
                        "type": "array"
                    },
                    "AllowedOAuthFlowsUserPoolClient": {
                        "description": "Set to <code>True</code> if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.",
                        "type": "boolean"
                    },
                    "AllowedOAuthScopes": {
                        "description": "A list of allowed <code>OAuth</code> scopes. Currently supported values are <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and <code>\"Cognito\"</code>.",
                        "items": {
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                            "type": "string"
                        },
                        "maxItems": 25,
                        "type": "array"
                    },
                    "AnalyticsConfiguration": {
                        "description": "The Amazon Pinpoint analytics configuration for collecting metrics for this user pool.",
                        "properties": {
                            "ApplicationId": {
                                "description": "The application ID for an Amazon Pinpoint application.",
                                "pattern": "^[0-9a-fA-F]+$",
                                "type": "string"
                            },
                            "ExternalId": {
                                "description": "The external ID.",
                                "type": "string"
                            },
                            "RoleArn": {
                                "description": "The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "UserDataShared": {
                                "description": "If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "ApplicationId",
                            "RoleArn",
                            "ExternalId"
                        ],
                        "type": "object"
                    },
                    "CallbackURLs": {
                        "description": "<p>A list of allowed redirect (callback) URLs for the identity providers.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                        "items": {
                            "maxLength": 1024,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "maxItems": 100,
                        "minItems": 0,
                        "type": "array"
                    },
                    "ClientName": {
                        "description": "The client name for the user pool client you would like to create.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w\\s+=,.@-]+",
                        "type": "string"
                    },
                    "DefaultRedirectURI": {
                        "description": "<p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                        "maxLength": 1024,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "ExplicitAuthFlows": {
                        "description": "The explicit authentication flows.",
                        "items": {
                            "enum": [
                                "ADMIN_NO_SRP_AUTH",
                                "CUSTOM_AUTH_FLOW_ONLY",
                                "USER_PASSWORD_AUTH"
                            ],
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "GenerateSecret": {
                        "description": "Boolean to specify whether you want to generate a secret for the user pool client being created.",
                        "type": "boolean"
                    },
                    "LogoutURLs": {
                        "description": "A list of allowed logout URLs for the identity providers.",
                        "items": {
                            "maxLength": 1024,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "maxItems": 100,
                        "minItems": 0,
                        "type": "array"
                    },
                    "ReadAttributes": {
                        "description": "The read attributes.",
                        "items": {
                            "maxLength": 2048,
                            "minLength": 1,
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "RefreshTokenValidity": {
                        "description": "The time limit, in days, after which the refresh token is no longer valid and cannot be used.",
                        "maximum": 3650,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "SupportedIdentityProviders": {
                        "description": "A list of provider names for the identity providers that are supported on this client.",
                        "items": {
                            "maxLength": 32,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool where you want to create a user pool client.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "WriteAttributes": {
                        "description": "<p>The user pool attributes that the app client can write to.</p> <p>If your app client allows users to sign in through an identity provider, this array must include all attributes that are mapped to identity provider attributes. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If your app client lacks write access to a mapped attribute, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html\">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>",
                        "items": {
                            "maxLength": 2048,
                            "minLength": 1,
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "UserPoolId",
                    "ClientName"
                ],
                "type": "object"
            },
            "CreateUserPoolClientResponse": {
                "description": "Represents the response from the server to create a user pool client.",
                "properties": {
                    "UserPoolClient": {
                        "description": "The user pool client that was just created.",
                        "properties": {
                            "AllowedOAuthFlows": {
                                "description": "<p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>token</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>",
                                "items": {
                                    "enum": [
                                        "code",
                                        "implicit",
                                        "client_credentials"
                                    ],
                                    "type": "string"
                                },
                                "maxItems": 3,
                                "minItems": 0,
                                "type": "array"
                            },
                            "AllowedOAuthFlowsUserPoolClient": {
                                "description": "Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.",
                                "type": "boolean"
                            },
                            "AllowedOAuthScopes": {
                                "description": "A list of allowed <code>OAuth</code> scopes. Currently supported values are <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and <code>\"Cognito\"</code>.",
                                "items": {
                                    "maxLength": 256,
                                    "minLength": 1,
                                    "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                    "type": "string"
                                },
                                "maxItems": 25,
                                "type": "array"
                            },
                            "AnalyticsConfiguration": {
                                "description": "The Amazon Pinpoint analytics configuration for the user pool client.",
                                "properties": {
                                    "ApplicationId": {
                                        "description": "The application ID for an Amazon Pinpoint application.",
                                        "pattern": "^[0-9a-fA-F]+$",
                                        "type": "string"
                                    },
                                    "ExternalId": {
                                        "description": "The external ID.",
                                        "type": "string"
                                    },
                                    "RoleArn": {
                                        "description": "The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "UserDataShared": {
                                        "description": "If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "ApplicationId",
                                    "RoleArn",
                                    "ExternalId"
                                ],
                                "type": "object"
                            },
                            "CallbackURLs": {
                                "description": "<p>A list of allowed redirect (callback) URLs for the identity providers.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                                "items": {
                                    "maxLength": 1024,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "maxItems": 100,
                                "minItems": 0,
                                "type": "array"
                            },
                            "ClientId": {
                                "description": "The ID of the client associated with the user pool.",
                                "format": "password",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w+]+",
                                "type": "string"
                            },
                            "ClientName": {
                                "description": "The client name from the user pool request of the client type.",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w\\s+=,.@-]+",
                                "type": "string"
                            },
                            "ClientSecret": {
                                "description": "The client secret from the user pool request of the client type.",
                                "format": "password",
                                "maxLength": 64,
                                "minLength": 1,
                                "pattern": "[\\w+]+",
                                "type": "string"
                            },
                            "CreationDate": {
                                "description": "The date the user pool client was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "DefaultRedirectURI": {
                                "description": "<p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                                "maxLength": 1024,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            },
                            "ExplicitAuthFlows": {
                                "description": "The explicit authentication flows.",
                                "items": {
                                    "enum": [
                                        "ADMIN_NO_SRP_AUTH",
                                        "CUSTOM_AUTH_FLOW_ONLY",
                                        "USER_PASSWORD_AUTH"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "LastModifiedDate": {
                                "description": "The date the user pool client was last modified.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "LogoutURLs": {
                                "description": "A list of allowed logout URLs for the identity providers.",
                                "items": {
                                    "maxLength": 1024,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "maxItems": 100,
                                "minItems": 0,
                                "type": "array"
                            },
                            "ReadAttributes": {
                                "description": "The Read-only attributes.",
                                "items": {
                                    "maxLength": 2048,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "RefreshTokenValidity": {
                                "description": "The time limit, in days, after which the refresh token is no longer valid and cannot be used.",
                                "maximum": 3650,
                                "minimum": 0,
                                "type": "integer"
                            },
                            "SupportedIdentityProviders": {
                                "description": "A list of provider names for the identity providers that are supported on this client.",
                                "items": {
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID for the user pool client.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            },
                            "WriteAttributes": {
                                "description": "The writeable attributes.",
                                "items": {
                                    "maxLength": 2048,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "CreateUserPoolDomainRequest": {
                "properties": {
                    "CustomDomainConfig": {
                        "description": "<p>The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.</p> <p>Provide this parameter only if you want to use a custom domain for your user pool. Otherwise, you can exclude this parameter and use the Amazon Cognito hosted domain instead.</p> <p>For more information about the hosted domain and custom domains, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-assign-domain.html\">Configuring a User Pool Domain</a>.</p>",
                        "properties": {
                            "CertificateArn": {
                                "description": "The Amazon Resource Name (ARN) of an AWS Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "CertificateArn"
                        ],
                        "type": "object"
                    },
                    "Domain": {
                        "description": "The domain string.",
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "Domain",
                    "UserPoolId"
                ],
                "type": "object"
            },
            "CreateUserPoolDomainResponse": {
                "properties": {
                    "CloudFrontDomain": {
                        "description": "The Amazon CloudFront endpoint that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider.",
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CreateUserPoolRequest": {
                "description": "Represents the request to create a user pool.",
                "properties": {
                    "AdminCreateUserConfig": {
                        "description": "The configuration for <code>AdminCreateUser</code> requests.",
                        "properties": {
                            "AllowAdminCreateUserOnly": {
                                "description": "Set to <code>True</code> if only the administrator is allowed to create user profiles. Set to <code>False</code> if users can sign themselves up via an app.",
                                "type": "boolean"
                            },
                            "InviteMessageTemplate": {
                                "description": "<p>The message template to be used for the welcome message to new users.</p> <p>See also <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization\">Customizing User Invitation Messages</a>.</p>",
                                "properties": {
                                    "EmailMessage": {
                                        "description": "The message template for email messages.",
                                        "maxLength": 20000,
                                        "minLength": 6,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                        "type": "string"
                                    },
                                    "EmailSubject": {
                                        "description": "The subject line for email messages.",
                                        "maxLength": 140,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                        "type": "string"
                                    },
                                    "SMSMessage": {
                                        "description": "The message template for SMS messages.",
                                        "maxLength": 140,
                                        "minLength": 6,
                                        "pattern": ".*\\{####\\}.*",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "UnusedAccountValidityDays": {
                                "description": "The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the <code>MessageAction</code> parameter. The default value for this parameter is 7.",
                                "maximum": 365,
                                "minimum": 0,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "AliasAttributes": {
                        "description": "Attributes supported as an alias for this user pool. Possible values: <b>phone_number</b>, <b>email</b>, or <b>preferred_username</b>.",
                        "items": {
                            "enum": [
                                "phone_number",
                                "email",
                                "preferred_username"
                            ],
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "AutoVerifiedAttributes": {
                        "description": "The attributes to be auto-verified. Possible values: <b>email</b>, <b>phone_number</b>.",
                        "items": {
                            "enum": [
                                "phone_number",
                                "email"
                            ],
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "DeviceConfiguration": {
                        "description": "The device configuration.",
                        "properties": {
                            "ChallengeRequiredOnNewDevice": {
                                "description": "Indicates whether a challenge is required on a new device. Only applicable to a new device.",
                                "type": "boolean"
                            },
                            "DeviceOnlyRememberedOnUserPrompt": {
                                "description": "If true, a device is only remembered on user prompt.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "EmailConfiguration": {
                        "description": "The email configuration.",
                        "properties": {
                            "ReplyToEmailAddress": {
                                "description": "The destination to which the receiver of the email should reply to.",
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            },
                            "SourceArn": {
                                "description": "The Amazon Resource Name (ARN) of the email source.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "EmailVerificationMessage": {
                        "description": "A string representing the email verification message.",
                        "maxLength": 20000,
                        "minLength": 6,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                        "type": "string"
                    },
                    "EmailVerificationSubject": {
                        "description": "A string representing the email verification subject.",
                        "maxLength": 140,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                        "type": "string"
                    },
                    "LambdaConfig": {
                        "description": "<p>The Lambda trigger configuration information for the new user pool.</p> <note> <p>In a push model, event sources (such as Amazon S3 and custom applications) need permission to invoke a function. So you will need to make an extra call to add permission for these event sources to invoke your Lambda function.</p> <p/> <p>For more information on using the Lambda API to add permission, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/API_AddPermission.html\"> AddPermission </a>. </p> <p>For adding permission using the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/reference/lambda/add-permission.html\"> add-permission </a>.</p> </note>",
                        "properties": {
                            "CreateAuthChallenge": {
                                "description": "Creates an authentication challenge.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "CustomMessage": {
                                "description": "A custom Message AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "DefineAuthChallenge": {
                                "description": "Defines the authentication challenge.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PostAuthentication": {
                                "description": "A post-authentication AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PostConfirmation": {
                                "description": "A post-confirmation AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PreAuthentication": {
                                "description": "A pre-authentication AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PreSignUp": {
                                "description": "A pre-registration AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PreTokenGeneration": {
                                "description": "A Lambda trigger that is invoked before token generation.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "UserMigration": {
                                "description": "The user migration Lambda config type.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "VerifyAuthChallengeResponse": {
                                "description": "Verifies the authentication challenge response.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "MfaConfiguration": {
                        "description": "Specifies MFA configuration details.",
                        "enum": [
                            "OFF",
                            "ON",
                            "OPTIONAL"
                        ],
                        "type": "string"
                    },
                    "Policies": {
                        "description": "The policies associated with the new user pool.",
                        "properties": {
                            "PasswordPolicy": {
                                "description": "The password policy.",
                                "properties": {
                                    "MinimumLength": {
                                        "description": "The minimum length of the password policy that you have set. Cannot be less than 6.",
                                        "maximum": 99,
                                        "minimum": 6,
                                        "type": "integer"
                                    },
                                    "RequireLowercase": {
                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.",
                                        "type": "boolean"
                                    },
                                    "RequireNumbers": {
                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one number in their password.",
                                        "type": "boolean"
                                    },
                                    "RequireSymbols": {
                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.",
                                        "type": "boolean"
                                    },
                                    "RequireUppercase": {
                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "PoolName": {
                        "description": "A string used to name the user pool.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w\\s+=,.@-]+",
                        "type": "string"
                    },
                    "Schema": {
                        "description": "An array of schema attributes for the new user pool. These attributes can be standard or custom attributes.",
                        "items": {
                            "description": "Contains information about the schema attribute.",
                            "properties": {
                                "AttributeDataType": {
                                    "description": "The attribute data type.",
                                    "enum": [
                                        "String",
                                        "Number",
                                        "DateTime",
                                        "Boolean"
                                    ],
                                    "type": "string"
                                },
                                "DeveloperOnlyAttribute": {
                                    "description": "Specifies whether the attribute type is developer only.",
                                    "type": "boolean"
                                },
                                "Mutable": {
                                    "description": "<p>Specifies whether the value of the attribute can be changed.</p> <p>For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html\">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>",
                                    "type": "boolean"
                                },
                                "Name": {
                                    "description": "A schema attribute of the name type.",
                                    "maxLength": 20,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "NumberAttributeConstraints": {
                                    "description": "Specifies the constraints for an attribute of the number type.",
                                    "properties": {
                                        "MaxValue": {
                                            "description": "The maximum value of an attribute that is of the number data type.",
                                            "type": "string"
                                        },
                                        "MinValue": {
                                            "description": "The minimum value of an attribute that is of the number data type.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "Required": {
                                    "description": "Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.",
                                    "type": "boolean"
                                },
                                "StringAttributeConstraints": {
                                    "description": "Specifies the constraints for an attribute of the string type.",
                                    "properties": {
                                        "MaxLength": {
                                            "description": "The maximum length.",
                                            "type": "string"
                                        },
                                        "MinLength": {
                                            "description": "The minimum length.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "maxItems": 50,
                        "minItems": 1,
                        "type": "array"
                    },
                    "SmsAuthenticationMessage": {
                        "description": "A string representing the SMS authentication message.",
                        "maxLength": 140,
                        "minLength": 6,
                        "pattern": ".*\\{####\\}.*",
                        "type": "string"
                    },
                    "SmsConfiguration": {
                        "description": "The SMS configuration.",
                        "properties": {
                            "ExternalId": {
                                "description": "The external ID.",
                                "type": "string"
                            },
                            "SnsCallerArn": {
                                "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "SnsCallerArn"
                        ],
                        "type": "object"
                    },
                    "SmsVerificationMessage": {
                        "description": "A string representing the SMS verification message.",
                        "maxLength": 140,
                        "minLength": 6,
                        "pattern": ".*\\{####\\}.*",
                        "type": "string"
                    },
                    "UserPoolAddOns": {
                        "description": "Used to enable advanced security risk detection. Set the key <code>AdvancedSecurityMode</code> to the value \"AUDIT\".",
                        "properties": {
                            "AdvancedSecurityMode": {
                                "description": "The advanced security mode.",
                                "enum": [
                                    "OFF",
                                    "AUDIT",
                                    "ENFORCED"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "AdvancedSecurityMode"
                        ],
                        "type": "object"
                    },
                    "UserPoolTags": {
                        "description": "The cost allocation tags for the user pool. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</a> ",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "UsernameAttributes": {
                        "description": "Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.",
                        "items": {
                            "enum": [
                                "phone_number",
                                "email"
                            ],
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "VerificationMessageTemplate": {
                        "description": "The template for the verification message that the user sees when the app requests permission to access the user's information.",
                        "properties": {
                            "DefaultEmailOption": {
                                "description": "The default email option.",
                                "enum": [
                                    "CONFIRM_WITH_LINK",
                                    "CONFIRM_WITH_CODE"
                                ],
                                "type": "string"
                            },
                            "EmailMessage": {
                                "description": "The email message template.",
                                "maxLength": 20000,
                                "minLength": 6,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                "type": "string"
                            },
                            "EmailMessageByLink": {
                                "description": "The email message template for sending a confirmation link to the user.",
                                "maxLength": 20000,
                                "minLength": 6,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{##[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*##\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                "type": "string"
                            },
                            "EmailSubject": {
                                "description": "The subject line for the email message template.",
                                "maxLength": 140,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                "type": "string"
                            },
                            "EmailSubjectByLink": {
                                "description": "The subject line for the email message template for sending a confirmation link to the user.",
                                "maxLength": 140,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                "type": "string"
                            },
                            "SmsMessage": {
                                "description": "The SMS message template.",
                                "maxLength": 140,
                                "minLength": 6,
                                "pattern": ".*\\{####\\}.*",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "PoolName"
                ],
                "type": "object"
            },
            "CreateUserPoolResponse": {
                "description": "Represents the response from the server for the request to create a user pool.",
                "properties": {
                    "UserPool": {
                        "description": "A container for the user pool details.",
                        "properties": {
                            "AdminCreateUserConfig": {
                                "description": "The configuration for <code>AdminCreateUser</code> requests.",
                                "properties": {
                                    "AllowAdminCreateUserOnly": {
                                        "description": "Set to <code>True</code> if only the administrator is allowed to create user profiles. Set to <code>False</code> if users can sign themselves up via an app.",
                                        "type": "boolean"
                                    },
                                    "InviteMessageTemplate": {
                                        "description": "<p>The message template to be used for the welcome message to new users.</p> <p>See also <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization\">Customizing User Invitation Messages</a>.</p>",
                                        "properties": {
                                            "EmailMessage": {
                                                "description": "The message template for email messages.",
                                                "maxLength": 20000,
                                                "minLength": 6,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                                "type": "string"
                                            },
                                            "EmailSubject": {
                                                "description": "The subject line for email messages.",
                                                "maxLength": 140,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                "type": "string"
                                            },
                                            "SMSMessage": {
                                                "description": "The message template for SMS messages.",
                                                "maxLength": 140,
                                                "minLength": 6,
                                                "pattern": ".*\\{####\\}.*",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "UnusedAccountValidityDays": {
                                        "description": "The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the <code>MessageAction</code> parameter. The default value for this parameter is 7.",
                                        "maximum": 365,
                                        "minimum": 0,
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "AliasAttributes": {
                                "description": "Specifies the attributes that are aliased in a user pool.",
                                "items": {
                                    "enum": [
                                        "phone_number",
                                        "email",
                                        "preferred_username"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "Arn": {
                                "description": "The Amazon Resource Name (ARN) for the user pool.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "AutoVerifiedAttributes": {
                                "description": "Specifies the attributes that are auto-verified in a user pool.",
                                "items": {
                                    "enum": [
                                        "phone_number",
                                        "email"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "CreationDate": {
                                "description": "The date the user pool was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "CustomDomain": {
                                "maxLength": 63,
                                "minLength": 1,
                                "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                                "type": "string"
                            },
                            "DeviceConfiguration": {
                                "description": "The device configuration.",
                                "properties": {
                                    "ChallengeRequiredOnNewDevice": {
                                        "description": "Indicates whether a challenge is required on a new device. Only applicable to a new device.",
                                        "type": "boolean"
                                    },
                                    "DeviceOnlyRememberedOnUserPrompt": {
                                        "description": "If true, a device is only remembered on user prompt.",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            },
                            "Domain": {
                                "description": "Holds the domain prefix if the user pool has a domain associated with it.",
                                "maxLength": 63,
                                "minLength": 1,
                                "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                                "type": "string"
                            },
                            "EmailConfiguration": {
                                "description": "The email configuration.",
                                "properties": {
                                    "ReplyToEmailAddress": {
                                        "description": "The destination to which the receiver of the email should reply to.",
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "SourceArn": {
                                        "description": "The Amazon Resource Name (ARN) of the email source.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "EmailConfigurationFailure": {
                                "description": "The reason why the email configuration cannot send the messages to your users.",
                                "type": "string"
                            },
                            "EmailVerificationMessage": {
                                "description": "The contents of the email verification message.",
                                "maxLength": 20000,
                                "minLength": 6,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                "type": "string"
                            },
                            "EmailVerificationSubject": {
                                "description": "The subject of the email verification message.",
                                "maxLength": 140,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                "type": "string"
                            },
                            "EstimatedNumberOfUsers": {
                                "description": "A number estimating the size of the user pool.",
                                "type": "integer"
                            },
                            "Id": {
                                "description": "The ID of the user pool.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            },
                            "LambdaConfig": {
                                "description": "The AWS Lambda triggers associated with the user pool.",
                                "properties": {
                                    "CreateAuthChallenge": {
                                        "description": "Creates an authentication challenge.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "CustomMessage": {
                                        "description": "A custom Message AWS Lambda trigger.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "DefineAuthChallenge": {
                                        "description": "Defines the authentication challenge.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "PostAuthentication": {
                                        "description": "A post-authentication AWS Lambda trigger.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "PostConfirmation": {
                                        "description": "A post-confirmation AWS Lambda trigger.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "PreAuthentication": {
                                        "description": "A pre-authentication AWS Lambda trigger.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "PreSignUp": {
                                        "description": "A pre-registration AWS Lambda trigger.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "PreTokenGeneration": {
                                        "description": "A Lambda trigger that is invoked before token generation.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "UserMigration": {
                                        "description": "The user migration Lambda config type.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "VerifyAuthChallengeResponse": {
                                        "description": "Verifies the authentication challenge response.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "LastModifiedDate": {
                                "description": "The date the user pool was last modified.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "MfaConfiguration": {
                                "description": "<p>Can be one of the following values:</p> <ul> <li> <p> <code>OFF</code> - MFA tokens are not required and cannot be specified during user registration.</p> </li> <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.</p> </li> <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li> </ul>",
                                "enum": [
                                    "OFF",
                                    "ON",
                                    "OPTIONAL"
                                ],
                                "type": "string"
                            },
                            "Name": {
                                "description": "The name of the user pool.",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w\\s+=,.@-]+",
                                "type": "string"
                            },
                            "Policies": {
                                "description": "The policies associated with the user pool.",
                                "properties": {
                                    "PasswordPolicy": {
                                        "description": "The password policy.",
                                        "properties": {
                                            "MinimumLength": {
                                                "description": "The minimum length of the password policy that you have set. Cannot be less than 6.",
                                                "maximum": 99,
                                                "minimum": 6,
                                                "type": "integer"
                                            },
                                            "RequireLowercase": {
                                                "description": "In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.",
                                                "type": "boolean"
                                            },
                                            "RequireNumbers": {
                                                "description": "In the password policy that you have set, refers to whether you have required users to use at least one number in their password.",
                                                "type": "boolean"
                                            },
                                            "RequireSymbols": {
                                                "description": "In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.",
                                                "type": "boolean"
                                            },
                                            "RequireUppercase": {
                                                "description": "In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "SchemaAttributes": {
                                "description": "A container with the schema attributes of a user pool.",
                                "items": {
                                    "description": "Contains information about the schema attribute.",
                                    "properties": {
                                        "AttributeDataType": {
                                            "description": "The attribute data type.",
                                            "enum": [
                                                "String",
                                                "Number",
                                                "DateTime",
                                                "Boolean"
                                            ],
                                            "type": "string"
                                        },
                                        "DeveloperOnlyAttribute": {
                                            "description": "Specifies whether the attribute type is developer only.",
                                            "type": "boolean"
                                        },
                                        "Mutable": {
                                            "description": "<p>Specifies whether the value of the attribute can be changed.</p> <p>For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html\">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>",
                                            "type": "boolean"
                                        },
                                        "Name": {
                                            "description": "A schema attribute of the name type.",
                                            "maxLength": 20,
                                            "minLength": 1,
                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                            "type": "string"
                                        },
                                        "NumberAttributeConstraints": {
                                            "description": "Specifies the constraints for an attribute of the number type.",
                                            "properties": {
                                                "MaxValue": {
                                                    "description": "The maximum value of an attribute that is of the number data type.",
                                                    "type": "string"
                                                },
                                                "MinValue": {
                                                    "description": "The minimum value of an attribute that is of the number data type.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "Required": {
                                            "description": "Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.",
                                            "type": "boolean"
                                        },
                                        "StringAttributeConstraints": {
                                            "description": "Specifies the constraints for an attribute of the string type.",
                                            "properties": {
                                                "MaxLength": {
                                                    "description": "The maximum length.",
                                                    "type": "string"
                                                },
                                                "MinLength": {
                                                    "description": "The minimum length.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                "maxItems": 50,
                                "minItems": 1,
                                "type": "array"
                            },
                            "SmsAuthenticationMessage": {
                                "description": "The contents of the SMS authentication message.",
                                "maxLength": 140,
                                "minLength": 6,
                                "pattern": ".*\\{####\\}.*",
                                "type": "string"
                            },
                            "SmsConfiguration": {
                                "description": "The SMS configuration.",
                                "properties": {
                                    "ExternalId": {
                                        "description": "The external ID.",
                                        "type": "string"
                                    },
                                    "SnsCallerArn": {
                                        "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "SnsCallerArn"
                                ],
                                "type": "object"
                            },
                            "SmsConfigurationFailure": {
                                "description": "The reason why the SMS configuration cannot send the messages to your users.",
                                "type": "string"
                            },
                            "SmsVerificationMessage": {
                                "description": "The contents of the SMS verification message.",
                                "maxLength": 140,
                                "minLength": 6,
                                "pattern": ".*\\{####\\}.*",
                                "type": "string"
                            },
                            "Status": {
                                "description": "The status of a user pool.",
                                "enum": [
                                    "Enabled",
                                    "Disabled"
                                ],
                                "type": "string"
                            },
                            "UserPoolAddOns": {
                                "description": "The user pool add-ons.",
                                "properties": {
                                    "AdvancedSecurityMode": {
                                        "description": "The advanced security mode.",
                                        "enum": [
                                            "OFF",
                                            "AUDIT",
                                            "ENFORCED"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "AdvancedSecurityMode"
                                ],
                                "type": "object"
                            },
                            "UserPoolTags": {
                                "description": "The cost allocation tags for the user pool. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</a> ",
                                "items": {
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "UsernameAttributes": {
                                "description": "Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.",
                                "items": {
                                    "enum": [
                                        "phone_number",
                                        "email"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "VerificationMessageTemplate": {
                                "description": "The template for verification messages.",
                                "properties": {
                                    "DefaultEmailOption": {
                                        "description": "The default email option.",
                                        "enum": [
                                            "CONFIRM_WITH_LINK",
                                            "CONFIRM_WITH_CODE"
                                        ],
                                        "type": "string"
                                    },
                                    "EmailMessage": {
                                        "description": "The email message template.",
                                        "maxLength": 20000,
                                        "minLength": 6,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                        "type": "string"
                                    },
                                    "EmailMessageByLink": {
                                        "description": "The email message template for sending a confirmation link to the user.",
                                        "maxLength": 20000,
                                        "minLength": 6,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{##[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*##\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                        "type": "string"
                                    },
                                    "EmailSubject": {
                                        "description": "The subject line for the email message template.",
                                        "maxLength": 140,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                        "type": "string"
                                    },
                                    "EmailSubjectByLink": {
                                        "description": "The subject line for the email message template for sending a confirmation link to the user.",
                                        "maxLength": 140,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                        "type": "string"
                                    },
                                    "SmsMessage": {
                                        "description": "The SMS message template.",
                                        "maxLength": 140,
                                        "minLength": 6,
                                        "pattern": ".*\\{####\\}.*",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "CustomAttributeNameType": {
                "maxLength": 20,
                "minLength": 1,
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "type": "string"
            },
            "CustomAttributesListType": {
                "items": {
                    "description": "Contains information about the schema attribute.",
                    "properties": {
                        "AttributeDataType": {
                            "description": "The attribute data type.",
                            "enum": [
                                "String",
                                "Number",
                                "DateTime",
                                "Boolean"
                            ],
                            "type": "string"
                        },
                        "DeveloperOnlyAttribute": {
                            "description": "Specifies whether the attribute type is developer only.",
                            "type": "boolean"
                        },
                        "Mutable": {
                            "description": "<p>Specifies whether the value of the attribute can be changed.</p> <p>For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html\">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>",
                            "type": "boolean"
                        },
                        "Name": {
                            "description": "A schema attribute of the name type.",
                            "maxLength": 20,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "NumberAttributeConstraints": {
                            "description": "Specifies the constraints for an attribute of the number type.",
                            "properties": {
                                "MaxValue": {
                                    "description": "The maximum value of an attribute that is of the number data type.",
                                    "type": "string"
                                },
                                "MinValue": {
                                    "description": "The minimum value of an attribute that is of the number data type.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "Required": {
                            "description": "Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.",
                            "type": "boolean"
                        },
                        "StringAttributeConstraints": {
                            "description": "Specifies the constraints for an attribute of the string type.",
                            "properties": {
                                "MaxLength": {
                                    "description": "The maximum length.",
                                    "type": "string"
                                },
                                "MinLength": {
                                    "description": "The minimum length.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "maxItems": 25,
                "minItems": 1,
                "type": "array"
            },
            "CustomDomainConfigType": {
                "description": "The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.",
                "properties": {
                    "CertificateArn": {
                        "description": "The Amazon Resource Name (ARN) of an AWS Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    }
                },
                "required": [
                    "CertificateArn"
                ],
                "type": "object"
            },
            "DateType": {
                "format": "date-time",
                "type": "string"
            },
            "DefaultEmailOptionType": {
                "enum": [
                    "CONFIRM_WITH_LINK",
                    "CONFIRM_WITH_CODE"
                ],
                "type": "string"
            },
            "DeleteGroupRequest": {
                "properties": {
                    "GroupName": {
                        "description": "The name of the group.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "GroupName",
                    "UserPoolId"
                ],
                "type": "object"
            },
            "DeleteIdentityProviderRequest": {
                "properties": {
                    "ProviderName": {
                        "description": "The identity provider name.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "ProviderName"
                ],
                "type": "object"
            },
            "DeleteResourceServerRequest": {
                "properties": {
                    "Identifier": {
                        "description": "The identifier for the resource server.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool that hosts the resource server.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Identifier"
                ],
                "type": "object"
            },
            "DeleteUserAttributesRequest": {
                "description": "Represents the request to delete user attributes.",
                "properties": {
                    "AccessToken": {
                        "description": "The access token used in the request to delete user attributes.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    },
                    "UserAttributeNames": {
                        "description": "<p>An array of strings representing the user attribute names you wish to delete.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>",
                        "items": {
                            "maxLength": 32,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "UserAttributeNames",
                    "AccessToken"
                ],
                "type": "object"
            },
            "DeleteUserAttributesResponse": {
                "description": "Represents the response from the server to delete user attributes.",
                "properties": {},
                "type": "object"
            },
            "DeleteUserPoolClientRequest": {
                "description": "Represents the request to delete a user pool client.",
                "properties": {
                    "ClientId": {
                        "description": "The app client ID of the app associated with the user pool.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool where you want to delete the client.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "ClientId"
                ],
                "type": "object"
            },
            "DeleteUserPoolDomainRequest": {
                "properties": {
                    "Domain": {
                        "description": "The domain string.",
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "Domain",
                    "UserPoolId"
                ],
                "type": "object"
            },
            "DeleteUserPoolDomainResponse": {
                "properties": {},
                "type": "object"
            },
            "DeleteUserPoolRequest": {
                "description": "Represents the request to delete a user pool.",
                "properties": {
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool you want to delete.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId"
                ],
                "type": "object"
            },
            "DeleteUserRequest": {
                "description": "Represents the request to delete a user.",
                "properties": {
                    "AccessToken": {
                        "description": "The access token from a request to delete a user.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    }
                },
                "required": [
                    "AccessToken"
                ],
                "type": "object"
            },
            "DeliveryMediumListType": {
                "items": {
                    "enum": [
                        "SMS",
                        "EMAIL"
                    ],
                    "type": "string"
                },
                "type": "array"
            },
            "DeliveryMediumType": {
                "enum": [
                    "SMS",
                    "EMAIL"
                ],
                "type": "string"
            },
            "DescribeIdentityProviderRequest": {
                "properties": {
                    "ProviderName": {
                        "description": "The identity provider name.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "ProviderName"
                ],
                "type": "object"
            },
            "DescribeIdentityProviderResponse": {
                "properties": {
                    "IdentityProvider": {
                        "description": "The identity provider that was deleted.",
                        "properties": {
                            "AttributeMapping": {
                                "description": "A mapping of identity provider attributes to standard and custom user pool attributes.",
                                "items": {
                                    "properties": {
                                        "key": {
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "CreationDate": {
                                "description": "The date the identity provider was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "IdpIdentifiers": {
                                "description": "A list of identity provider identifiers.",
                                "items": {
                                    "maxLength": 40,
                                    "minLength": 1,
                                    "pattern": "[\\w\\s+=.@-]+",
                                    "type": "string"
                                },
                                "maxItems": 50,
                                "minItems": 0,
                                "type": "array"
                            },
                            "LastModifiedDate": {
                                "description": "The date the identity provider was last modified.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "ProviderDetails": {
                                "description": "The identity provider details, such as <code>MetadataURL</code> and <code>MetadataFile</code>.",
                                "items": {
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "ProviderName": {
                                "description": "The identity provider name.",
                                "maxLength": 32,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            },
                            "ProviderType": {
                                "description": "The identity provider type.",
                                "enum": [
                                    "SAML",
                                    "Facebook",
                                    "Google",
                                    "LoginWithAmazon",
                                    "OIDC"
                                ],
                                "type": "string"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "IdentityProvider"
                ],
                "type": "object"
            },
            "DescribeResourceServerRequest": {
                "properties": {
                    "Identifier": {
                        "description": "The identifier for the resource server",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool that hosts the resource server.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Identifier"
                ],
                "type": "object"
            },
            "DescribeResourceServerResponse": {
                "properties": {
                    "ResourceServer": {
                        "description": "The resource server.",
                        "properties": {
                            "Identifier": {
                                "description": "The identifier for the resource server.",
                                "maxLength": 256,
                                "minLength": 1,
                                "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                "type": "string"
                            },
                            "Name": {
                                "description": "The name of the resource server.",
                                "maxLength": 256,
                                "minLength": 1,
                                "pattern": "[\\w\\s+=,.@-]+",
                                "type": "string"
                            },
                            "Scopes": {
                                "description": "A list of scopes that are defined for the resource server.",
                                "items": {
                                    "description": "A resource server scope.",
                                    "properties": {
                                        "ScopeDescription": {
                                            "description": "A description of the scope.",
                                            "maxLength": 256,
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "ScopeName": {
                                            "description": "The name of the scope.",
                                            "maxLength": 256,
                                            "minLength": 1,
                                            "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "ScopeName",
                                        "ScopeDescription"
                                    ],
                                    "type": "object"
                                },
                                "maxItems": 25,
                                "type": "array"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID for the user pool that hosts the resource server.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "ResourceServer"
                ],
                "type": "object"
            },
            "DescribeRiskConfigurationRequest": {
                "properties": {
                    "ClientId": {
                        "description": "The app client ID.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId"
                ],
                "type": "object"
            },
            "DescribeRiskConfigurationResponse": {
                "properties": {
                    "RiskConfiguration": {
                        "description": "The risk configuration.",
                        "properties": {
                            "AccountTakeoverRiskConfiguration": {
                                "description": "The account takeover risk configuration object including the <code>NotifyConfiguration</code> object and <code>Actions</code> to take in the case of an account takeover.",
                                "properties": {
                                    "Actions": {
                                        "description": "Account takeover risk configuration actions",
                                        "properties": {
                                            "HighAction": {
                                                "description": "Action to take for a high risk.",
                                                "properties": {
                                                    "EventAction": {
                                                        "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                        "enum": [
                                                            "BLOCK",
                                                            "MFA_IF_CONFIGURED",
                                                            "MFA_REQUIRED",
                                                            "NO_ACTION"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "Notify": {
                                                        "description": "Flag specifying whether to send a notification.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "required": [
                                                    "Notify",
                                                    "EventAction"
                                                ],
                                                "type": "object"
                                            },
                                            "LowAction": {
                                                "description": "Action to take for a low risk.",
                                                "properties": {
                                                    "EventAction": {
                                                        "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                        "enum": [
                                                            "BLOCK",
                                                            "MFA_IF_CONFIGURED",
                                                            "MFA_REQUIRED",
                                                            "NO_ACTION"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "Notify": {
                                                        "description": "Flag specifying whether to send a notification.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "required": [
                                                    "Notify",
                                                    "EventAction"
                                                ],
                                                "type": "object"
                                            },
                                            "MediumAction": {
                                                "description": "Action to take for a medium risk.",
                                                "properties": {
                                                    "EventAction": {
                                                        "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                        "enum": [
                                                            "BLOCK",
                                                            "MFA_IF_CONFIGURED",
                                                            "MFA_REQUIRED",
                                                            "NO_ACTION"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "Notify": {
                                                        "description": "Flag specifying whether to send a notification.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "required": [
                                                    "Notify",
                                                    "EventAction"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "NotifyConfiguration": {
                                        "description": "The notify configuration used to construct email notifications.",
                                        "properties": {
                                            "BlockEmail": {
                                                "description": "Email template used when a detected risk event is blocked.",
                                                "properties": {
                                                    "HtmlBody": {
                                                        "description": "The HTML body.",
                                                        "maxLength": 20000,
                                                        "minLength": 6,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                        "type": "string"
                                                    },
                                                    "Subject": {
                                                        "description": "The subject.",
                                                        "maxLength": 140,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                        "type": "string"
                                                    },
                                                    "TextBody": {
                                                        "description": "The text body.",
                                                        "maxLength": 20000,
                                                        "minLength": 6,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "Subject"
                                                ],
                                                "type": "object"
                                            },
                                            "From": {
                                                "description": "The email address that is sending the email. It must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.",
                                                "type": "string"
                                            },
                                            "MfaEmail": {
                                                "description": "The MFA email template used when MFA is challenged as part of a detected risk.",
                                                "properties": {
                                                    "HtmlBody": {
                                                        "description": "The HTML body.",
                                                        "maxLength": 20000,
                                                        "minLength": 6,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                        "type": "string"
                                                    },
                                                    "Subject": {
                                                        "description": "The subject.",
                                                        "maxLength": 140,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                        "type": "string"
                                                    },
                                                    "TextBody": {
                                                        "description": "The text body.",
                                                        "maxLength": 20000,
                                                        "minLength": 6,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "Subject"
                                                ],
                                                "type": "object"
                                            },
                                            "NoActionEmail": {
                                                "description": "The email template used when a detected risk event is allowed.",
                                                "properties": {
                                                    "HtmlBody": {
                                                        "description": "The HTML body.",
                                                        "maxLength": 20000,
                                                        "minLength": 6,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                        "type": "string"
                                                    },
                                                    "Subject": {
                                                        "description": "The subject.",
                                                        "maxLength": 140,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                        "type": "string"
                                                    },
                                                    "TextBody": {
                                                        "description": "The text body.",
                                                        "maxLength": 20000,
                                                        "minLength": 6,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "Subject"
                                                ],
                                                "type": "object"
                                            },
                                            "ReplyTo": {
                                                "description": "The destination to which the receiver of an email should reply to.",
                                                "type": "string"
                                            },
                                            "SourceArn": {
                                                "description": "The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. It permits Amazon Cognito to send for the email address specified in the <code>From</code> parameter.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "SourceArn"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "Actions"
                                ],
                                "type": "object"
                            },
                            "ClientId": {
                                "description": "The app client ID.",
                                "format": "password",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w+]+",
                                "type": "string"
                            },
                            "CompromisedCredentialsRiskConfiguration": {
                                "description": "The compromised credentials risk configuration object including the <code>EventFilter</code> and the <code>EventAction</code> ",
                                "properties": {
                                    "Actions": {
                                        "description": "The compromised credentials risk configuration actions.",
                                        "properties": {
                                            "EventAction": {
                                                "description": "The event action.",
                                                "enum": [
                                                    "BLOCK",
                                                    "NO_ACTION"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "EventAction"
                                        ],
                                        "type": "object"
                                    },
                                    "EventFilter": {
                                        "description": "Perform the action for these events. The default is to perform all events if no event filter is specified.",
                                        "items": {
                                            "enum": [
                                                "SIGN_IN",
                                                "PASSWORD_CHANGE",
                                                "SIGN_UP"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "Actions"
                                ],
                                "type": "object"
                            },
                            "LastModifiedDate": {
                                "description": "The last modified date.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "RiskExceptionConfiguration": {
                                "description": "The configuration to override the risk decision.",
                                "properties": {
                                    "BlockedIPRangeList": {
                                        "description": "Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation: a compact representation of an IP address and its associated routing prefix.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "maxItems": 20,
                                        "type": "array"
                                    },
                                    "SkippedIPRangeList": {
                                        "description": "Risk detection is not performed on the IP addresses in the range list. The IP range is in CIDR notation.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "maxItems": 20,
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "RiskConfiguration"
                ],
                "type": "object"
            },
            "DescribeUserImportJobRequest": {
                "description": "Represents the request to describe the user import job.",
                "properties": {
                    "JobId": {
                        "description": "The job ID for the user import job.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "import-[0-9a-zA-Z-]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool that the users are being imported into.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "JobId"
                ],
                "type": "object"
            },
            "DescribeUserImportJobResponse": {
                "description": "Represents the response from the server to the request to describe the user import job.",
                "properties": {
                    "UserImportJob": {
                        "description": "The job object that represents the user import job.",
                        "properties": {
                            "CloudWatchLogsRoleArn": {
                                "description": "The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito Developer Guide.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "CompletionDate": {
                                "description": "The date when the user import job was completed.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "CompletionMessage": {
                                "description": "The message returned when the user import job is completed.",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w]+",
                                "type": "string"
                            },
                            "CreationDate": {
                                "description": "The date the user import job was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "FailedUsers": {
                                "description": "The number of users that could not be imported.",
                                "type": "integer"
                            },
                            "ImportedUsers": {
                                "description": "The number of users that were successfully imported.",
                                "type": "integer"
                            },
                            "JobId": {
                                "description": "The job ID for the user import job.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "import-[0-9a-zA-Z-]+",
                                "type": "string"
                            },
                            "JobName": {
                                "description": "The job name for the user import job.",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w\\s+=,.@-]+",
                                "type": "string"
                            },
                            "PreSignedUrl": {
                                "description": "The pre-signed URL to be used to upload the <code>.csv</code> file.",
                                "maxLength": 2048,
                                "minLength": 0,
                                "type": "string"
                            },
                            "SkippedUsers": {
                                "description": "The number of users that were skipped.",
                                "type": "integer"
                            },
                            "StartDate": {
                                "description": "The date when the user import job was started.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "Status": {
                                "description": "<p>The status of the user import job. One of the following:</p> <ul> <li> <p> <code>Created</code> - The job was created but not started.</p> </li> <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li> <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li> <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li> <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li> <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li> <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li> <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.</p> </li> </ul>",
                                "enum": [
                                    "Created",
                                    "Pending",
                                    "InProgress",
                                    "Stopping",
                                    "Expired",
                                    "Stopped",
                                    "Failed",
                                    "Succeeded"
                                ],
                                "type": "string"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID for the user pool that the users are being imported into.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "DescribeUserPoolClientRequest": {
                "description": "Represents the request to describe a user pool client.",
                "properties": {
                    "ClientId": {
                        "description": "The app client ID of the app associated with the user pool.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool you want to describe.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "ClientId"
                ],
                "type": "object"
            },
            "DescribeUserPoolClientResponse": {
                "description": "Represents the response from the server from a request to describe the user pool client.",
                "properties": {
                    "UserPoolClient": {
                        "description": "The user pool client from a server response to describe the user pool client.",
                        "properties": {
                            "AllowedOAuthFlows": {
                                "description": "<p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>token</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>",
                                "items": {
                                    "enum": [
                                        "code",
                                        "implicit",
                                        "client_credentials"
                                    ],
                                    "type": "string"
                                },
                                "maxItems": 3,
                                "minItems": 0,
                                "type": "array"
                            },
                            "AllowedOAuthFlowsUserPoolClient": {
                                "description": "Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.",
                                "type": "boolean"
                            },
                            "AllowedOAuthScopes": {
                                "description": "A list of allowed <code>OAuth</code> scopes. Currently supported values are <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and <code>\"Cognito\"</code>.",
                                "items": {
                                    "maxLength": 256,
                                    "minLength": 1,
                                    "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                    "type": "string"
                                },
                                "maxItems": 25,
                                "type": "array"
                            },
                            "AnalyticsConfiguration": {
                                "description": "The Amazon Pinpoint analytics configuration for the user pool client.",
                                "properties": {
                                    "ApplicationId": {
                                        "description": "The application ID for an Amazon Pinpoint application.",
                                        "pattern": "^[0-9a-fA-F]+$",
                                        "type": "string"
                                    },
                                    "ExternalId": {
                                        "description": "The external ID.",
                                        "type": "string"
                                    },
                                    "RoleArn": {
                                        "description": "The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "UserDataShared": {
                                        "description": "If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "ApplicationId",
                                    "RoleArn",
                                    "ExternalId"
                                ],
                                "type": "object"
                            },
                            "CallbackURLs": {
                                "description": "<p>A list of allowed redirect (callback) URLs for the identity providers.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                                "items": {
                                    "maxLength": 1024,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "maxItems": 100,
                                "minItems": 0,
                                "type": "array"
                            },
                            "ClientId": {
                                "description": "The ID of the client associated with the user pool.",
                                "format": "password",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w+]+",
                                "type": "string"
                            },
                            "ClientName": {
                                "description": "The client name from the user pool request of the client type.",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w\\s+=,.@-]+",
                                "type": "string"
                            },
                            "ClientSecret": {
                                "description": "The client secret from the user pool request of the client type.",
                                "format": "password",
                                "maxLength": 64,
                                "minLength": 1,
                                "pattern": "[\\w+]+",
                                "type": "string"
                            },
                            "CreationDate": {
                                "description": "The date the user pool client was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "DefaultRedirectURI": {
                                "description": "<p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                                "maxLength": 1024,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            },
                            "ExplicitAuthFlows": {
                                "description": "The explicit authentication flows.",
                                "items": {
                                    "enum": [
                                        "ADMIN_NO_SRP_AUTH",
                                        "CUSTOM_AUTH_FLOW_ONLY",
                                        "USER_PASSWORD_AUTH"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "LastModifiedDate": {
                                "description": "The date the user pool client was last modified.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "LogoutURLs": {
                                "description": "A list of allowed logout URLs for the identity providers.",
                                "items": {
                                    "maxLength": 1024,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "maxItems": 100,
                                "minItems": 0,
                                "type": "array"
                            },
                            "ReadAttributes": {
                                "description": "The Read-only attributes.",
                                "items": {
                                    "maxLength": 2048,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "RefreshTokenValidity": {
                                "description": "The time limit, in days, after which the refresh token is no longer valid and cannot be used.",
                                "maximum": 3650,
                                "minimum": 0,
                                "type": "integer"
                            },
                            "SupportedIdentityProviders": {
                                "description": "A list of provider names for the identity providers that are supported on this client.",
                                "items": {
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID for the user pool client.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            },
                            "WriteAttributes": {
                                "description": "The writeable attributes.",
                                "items": {
                                    "maxLength": 2048,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "DescribeUserPoolDomainRequest": {
                "properties": {
                    "Domain": {
                        "description": "The domain string.",
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                        "type": "string"
                    }
                },
                "required": [
                    "Domain"
                ],
                "type": "object"
            },
            "DescribeUserPoolDomainResponse": {
                "properties": {
                    "DomainDescription": {
                        "description": "A domain description object containing information about the domain.",
                        "properties": {
                            "AWSAccountId": {
                                "description": "The AWS account ID for the user pool owner.",
                                "type": "string"
                            },
                            "CloudFrontDistribution": {
                                "description": "The ARN of the CloudFront distribution.",
                                "type": "string"
                            },
                            "CustomDomainConfig": {
                                "description": "The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.",
                                "properties": {
                                    "CertificateArn": {
                                        "description": "The Amazon Resource Name (ARN) of an AWS Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "CertificateArn"
                                ],
                                "type": "object"
                            },
                            "Domain": {
                                "description": "The domain string.",
                                "maxLength": 63,
                                "minLength": 1,
                                "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                                "type": "string"
                            },
                            "S3Bucket": {
                                "description": "The S3 bucket where the static files for this domain are stored.",
                                "maxLength": 1024,
                                "minLength": 3,
                                "pattern": "^[0-9A-Za-z\\.\\-_]*(?<!\\.)$",
                                "type": "string"
                            },
                            "Status": {
                                "description": "The domain status.",
                                "enum": [
                                    "CREATING",
                                    "DELETING",
                                    "UPDATING",
                                    "ACTIVE",
                                    "FAILED"
                                ],
                                "type": "string"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            },
                            "Version": {
                                "description": "The app version.",
                                "maxLength": 20,
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "DescribeUserPoolRequest": {
                "description": "Represents the request to describe the user pool.",
                "properties": {
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool you want to describe.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId"
                ],
                "type": "object"
            },
            "DescribeUserPoolResponse": {
                "description": "Represents the response to describe the user pool.",
                "properties": {
                    "UserPool": {
                        "description": "The container of metadata returned by the server to describe the pool.",
                        "properties": {
                            "AdminCreateUserConfig": {
                                "description": "The configuration for <code>AdminCreateUser</code> requests.",
                                "properties": {
                                    "AllowAdminCreateUserOnly": {
                                        "description": "Set to <code>True</code> if only the administrator is allowed to create user profiles. Set to <code>False</code> if users can sign themselves up via an app.",
                                        "type": "boolean"
                                    },
                                    "InviteMessageTemplate": {
                                        "description": "<p>The message template to be used for the welcome message to new users.</p> <p>See also <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization\">Customizing User Invitation Messages</a>.</p>",
                                        "properties": {
                                            "EmailMessage": {
                                                "description": "The message template for email messages.",
                                                "maxLength": 20000,
                                                "minLength": 6,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                                "type": "string"
                                            },
                                            "EmailSubject": {
                                                "description": "The subject line for email messages.",
                                                "maxLength": 140,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                "type": "string"
                                            },
                                            "SMSMessage": {
                                                "description": "The message template for SMS messages.",
                                                "maxLength": 140,
                                                "minLength": 6,
                                                "pattern": ".*\\{####\\}.*",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "UnusedAccountValidityDays": {
                                        "description": "The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the <code>MessageAction</code> parameter. The default value for this parameter is 7.",
                                        "maximum": 365,
                                        "minimum": 0,
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            },
                            "AliasAttributes": {
                                "description": "Specifies the attributes that are aliased in a user pool.",
                                "items": {
                                    "enum": [
                                        "phone_number",
                                        "email",
                                        "preferred_username"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "Arn": {
                                "description": "The Amazon Resource Name (ARN) for the user pool.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "AutoVerifiedAttributes": {
                                "description": "Specifies the attributes that are auto-verified in a user pool.",
                                "items": {
                                    "enum": [
                                        "phone_number",
                                        "email"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "CreationDate": {
                                "description": "The date the user pool was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "CustomDomain": {
                                "maxLength": 63,
                                "minLength": 1,
                                "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                                "type": "string"
                            },
                            "DeviceConfiguration": {
                                "description": "The device configuration.",
                                "properties": {
                                    "ChallengeRequiredOnNewDevice": {
                                        "description": "Indicates whether a challenge is required on a new device. Only applicable to a new device.",
                                        "type": "boolean"
                                    },
                                    "DeviceOnlyRememberedOnUserPrompt": {
                                        "description": "If true, a device is only remembered on user prompt.",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            },
                            "Domain": {
                                "description": "Holds the domain prefix if the user pool has a domain associated with it.",
                                "maxLength": 63,
                                "minLength": 1,
                                "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                                "type": "string"
                            },
                            "EmailConfiguration": {
                                "description": "The email configuration.",
                                "properties": {
                                    "ReplyToEmailAddress": {
                                        "description": "The destination to which the receiver of the email should reply to.",
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "SourceArn": {
                                        "description": "The Amazon Resource Name (ARN) of the email source.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "EmailConfigurationFailure": {
                                "description": "The reason why the email configuration cannot send the messages to your users.",
                                "type": "string"
                            },
                            "EmailVerificationMessage": {
                                "description": "The contents of the email verification message.",
                                "maxLength": 20000,
                                "minLength": 6,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                "type": "string"
                            },
                            "EmailVerificationSubject": {
                                "description": "The subject of the email verification message.",
                                "maxLength": 140,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                "type": "string"
                            },
                            "EstimatedNumberOfUsers": {
                                "description": "A number estimating the size of the user pool.",
                                "type": "integer"
                            },
                            "Id": {
                                "description": "The ID of the user pool.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            },
                            "LambdaConfig": {
                                "description": "The AWS Lambda triggers associated with the user pool.",
                                "properties": {
                                    "CreateAuthChallenge": {
                                        "description": "Creates an authentication challenge.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "CustomMessage": {
                                        "description": "A custom Message AWS Lambda trigger.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "DefineAuthChallenge": {
                                        "description": "Defines the authentication challenge.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "PostAuthentication": {
                                        "description": "A post-authentication AWS Lambda trigger.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "PostConfirmation": {
                                        "description": "A post-confirmation AWS Lambda trigger.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "PreAuthentication": {
                                        "description": "A pre-authentication AWS Lambda trigger.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "PreSignUp": {
                                        "description": "A pre-registration AWS Lambda trigger.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "PreTokenGeneration": {
                                        "description": "A Lambda trigger that is invoked before token generation.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "UserMigration": {
                                        "description": "The user migration Lambda config type.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "VerifyAuthChallengeResponse": {
                                        "description": "Verifies the authentication challenge response.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "LastModifiedDate": {
                                "description": "The date the user pool was last modified.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "MfaConfiguration": {
                                "description": "<p>Can be one of the following values:</p> <ul> <li> <p> <code>OFF</code> - MFA tokens are not required and cannot be specified during user registration.</p> </li> <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.</p> </li> <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li> </ul>",
                                "enum": [
                                    "OFF",
                                    "ON",
                                    "OPTIONAL"
                                ],
                                "type": "string"
                            },
                            "Name": {
                                "description": "The name of the user pool.",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w\\s+=,.@-]+",
                                "type": "string"
                            },
                            "Policies": {
                                "description": "The policies associated with the user pool.",
                                "properties": {
                                    "PasswordPolicy": {
                                        "description": "The password policy.",
                                        "properties": {
                                            "MinimumLength": {
                                                "description": "The minimum length of the password policy that you have set. Cannot be less than 6.",
                                                "maximum": 99,
                                                "minimum": 6,
                                                "type": "integer"
                                            },
                                            "RequireLowercase": {
                                                "description": "In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.",
                                                "type": "boolean"
                                            },
                                            "RequireNumbers": {
                                                "description": "In the password policy that you have set, refers to whether you have required users to use at least one number in their password.",
                                                "type": "boolean"
                                            },
                                            "RequireSymbols": {
                                                "description": "In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.",
                                                "type": "boolean"
                                            },
                                            "RequireUppercase": {
                                                "description": "In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "SchemaAttributes": {
                                "description": "A container with the schema attributes of a user pool.",
                                "items": {
                                    "description": "Contains information about the schema attribute.",
                                    "properties": {
                                        "AttributeDataType": {
                                            "description": "The attribute data type.",
                                            "enum": [
                                                "String",
                                                "Number",
                                                "DateTime",
                                                "Boolean"
                                            ],
                                            "type": "string"
                                        },
                                        "DeveloperOnlyAttribute": {
                                            "description": "Specifies whether the attribute type is developer only.",
                                            "type": "boolean"
                                        },
                                        "Mutable": {
                                            "description": "<p>Specifies whether the value of the attribute can be changed.</p> <p>For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html\">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>",
                                            "type": "boolean"
                                        },
                                        "Name": {
                                            "description": "A schema attribute of the name type.",
                                            "maxLength": 20,
                                            "minLength": 1,
                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                            "type": "string"
                                        },
                                        "NumberAttributeConstraints": {
                                            "description": "Specifies the constraints for an attribute of the number type.",
                                            "properties": {
                                                "MaxValue": {
                                                    "description": "The maximum value of an attribute that is of the number data type.",
                                                    "type": "string"
                                                },
                                                "MinValue": {
                                                    "description": "The minimum value of an attribute that is of the number data type.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "Required": {
                                            "description": "Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.",
                                            "type": "boolean"
                                        },
                                        "StringAttributeConstraints": {
                                            "description": "Specifies the constraints for an attribute of the string type.",
                                            "properties": {
                                                "MaxLength": {
                                                    "description": "The maximum length.",
                                                    "type": "string"
                                                },
                                                "MinLength": {
                                                    "description": "The minimum length.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                "maxItems": 50,
                                "minItems": 1,
                                "type": "array"
                            },
                            "SmsAuthenticationMessage": {
                                "description": "The contents of the SMS authentication message.",
                                "maxLength": 140,
                                "minLength": 6,
                                "pattern": ".*\\{####\\}.*",
                                "type": "string"
                            },
                            "SmsConfiguration": {
                                "description": "The SMS configuration.",
                                "properties": {
                                    "ExternalId": {
                                        "description": "The external ID.",
                                        "type": "string"
                                    },
                                    "SnsCallerArn": {
                                        "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "SnsCallerArn"
                                ],
                                "type": "object"
                            },
                            "SmsConfigurationFailure": {
                                "description": "The reason why the SMS configuration cannot send the messages to your users.",
                                "type": "string"
                            },
                            "SmsVerificationMessage": {
                                "description": "The contents of the SMS verification message.",
                                "maxLength": 140,
                                "minLength": 6,
                                "pattern": ".*\\{####\\}.*",
                                "type": "string"
                            },
                            "Status": {
                                "description": "The status of a user pool.",
                                "enum": [
                                    "Enabled",
                                    "Disabled"
                                ],
                                "type": "string"
                            },
                            "UserPoolAddOns": {
                                "description": "The user pool add-ons.",
                                "properties": {
                                    "AdvancedSecurityMode": {
                                        "description": "The advanced security mode.",
                                        "enum": [
                                            "OFF",
                                            "AUDIT",
                                            "ENFORCED"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "AdvancedSecurityMode"
                                ],
                                "type": "object"
                            },
                            "UserPoolTags": {
                                "description": "The cost allocation tags for the user pool. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</a> ",
                                "items": {
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "UsernameAttributes": {
                                "description": "Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.",
                                "items": {
                                    "enum": [
                                        "phone_number",
                                        "email"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "VerificationMessageTemplate": {
                                "description": "The template for verification messages.",
                                "properties": {
                                    "DefaultEmailOption": {
                                        "description": "The default email option.",
                                        "enum": [
                                            "CONFIRM_WITH_LINK",
                                            "CONFIRM_WITH_CODE"
                                        ],
                                        "type": "string"
                                    },
                                    "EmailMessage": {
                                        "description": "The email message template.",
                                        "maxLength": 20000,
                                        "minLength": 6,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                        "type": "string"
                                    },
                                    "EmailMessageByLink": {
                                        "description": "The email message template for sending a confirmation link to the user.",
                                        "maxLength": 20000,
                                        "minLength": 6,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{##[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*##\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                        "type": "string"
                                    },
                                    "EmailSubject": {
                                        "description": "The subject line for the email message template.",
                                        "maxLength": 140,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                        "type": "string"
                                    },
                                    "EmailSubjectByLink": {
                                        "description": "The subject line for the email message template for sending a confirmation link to the user.",
                                        "maxLength": 140,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                        "type": "string"
                                    },
                                    "SmsMessage": {
                                        "description": "The SMS message template.",
                                        "maxLength": 140,
                                        "minLength": 6,
                                        "pattern": ".*\\{####\\}.*",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "DescriptionType": {
                "maxLength": 2048,
                "type": "string"
            },
            "DeviceConfigurationType": {
                "description": "The configuration for the user pool's device tracking.",
                "properties": {
                    "ChallengeRequiredOnNewDevice": {
                        "description": "Indicates whether a challenge is required on a new device. Only applicable to a new device.",
                        "type": "boolean"
                    },
                    "DeviceOnlyRememberedOnUserPrompt": {
                        "description": "If true, a device is only remembered on user prompt.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "DeviceKeyType": {
                "maxLength": 55,
                "minLength": 1,
                "pattern": "[\\w-]+_[0-9a-f-]+",
                "type": "string"
            },
            "DeviceListType": {
                "items": {
                    "description": "The device type.",
                    "properties": {
                        "DeviceAttributes": {
                            "description": "The device attributes.",
                            "items": {
                                "description": "Specifies whether the attribute is standard or custom.",
                                "properties": {
                                    "Name": {
                                        "description": "The name of the attribute.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "Value": {
                                        "description": "The value of the attribute.",
                                        "format": "password",
                                        "maxLength": 2048,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Name"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "DeviceCreateDate": {
                            "description": "The creation date of the device.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "DeviceKey": {
                            "description": "The device key.",
                            "maxLength": 55,
                            "minLength": 1,
                            "pattern": "[\\w-]+_[0-9a-f-]+",
                            "type": "string"
                        },
                        "DeviceLastAuthenticatedDate": {
                            "description": "The date in which the device was last authenticated.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "DeviceLastModifiedDate": {
                            "description": "The last modified date of the device.",
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "DeviceNameType": {
                "maxLength": 1024,
                "minLength": 1,
                "type": "string"
            },
            "DeviceRememberedStatusType": {
                "enum": [
                    "remembered",
                    "not_remembered"
                ],
                "type": "string"
            },
            "DeviceSecretVerifierConfigType": {
                "description": "The device verifier against which it will be authenticated.",
                "properties": {
                    "PasswordVerifier": {
                        "description": "The password verifier.",
                        "type": "string"
                    },
                    "Salt": {
                        "description": "The salt.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DeviceType": {
                "description": "The device type.",
                "properties": {
                    "DeviceAttributes": {
                        "description": "The device attributes.",
                        "items": {
                            "description": "Specifies whether the attribute is standard or custom.",
                            "properties": {
                                "Name": {
                                    "description": "The name of the attribute.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "Value": {
                                    "description": "The value of the attribute.",
                                    "format": "password",
                                    "maxLength": 2048,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Name"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "DeviceCreateDate": {
                        "description": "The creation date of the device.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "DeviceKey": {
                        "description": "The device key.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-f-]+",
                        "type": "string"
                    },
                    "DeviceLastAuthenticatedDate": {
                        "description": "The date in which the device was last authenticated.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "DeviceLastModifiedDate": {
                        "description": "The last modified date of the device.",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DomainDescriptionType": {
                "description": "A container for information about a domain.",
                "properties": {
                    "AWSAccountId": {
                        "description": "The AWS account ID for the user pool owner.",
                        "type": "string"
                    },
                    "CloudFrontDistribution": {
                        "description": "The ARN of the CloudFront distribution.",
                        "type": "string"
                    },
                    "CustomDomainConfig": {
                        "description": "The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.",
                        "properties": {
                            "CertificateArn": {
                                "description": "The Amazon Resource Name (ARN) of an AWS Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "CertificateArn"
                        ],
                        "type": "object"
                    },
                    "Domain": {
                        "description": "The domain string.",
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                        "type": "string"
                    },
                    "S3Bucket": {
                        "description": "The S3 bucket where the static files for this domain are stored.",
                        "maxLength": 1024,
                        "minLength": 3,
                        "pattern": "^[0-9A-Za-z\\.\\-_]*(?<!\\.)$",
                        "type": "string"
                    },
                    "Status": {
                        "description": "The domain status.",
                        "enum": [
                            "CREATING",
                            "DELETING",
                            "UPDATING",
                            "ACTIVE",
                            "FAILED"
                        ],
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Version": {
                        "description": "The app version.",
                        "maxLength": 20,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DomainStatusType": {
                "enum": [
                    "CREATING",
                    "DELETING",
                    "UPDATING",
                    "ACTIVE",
                    "FAILED"
                ],
                "type": "string"
            },
            "DomainType": {
                "maxLength": 63,
                "minLength": 1,
                "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                "type": "string"
            },
            "DomainVersionType": {
                "maxLength": 20,
                "minLength": 1,
                "type": "string"
            },
            "DuplicateProviderException": {},
            "EmailAddressType": {
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "type": "string"
            },
            "EmailConfigurationType": {
                "description": "The email configuration type.",
                "properties": {
                    "ReplyToEmailAddress": {
                        "description": "The destination to which the receiver of the email should reply to.",
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "SourceArn": {
                        "description": "The Amazon Resource Name (ARN) of the email source.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EmailNotificationBodyType": {
                "maxLength": 20000,
                "minLength": 6,
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                "type": "string"
            },
            "EmailNotificationSubjectType": {
                "maxLength": 140,
                "minLength": 1,
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                "type": "string"
            },
            "EmailVerificationMessageByLinkType": {
                "maxLength": 20000,
                "minLength": 6,
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{##[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*##\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                "type": "string"
            },
            "EmailVerificationMessageType": {
                "maxLength": 20000,
                "minLength": 6,
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                "type": "string"
            },
            "EmailVerificationSubjectByLinkType": {
                "maxLength": 140,
                "minLength": 1,
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                "type": "string"
            },
            "EmailVerificationSubjectType": {
                "maxLength": 140,
                "minLength": 1,
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                "type": "string"
            },
            "EnableSoftwareTokenMFAException": {},
            "EventContextDataType": {
                "description": "Specifies the user context data captured at the time of an event request.",
                "properties": {
                    "City": {
                        "description": "The user's city.",
                        "type": "string"
                    },
                    "Country": {
                        "description": "The user's country.",
                        "type": "string"
                    },
                    "DeviceName": {
                        "description": "The user's device name.",
                        "type": "string"
                    },
                    "IpAddress": {
                        "description": "The user's IP address.",
                        "type": "string"
                    },
                    "Timezone": {
                        "description": "The user's time zone.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EventFeedbackType": {
                "description": "Specifies the event feedback type.",
                "properties": {
                    "FeedbackDate": {
                        "description": "The event feedback date.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "FeedbackValue": {
                        "description": "The event feedback value.",
                        "enum": [
                            "Valid",
                            "Invalid"
                        ],
                        "type": "string"
                    },
                    "Provider": {
                        "description": "The provider.",
                        "type": "string"
                    }
                },
                "required": [
                    "FeedbackValue",
                    "Provider"
                ],
                "type": "object"
            },
            "EventFilterType": {
                "enum": [
                    "SIGN_IN",
                    "PASSWORD_CHANGE",
                    "SIGN_UP"
                ],
                "type": "string"
            },
            "EventFiltersType": {
                "items": {
                    "enum": [
                        "SIGN_IN",
                        "PASSWORD_CHANGE",
                        "SIGN_UP"
                    ],
                    "type": "string"
                },
                "type": "array"
            },
            "EventIdType": {
                "maxLength": 50,
                "minLength": 1,
                "pattern": "[\\w+-]+",
                "type": "string"
            },
            "EventResponseType": {
                "enum": [
                    "Success",
                    "Failure"
                ],
                "type": "string"
            },
            "EventRiskType": {
                "description": "The event risk type.",
                "properties": {
                    "RiskDecision": {
                        "description": "The risk decision.",
                        "enum": [
                            "NoRisk",
                            "AccountTakeover",
                            "Block"
                        ],
                        "type": "string"
                    },
                    "RiskLevel": {
                        "description": "The risk level.",
                        "enum": [
                            "Low",
                            "Medium",
                            "High"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EventType": {
                "enum": [
                    "SignIn",
                    "SignUp",
                    "ForgotPassword"
                ],
                "type": "string"
            },
            "ExpiredCodeException": {},
            "ExplicitAuthFlowsListType": {
                "items": {
                    "enum": [
                        "ADMIN_NO_SRP_AUTH",
                        "CUSTOM_AUTH_FLOW_ONLY",
                        "USER_PASSWORD_AUTH"
                    ],
                    "type": "string"
                },
                "type": "array"
            },
            "ExplicitAuthFlowsType": {
                "enum": [
                    "ADMIN_NO_SRP_AUTH",
                    "CUSTOM_AUTH_FLOW_ONLY",
                    "USER_PASSWORD_AUTH"
                ],
                "type": "string"
            },
            "FeedbackValueType": {
                "enum": [
                    "Valid",
                    "Invalid"
                ],
                "type": "string"
            },
            "ForceAliasCreation": {
                "type": "boolean"
            },
            "ForgetDeviceRequest": {
                "description": "Represents the request to forget the device.",
                "properties": {
                    "AccessToken": {
                        "description": "The access token for the forgotten device request.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    },
                    "DeviceKey": {
                        "description": "The device key.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-f-]+",
                        "type": "string"
                    }
                },
                "required": [
                    "DeviceKey"
                ],
                "type": "object"
            },
            "ForgotPasswordRequest": {
                "description": "Represents the request to reset a user's password.",
                "properties": {
                    "AnalyticsMetadata": {
                        "description": "The Amazon Pinpoint analytics metadata for collecting metrics for <code>ForgotPassword</code> calls.",
                        "properties": {
                            "AnalyticsEndpointId": {
                                "description": "The endpoint ID.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "ClientId": {
                        "description": "The ID of the client associated with the user pool.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "SecretHash": {
                        "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+=/]+",
                        "type": "string"
                    },
                    "UserContextData": {
                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                        "properties": {
                            "EncodedData": {
                                "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "Username": {
                        "description": "The user name of the user for whom you want to enter a code to reset a forgotten password.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "ClientId",
                    "Username"
                ],
                "type": "object"
            },
            "ForgotPasswordResponse": {
                "description": "Respresents the response from the server regarding the request to reset a password.",
                "properties": {
                    "CodeDeliveryDetails": {
                        "description": "The code delivery details returned by the server in response to the request to reset a password.",
                        "properties": {
                            "AttributeName": {
                                "description": "The attribute name.",
                                "maxLength": 32,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            },
                            "DeliveryMedium": {
                                "description": "The delivery medium (email message or phone number).",
                                "enum": [
                                    "SMS",
                                    "EMAIL"
                                ],
                                "type": "string"
                            },
                            "Destination": {
                                "description": "The destination for the code delivery details.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "GenerateSecret": {
                "type": "boolean"
            },
            "GetCSVHeaderRequest": {
                "description": "Represents the request to get the header information for the .csv file for the user import job.",
                "properties": {
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool that the users are to be imported into.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId"
                ],
                "type": "object"
            },
            "GetCSVHeaderResponse": {
                "description": "Represents the response from the server to the request to get the header information for the .csv file for the user import job.",
                "properties": {
                    "CSVHeader": {
                        "description": "The header information for the .csv file for the user import job.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool that the users are to be imported into.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetDeviceRequest": {
                "description": "Represents the request to get the device.",
                "properties": {
                    "AccessToken": {
                        "description": "The access token.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    },
                    "DeviceKey": {
                        "description": "The device key.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-f-]+",
                        "type": "string"
                    }
                },
                "required": [
                    "DeviceKey"
                ],
                "type": "object"
            },
            "GetDeviceResponse": {
                "description": "Gets the device response.",
                "properties": {
                    "Device": {
                        "description": "The device.",
                        "properties": {
                            "DeviceAttributes": {
                                "description": "The device attributes.",
                                "items": {
                                    "description": "Specifies whether the attribute is standard or custom.",
                                    "properties": {
                                        "Name": {
                                            "description": "The name of the attribute.",
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                            "type": "string"
                                        },
                                        "Value": {
                                            "description": "The value of the attribute.",
                                            "format": "password",
                                            "maxLength": 2048,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "Name"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "DeviceCreateDate": {
                                "description": "The creation date of the device.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "DeviceKey": {
                                "description": "The device key.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-f-]+",
                                "type": "string"
                            },
                            "DeviceLastAuthenticatedDate": {
                                "description": "The date in which the device was last authenticated.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "DeviceLastModifiedDate": {
                                "description": "The last modified date of the device.",
                                "format": "date-time",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "Device"
                ],
                "type": "object"
            },
            "GetGroupRequest": {
                "properties": {
                    "GroupName": {
                        "description": "The name of the group.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "GroupName",
                    "UserPoolId"
                ],
                "type": "object"
            },
            "GetGroupResponse": {
                "properties": {
                    "Group": {
                        "description": "The group object for the group.",
                        "properties": {
                            "CreationDate": {
                                "description": "The date the group was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "Description": {
                                "description": "A string containing the description of the group.",
                                "maxLength": 2048,
                                "type": "string"
                            },
                            "GroupName": {
                                "description": "The name of the group.",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            },
                            "LastModifiedDate": {
                                "description": "The date the group was last modified.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "Precedence": {
                                "description": "<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user's tokens. Groups with higher <code>Precedence</code> values take precedence over groups with lower <code>Precedence</code> values or with null <code>Precedence</code> values.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>",
                                "minimum": 0,
                                "type": "integer"
                            },
                            "RoleArn": {
                                "description": "The role ARN for the group.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID for the user pool.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "GetIdentityProviderByIdentifierRequest": {
                "properties": {
                    "IdpIdentifier": {
                        "description": "The identity provider ID.",
                        "maxLength": 40,
                        "minLength": 1,
                        "pattern": "[\\w\\s+=.@-]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "IdpIdentifier"
                ],
                "type": "object"
            },
            "GetIdentityProviderByIdentifierResponse": {
                "properties": {
                    "IdentityProvider": {
                        "description": "The identity provider object.",
                        "properties": {
                            "AttributeMapping": {
                                "description": "A mapping of identity provider attributes to standard and custom user pool attributes.",
                                "items": {
                                    "properties": {
                                        "key": {
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "CreationDate": {
                                "description": "The date the identity provider was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "IdpIdentifiers": {
                                "description": "A list of identity provider identifiers.",
                                "items": {
                                    "maxLength": 40,
                                    "minLength": 1,
                                    "pattern": "[\\w\\s+=.@-]+",
                                    "type": "string"
                                },
                                "maxItems": 50,
                                "minItems": 0,
                                "type": "array"
                            },
                            "LastModifiedDate": {
                                "description": "The date the identity provider was last modified.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "ProviderDetails": {
                                "description": "The identity provider details, such as <code>MetadataURL</code> and <code>MetadataFile</code>.",
                                "items": {
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "ProviderName": {
                                "description": "The identity provider name.",
                                "maxLength": 32,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            },
                            "ProviderType": {
                                "description": "The identity provider type.",
                                "enum": [
                                    "SAML",
                                    "Facebook",
                                    "Google",
                                    "LoginWithAmazon",
                                    "OIDC"
                                ],
                                "type": "string"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "IdentityProvider"
                ],
                "type": "object"
            },
            "GetSigningCertificateRequest": {
                "description": "Request to get a signing certificate from Cognito.",
                "properties": {
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId"
                ],
                "type": "object"
            },
            "GetSigningCertificateResponse": {
                "description": "Response from Cognito for a signing certificate request.",
                "properties": {
                    "Certificate": {
                        "description": "The signing certificate.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetUICustomizationRequest": {
                "properties": {
                    "ClientId": {
                        "description": "The client ID for the client app.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId"
                ],
                "type": "object"
            },
            "GetUICustomizationResponse": {
                "properties": {
                    "UICustomization": {
                        "description": "The UI customization information.",
                        "properties": {
                            "CSS": {
                                "description": "The CSS values in the UI customization.",
                                "type": "string"
                            },
                            "CSSVersion": {
                                "description": "The CSS version number.",
                                "type": "string"
                            },
                            "ClientId": {
                                "description": "The client ID for the client app.",
                                "format": "password",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w+]+",
                                "type": "string"
                            },
                            "CreationDate": {
                                "description": "The creation date for the UI customization.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "ImageUrl": {
                                "description": "The logo image for the UI customization.",
                                "type": "string"
                            },
                            "LastModifiedDate": {
                                "description": "The last-modified date for the UI customization.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID for the user pool.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "UICustomization"
                ],
                "type": "object"
            },
            "GetUserAttributeVerificationCodeRequest": {
                "description": "Represents the request to get user attribute verification.",
                "properties": {
                    "AccessToken": {
                        "description": "The access token returned by the server response to get the user attribute verification code.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    },
                    "AttributeName": {
                        "description": "The attribute name returned by the server response to get the user attribute verification code.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "AccessToken",
                    "AttributeName"
                ],
                "type": "object"
            },
            "GetUserAttributeVerificationCodeResponse": {
                "description": "The verification code response returned by the server response to get the user attribute verification code.",
                "properties": {
                    "CodeDeliveryDetails": {
                        "description": "The code delivery details returned by the server in response to the request to get the user attribute verification code.",
                        "properties": {
                            "AttributeName": {
                                "description": "The attribute name.",
                                "maxLength": 32,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            },
                            "DeliveryMedium": {
                                "description": "The delivery medium (email message or phone number).",
                                "enum": [
                                    "SMS",
                                    "EMAIL"
                                ],
                                "type": "string"
                            },
                            "Destination": {
                                "description": "The destination for the code delivery details.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "GetUserPoolMfaConfigRequest": {
                "properties": {
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId"
                ],
                "type": "object"
            },
            "GetUserPoolMfaConfigResponse": {
                "properties": {
                    "MfaConfiguration": {
                        "description": "The multi-factor (MFA) configuration.",
                        "enum": [
                            "OFF",
                            "ON",
                            "OPTIONAL"
                        ],
                        "type": "string"
                    },
                    "SmsMfaConfiguration": {
                        "description": "The SMS text message multi-factor (MFA) configuration.",
                        "properties": {
                            "SmsAuthenticationMessage": {
                                "description": "The SMS authentication message.",
                                "maxLength": 140,
                                "minLength": 6,
                                "pattern": ".*\\{####\\}.*",
                                "type": "string"
                            },
                            "SmsConfiguration": {
                                "description": "The SMS configuration.",
                                "properties": {
                                    "ExternalId": {
                                        "description": "The external ID.",
                                        "type": "string"
                                    },
                                    "SnsCallerArn": {
                                        "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "SnsCallerArn"
                                ],
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "SoftwareTokenMfaConfiguration": {
                        "description": "The software token multi-factor (MFA) configuration.",
                        "properties": {
                            "Enabled": {
                                "description": "Specifies whether software token MFA is enabled.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "GetUserRequest": {
                "description": "Represents the request to get information about the user.",
                "properties": {
                    "AccessToken": {
                        "description": "The access token returned by the server response to get information about the user.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    }
                },
                "required": [
                    "AccessToken"
                ],
                "type": "object"
            },
            "GetUserResponse": {
                "description": "Represents the response from the server from the request to get information about the user.",
                "properties": {
                    "MFAOptions": {
                        "description": "Specifies the options for MFA (e.g., email or phone number).",
                        "items": {
                            "description": "Specifies the different settings for multi-factor authentication (MFA).",
                            "properties": {
                                "AttributeName": {
                                    "description": "The attribute name of the MFA option type.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "DeliveryMedium": {
                                    "description": "The delivery medium (email message or SMS message) to send the MFA code.",
                                    "enum": [
                                        "SMS",
                                        "EMAIL"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "PreferredMfaSetting": {
                        "description": "The user's preferred MFA setting.",
                        "type": "string"
                    },
                    "UserAttributes": {
                        "description": "<p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>",
                        "items": {
                            "description": "Specifies whether the attribute is standard or custom.",
                            "properties": {
                                "Name": {
                                    "description": "The name of the attribute.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "Value": {
                                    "description": "The value of the attribute.",
                                    "format": "password",
                                    "maxLength": 2048,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Name"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "UserMFASettingList": {
                        "description": "The list of the user's MFA settings.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Username": {
                        "description": "The user name of the user you wish to retrieve from the get user request.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "Username",
                    "UserAttributes"
                ],
                "type": "object"
            },
            "GlobalSignOutRequest": {
                "description": "Represents the request to sign out all devices.",
                "properties": {
                    "AccessToken": {
                        "description": "The access token.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    }
                },
                "required": [
                    "AccessToken"
                ],
                "type": "object"
            },
            "GlobalSignOutResponse": {
                "description": "The response to the request to sign out all devices.",
                "properties": {},
                "type": "object"
            },
            "GroupExistsException": {},
            "GroupListType": {
                "items": {
                    "description": "The group type.",
                    "properties": {
                        "CreationDate": {
                            "description": "The date the group was created.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "Description": {
                            "description": "A string containing the description of the group.",
                            "maxLength": 2048,
                            "type": "string"
                        },
                        "GroupName": {
                            "description": "The name of the group.",
                            "maxLength": 128,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "LastModifiedDate": {
                            "description": "The date the group was last modified.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "Precedence": {
                            "description": "<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user's tokens. Groups with higher <code>Precedence</code> values take precedence over groups with lower <code>Precedence</code> values or with null <code>Precedence</code> values.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "RoleArn": {
                            "description": "The role ARN for the group.",
                            "maxLength": 2048,
                            "minLength": 20,
                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                            "type": "string"
                        },
                        "UserPoolId": {
                            "description": "The user pool ID for the user pool.",
                            "maxLength": 55,
                            "minLength": 1,
                            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "GroupNameType": {
                "maxLength": 128,
                "minLength": 1,
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "type": "string"
            },
            "GroupType": {
                "description": "The group type.",
                "properties": {
                    "CreationDate": {
                        "description": "The date the group was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "Description": {
                        "description": "A string containing the description of the group.",
                        "maxLength": 2048,
                        "type": "string"
                    },
                    "GroupName": {
                        "description": "The name of the group.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "LastModifiedDate": {
                        "description": "The date the group was last modified.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "Precedence": {
                        "description": "<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user's tokens. Groups with higher <code>Precedence</code> values take precedence over groups with lower <code>Precedence</code> values or with null <code>Precedence</code> values.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "RoleArn": {
                        "description": "The role ARN for the group.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "HexStringType": {
                "pattern": "^[0-9a-fA-F]+$",
                "type": "string"
            },
            "HttpHeader": {
                "description": "The HTTP header.",
                "properties": {
                    "headerName": {
                        "description": "The header name",
                        "type": "string"
                    },
                    "headerValue": {
                        "description": "The header value.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "HttpHeaderList": {
                "items": {
                    "description": "The HTTP header.",
                    "properties": {
                        "headerName": {
                            "description": "The header name",
                            "type": "string"
                        },
                        "headerValue": {
                            "description": "The header value.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "IdentityProviderType": {
                "description": "A container for information about an identity provider.",
                "properties": {
                    "AttributeMapping": {
                        "description": "A mapping of identity provider attributes to standard and custom user pool attributes.",
                        "items": {
                            "properties": {
                                "key": {
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "CreationDate": {
                        "description": "The date the identity provider was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "IdpIdentifiers": {
                        "description": "A list of identity provider identifiers.",
                        "items": {
                            "maxLength": 40,
                            "minLength": 1,
                            "pattern": "[\\w\\s+=.@-]+",
                            "type": "string"
                        },
                        "maxItems": 50,
                        "minItems": 0,
                        "type": "array"
                    },
                    "LastModifiedDate": {
                        "description": "The date the identity provider was last modified.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "ProviderDetails": {
                        "description": "The identity provider details, such as <code>MetadataURL</code> and <code>MetadataFile</code>.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ProviderName": {
                        "description": "The identity provider name.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "ProviderType": {
                        "description": "The identity provider type.",
                        "enum": [
                            "SAML",
                            "Facebook",
                            "Google",
                            "LoginWithAmazon",
                            "OIDC"
                        ],
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "IdentityProviderTypeType": {
                "enum": [
                    "SAML",
                    "Facebook",
                    "Google",
                    "LoginWithAmazon",
                    "OIDC"
                ],
                "type": "string"
            },
            "IdpIdentifierType": {
                "maxLength": 40,
                "minLength": 1,
                "pattern": "[\\w\\s+=.@-]+",
                "type": "string"
            },
            "IdpIdentifiersListType": {
                "items": {
                    "maxLength": 40,
                    "minLength": 1,
                    "pattern": "[\\w\\s+=.@-]+",
                    "type": "string"
                },
                "maxItems": 50,
                "minItems": 0,
                "type": "array"
            },
            "ImageFileType": {
                "type": "string"
            },
            "ImageUrlType": {
                "type": "string"
            },
            "InitiateAuthRequest": {
                "description": "Initiates the authentication request.",
                "properties": {
                    "AnalyticsMetadata": {
                        "description": "The Amazon Pinpoint analytics metadata for collecting metrics for <code>InitiateAuth</code> calls.",
                        "properties": {
                            "AnalyticsEndpointId": {
                                "description": "The endpoint ID.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "AuthFlow": {
                        "description": "<p>The authentication flow for this call to execute. The API action will depend on this value. For example: </p> <ul> <li> <p> <code>REFRESH_TOKEN_AUTH</code> will take in a valid refresh token and return new tokens.</p> </li> <li> <p> <code>USER_SRP_AUTH</code> will take in <code>USERNAME</code> and <code>SRP_A</code> and return the SRP variables to be used for next challenge execution.</p> </li> <li> <p> <code>USER_PASSWORD_AUTH</code> will take in <code>USERNAME</code> and <code>PASSWORD</code> and return the next challenge or tokens.</p> </li> </ul> <p>Valid values include:</p> <ul> <li> <p> <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote Password (SRP) protocol.</p> </li> <li> <p> <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.</p> </li> <li> <p> <code>CUSTOM_AUTH</code>: Custom authentication flow.</p> </li> <li> <p> <code>USER_PASSWORD_AUTH</code>: Non-SRP authentication flow; USERNAME and PASSWORD are passed directly. If a user migration Lambda trigger is set, this flow will invoke the user migration Lambda if the USERNAME is not found in the user pool. </p> </li> </ul> <p> <code>ADMIN_NO_SRP_AUTH</code> is not a valid value.</p>",
                        "enum": [
                            "USER_SRP_AUTH",
                            "REFRESH_TOKEN_AUTH",
                            "REFRESH_TOKEN",
                            "CUSTOM_AUTH",
                            "ADMIN_NO_SRP_AUTH",
                            "USER_PASSWORD_AUTH"
                        ],
                        "type": "string"
                    },
                    "AuthParameters": {
                        "description": "<p>The authentication parameters. These are inputs corresponding to the <code>AuthFlow</code> that you are invoking. The required values depend on the value of <code>AuthFlow</code>:</p> <ul> <li> <p>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required), <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>: <code>REFRESH_TOKEN</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (if app client is configured with client secret), <code>DEVICE_KEY</code> </p> </li> </ul>",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ClientId": {
                        "description": "The app client ID.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "ClientMetadata": {
                        "description": "This is a random key-value pair map which can contain any key and will be passed to your PreAuthentication Lambda trigger as-is. It can be used to implement additional validations around authentication.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "UserContextData": {
                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                        "properties": {
                            "EncodedData": {
                                "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "AuthFlow",
                    "ClientId"
                ],
                "type": "object"
            },
            "InitiateAuthResponse": {
                "description": "Initiates the authentication response.",
                "properties": {
                    "AuthenticationResult": {
                        "description": "The result of the authentication response. This is only returned if the caller does not need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, <code>ChallengeName</code>, <code>ChallengeParameters</code>, and <code>Session</code> are returned.",
                        "properties": {
                            "AccessToken": {
                                "description": "The access token.",
                                "format": "password",
                                "pattern": "[A-Za-z0-9-_=.]+",
                                "type": "string"
                            },
                            "ExpiresIn": {
                                "description": "The expiration period of the authentication result in seconds.",
                                "type": "integer"
                            },
                            "IdToken": {
                                "description": "The ID token.",
                                "format": "password",
                                "pattern": "[A-Za-z0-9-_=.]+",
                                "type": "string"
                            },
                            "NewDeviceMetadata": {
                                "description": "The new device metadata from an authentication result.",
                                "properties": {
                                    "DeviceGroupKey": {
                                        "description": "The device group key.",
                                        "type": "string"
                                    },
                                    "DeviceKey": {
                                        "description": "The device key.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-f-]+",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "RefreshToken": {
                                "description": "The refresh token.",
                                "format": "password",
                                "pattern": "[A-Za-z0-9-_=.]+",
                                "type": "string"
                            },
                            "TokenType": {
                                "description": "The token type.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "ChallengeName": {
                        "description": "<p>The name of the challenge which you are responding to with this call. This is returned to you in the <code>AdminInitiateAuth</code> response if you need to pass another challenge.</p> <p>Valid values include the following. Note that all of these challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable) in the parameters.</p> <ul> <li> <p> <code>SMS_MFA</code>: Next challenge is to supply an <code>SMS_MFA_CODE</code>, delivered via SMS.</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: Next challenge is to supply <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after the client-side SRP calculations.</p> </li> <li> <p> <code>CUSTOM_CHALLENGE</code>: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.</p> </li> <li> <p> <code>DEVICE_SRP_AUTH</code>: If device tracking was enabled on your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.</p> </li> <li> <p> <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to <code>PASSWORD_VERIFIER</code>, but for devices only.</p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: For users which are required to change their passwords after successful first login. This challenge should be passed with <code>NEW_PASSWORD</code> and any other required attributes.</p> </li> </ul>",
                        "enum": [
                            "SMS_MFA",
                            "SOFTWARE_TOKEN_MFA",
                            "SELECT_MFA_TYPE",
                            "MFA_SETUP",
                            "PASSWORD_VERIFIER",
                            "CUSTOM_CHALLENGE",
                            "DEVICE_SRP_AUTH",
                            "DEVICE_PASSWORD_VERIFIER",
                            "ADMIN_NO_SRP_AUTH",
                            "NEW_PASSWORD_REQUIRED"
                        ],
                        "type": "string"
                    },
                    "ChallengeParameters": {
                        "description": "<p>The challenge parameters. These are returned to you in the <code>InitiateAuth</code> response if you need to pass another challenge. The responses in this parameter should be used to compute inputs to the next call (<code>RespondToAuthChallenge</code>). </p> <p>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable).</p>",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "Session": {
                        "description": "The session which should be passed both ways in challenge-response calls to the service. If the or API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "IntegerType": {
                "type": "integer"
            },
            "InternalErrorException": {},
            "InvalidEmailRoleAccessPolicyException": {},
            "InvalidLambdaResponseException": {},
            "InvalidOAuthFlowException": {},
            "InvalidParameterException": {},
            "InvalidPasswordException": {},
            "InvalidSmsRoleAccessPolicyException": {},
            "InvalidSmsRoleTrustRelationshipException": {},
            "InvalidUserPoolConfigurationException": {},
            "LambdaConfigType": {
                "description": "Specifies the configuration for AWS Lambda triggers.",
                "properties": {
                    "CreateAuthChallenge": {
                        "description": "Creates an authentication challenge.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    },
                    "CustomMessage": {
                        "description": "A custom Message AWS Lambda trigger.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    },
                    "DefineAuthChallenge": {
                        "description": "Defines the authentication challenge.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    },
                    "PostAuthentication": {
                        "description": "A post-authentication AWS Lambda trigger.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    },
                    "PostConfirmation": {
                        "description": "A post-confirmation AWS Lambda trigger.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    },
                    "PreAuthentication": {
                        "description": "A pre-authentication AWS Lambda trigger.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    },
                    "PreSignUp": {
                        "description": "A pre-registration AWS Lambda trigger.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    },
                    "PreTokenGeneration": {
                        "description": "A Lambda trigger that is invoked before token generation.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    },
                    "UserMigration": {
                        "description": "The user migration Lambda config type.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    },
                    "VerifyAuthChallengeResponse": {
                        "description": "Verifies the authentication challenge response.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LimitExceededException": {},
            "ListDevicesRequest": {
                "description": "Represents the request to list the devices.",
                "properties": {
                    "AccessToken": {
                        "description": "The access tokens for the request to list devices.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    },
                    "Limit": {
                        "description": "The limit of the device request.",
                        "maximum": 60,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "PaginationToken": {
                        "description": "The pagination token for the list request.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    }
                },
                "required": [
                    "AccessToken"
                ],
                "type": "object"
            },
            "ListDevicesResponse": {
                "description": "Represents the response to list devices.",
                "properties": {
                    "Devices": {
                        "description": "The devices returned in the list devices response.",
                        "items": {
                            "description": "The device type.",
                            "properties": {
                                "DeviceAttributes": {
                                    "description": "The device attributes.",
                                    "items": {
                                        "description": "Specifies whether the attribute is standard or custom.",
                                        "properties": {
                                            "Name": {
                                                "description": "The name of the attribute.",
                                                "maxLength": 32,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                "type": "string"
                                            },
                                            "Value": {
                                                "description": "The value of the attribute.",
                                                "format": "password",
                                                "maxLength": 2048,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "Name"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "DeviceCreateDate": {
                                    "description": "The creation date of the device.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "DeviceKey": {
                                    "description": "The device key.",
                                    "maxLength": 55,
                                    "minLength": 1,
                                    "pattern": "[\\w-]+_[0-9a-f-]+",
                                    "type": "string"
                                },
                                "DeviceLastAuthenticatedDate": {
                                    "description": "The date in which the device was last authenticated.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "DeviceLastModifiedDate": {
                                    "description": "The last modified date of the device.",
                                    "format": "date-time",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "PaginationToken": {
                        "description": "The pagination token for the list device response.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListGroupsRequest": {
                "properties": {
                    "Limit": {
                        "description": "The limit of the request to list groups.",
                        "maximum": 60,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "NextToken": {
                        "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId"
                ],
                "type": "object"
            },
            "ListGroupsResponse": {
                "properties": {
                    "Groups": {
                        "description": "The group objects for the groups.",
                        "items": {
                            "description": "The group type.",
                            "properties": {
                                "CreationDate": {
                                    "description": "The date the group was created.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "Description": {
                                    "description": "A string containing the description of the group.",
                                    "maxLength": 2048,
                                    "type": "string"
                                },
                                "GroupName": {
                                    "description": "The name of the group.",
                                    "maxLength": 128,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "LastModifiedDate": {
                                    "description": "The date the group was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "Precedence": {
                                    "description": "<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user's tokens. Groups with higher <code>Precedence</code> values take precedence over groups with lower <code>Precedence</code> values or with null <code>Precedence</code> values.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>",
                                    "minimum": 0,
                                    "type": "integer"
                                },
                                "RoleArn": {
                                    "description": "The role ARN for the group.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                    "type": "string"
                                },
                                "UserPoolId": {
                                    "description": "The user pool ID for the user pool.",
                                    "maxLength": 55,
                                    "minLength": 1,
                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "NextToken": {
                        "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListIdentityProvidersRequest": {
                "properties": {
                    "MaxResults": {
                        "description": "The maximum number of identity providers to return.",
                        "maximum": 60,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "NextToken": {
                        "description": "A pagination token.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId"
                ],
                "type": "object"
            },
            "ListIdentityProvidersResponse": {
                "properties": {
                    "NextToken": {
                        "description": "A pagination token.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "Providers": {
                        "description": "A list of identity provider objects.",
                        "items": {
                            "description": "A container for identity provider details.",
                            "properties": {
                                "CreationDate": {
                                    "description": "The date the provider was added to the user pool.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "LastModifiedDate": {
                                    "description": "The date the provider was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "ProviderName": {
                                    "description": "The identity provider name.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "ProviderType": {
                                    "description": "The identity provider type.",
                                    "enum": [
                                        "SAML",
                                        "Facebook",
                                        "Google",
                                        "LoginWithAmazon",
                                        "OIDC"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "maxItems": 50,
                        "minItems": 0,
                        "type": "array"
                    }
                },
                "required": [
                    "Providers"
                ],
                "type": "object"
            },
            "ListOfStringTypes": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "ListProvidersLimitType": {
                "maximum": 60,
                "minimum": 1,
                "type": "integer"
            },
            "ListResourceServersLimitType": {
                "maximum": 50,
                "minimum": 1,
                "type": "integer"
            },
            "ListResourceServersRequest": {
                "properties": {
                    "MaxResults": {
                        "description": "The maximum number of resource servers to return.",
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "NextToken": {
                        "description": "A pagination token.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId"
                ],
                "type": "object"
            },
            "ListResourceServersResponse": {
                "properties": {
                    "NextToken": {
                        "description": "A pagination token.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "ResourceServers": {
                        "description": "The resource servers.",
                        "items": {
                            "description": "A container for information about a resource server for a user pool.",
                            "properties": {
                                "Identifier": {
                                    "description": "The identifier for the resource server.",
                                    "maxLength": 256,
                                    "minLength": 1,
                                    "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                    "type": "string"
                                },
                                "Name": {
                                    "description": "The name of the resource server.",
                                    "maxLength": 256,
                                    "minLength": 1,
                                    "pattern": "[\\w\\s+=,.@-]+",
                                    "type": "string"
                                },
                                "Scopes": {
                                    "description": "A list of scopes that are defined for the resource server.",
                                    "items": {
                                        "description": "A resource server scope.",
                                        "properties": {
                                            "ScopeDescription": {
                                                "description": "A description of the scope.",
                                                "maxLength": 256,
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "ScopeName": {
                                                "description": "The name of the scope.",
                                                "maxLength": 256,
                                                "minLength": 1,
                                                "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "ScopeName",
                                            "ScopeDescription"
                                        ],
                                        "type": "object"
                                    },
                                    "maxItems": 25,
                                    "type": "array"
                                },
                                "UserPoolId": {
                                    "description": "The user pool ID for the user pool that hosts the resource server.",
                                    "maxLength": 55,
                                    "minLength": 1,
                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "ResourceServers"
                ],
                "type": "object"
            },
            "ListUserImportJobsRequest": {
                "description": "Represents the request to list the user import jobs.",
                "properties": {
                    "MaxResults": {
                        "description": "The maximum number of import jobs you want the request to return.",
                        "maximum": 60,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "PaginationToken": {
                        "description": "An identifier that was returned from the previous call to <code>ListUserImportJobs</code>, which can be used to return the next set of import jobs in the list.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool that the users are being imported into.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "MaxResults"
                ],
                "type": "object"
            },
            "ListUserImportJobsResponse": {
                "description": "Represents the response from the server to the request to list the user import jobs.",
                "properties": {
                    "PaginationToken": {
                        "description": "An identifier that can be used to return the next set of user import jobs in the list.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "UserImportJobs": {
                        "description": "The user import jobs.",
                        "items": {
                            "description": "The user import job type.",
                            "properties": {
                                "CloudWatchLogsRoleArn": {
                                    "description": "The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito Developer Guide.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                    "type": "string"
                                },
                                "CompletionDate": {
                                    "description": "The date when the user import job was completed.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "CompletionMessage": {
                                    "description": "The message returned when the user import job is completed.",
                                    "maxLength": 128,
                                    "minLength": 1,
                                    "pattern": "[\\w]+",
                                    "type": "string"
                                },
                                "CreationDate": {
                                    "description": "The date the user import job was created.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "FailedUsers": {
                                    "description": "The number of users that could not be imported.",
                                    "type": "integer"
                                },
                                "ImportedUsers": {
                                    "description": "The number of users that were successfully imported.",
                                    "type": "integer"
                                },
                                "JobId": {
                                    "description": "The job ID for the user import job.",
                                    "maxLength": 55,
                                    "minLength": 1,
                                    "pattern": "import-[0-9a-zA-Z-]+",
                                    "type": "string"
                                },
                                "JobName": {
                                    "description": "The job name for the user import job.",
                                    "maxLength": 128,
                                    "minLength": 1,
                                    "pattern": "[\\w\\s+=,.@-]+",
                                    "type": "string"
                                },
                                "PreSignedUrl": {
                                    "description": "The pre-signed URL to be used to upload the <code>.csv</code> file.",
                                    "maxLength": 2048,
                                    "minLength": 0,
                                    "type": "string"
                                },
                                "SkippedUsers": {
                                    "description": "The number of users that were skipped.",
                                    "type": "integer"
                                },
                                "StartDate": {
                                    "description": "The date when the user import job was started.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "Status": {
                                    "description": "<p>The status of the user import job. One of the following:</p> <ul> <li> <p> <code>Created</code> - The job was created but not started.</p> </li> <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li> <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li> <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li> <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li> <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li> <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li> <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.</p> </li> </ul>",
                                    "enum": [
                                        "Created",
                                        "Pending",
                                        "InProgress",
                                        "Stopping",
                                        "Expired",
                                        "Stopped",
                                        "Failed",
                                        "Succeeded"
                                    ],
                                    "type": "string"
                                },
                                "UserPoolId": {
                                    "description": "The user pool ID for the user pool that the users are being imported into.",
                                    "maxLength": 55,
                                    "minLength": 1,
                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "maxItems": 50,
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "ListUserPoolClientsRequest": {
                "description": "Represents the request to list the user pool clients.",
                "properties": {
                    "MaxResults": {
                        "description": "The maximum number of results you want the request to return when listing the user pool clients.",
                        "maximum": 60,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "NextToken": {
                        "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool where you want to list user pool clients.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId"
                ],
                "type": "object"
            },
            "ListUserPoolClientsResponse": {
                "description": "Represents the response from the server that lists user pool clients.",
                "properties": {
                    "NextToken": {
                        "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "UserPoolClients": {
                        "description": "The user pool clients in the response that lists user pool clients.",
                        "items": {
                            "description": "The description of the user pool client.",
                            "properties": {
                                "ClientId": {
                                    "description": "The ID of the client associated with the user pool.",
                                    "format": "password",
                                    "maxLength": 128,
                                    "minLength": 1,
                                    "pattern": "[\\w+]+",
                                    "type": "string"
                                },
                                "ClientName": {
                                    "description": "The client name from the user pool client description.",
                                    "maxLength": 128,
                                    "minLength": 1,
                                    "pattern": "[\\w\\s+=,.@-]+",
                                    "type": "string"
                                },
                                "UserPoolId": {
                                    "description": "The user pool ID for the user pool where you want to describe the user pool client.",
                                    "maxLength": 55,
                                    "minLength": 1,
                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "ListUserPoolsRequest": {
                "description": "Represents the request to list user pools.",
                "properties": {
                    "MaxResults": {
                        "description": "The maximum number of results you want the request to return when listing the user pools.",
                        "maximum": 60,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "NextToken": {
                        "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    }
                },
                "required": [
                    "MaxResults"
                ],
                "type": "object"
            },
            "ListUserPoolsResponse": {
                "description": "Represents the response to list user pools.",
                "properties": {
                    "NextToken": {
                        "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "UserPools": {
                        "description": "The user pools from the response to list users.",
                        "items": {
                            "description": "A user pool description.",
                            "properties": {
                                "CreationDate": {
                                    "description": "The date the user pool description was created.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "Id": {
                                    "description": "The ID in a user pool description.",
                                    "maxLength": 55,
                                    "minLength": 1,
                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                    "type": "string"
                                },
                                "LambdaConfig": {
                                    "description": "The AWS Lambda configuration information in a user pool description.",
                                    "properties": {
                                        "CreateAuthChallenge": {
                                            "description": "Creates an authentication challenge.",
                                            "maxLength": 2048,
                                            "minLength": 20,
                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                            "type": "string"
                                        },
                                        "CustomMessage": {
                                            "description": "A custom Message AWS Lambda trigger.",
                                            "maxLength": 2048,
                                            "minLength": 20,
                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                            "type": "string"
                                        },
                                        "DefineAuthChallenge": {
                                            "description": "Defines the authentication challenge.",
                                            "maxLength": 2048,
                                            "minLength": 20,
                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                            "type": "string"
                                        },
                                        "PostAuthentication": {
                                            "description": "A post-authentication AWS Lambda trigger.",
                                            "maxLength": 2048,
                                            "minLength": 20,
                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                            "type": "string"
                                        },
                                        "PostConfirmation": {
                                            "description": "A post-confirmation AWS Lambda trigger.",
                                            "maxLength": 2048,
                                            "minLength": 20,
                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                            "type": "string"
                                        },
                                        "PreAuthentication": {
                                            "description": "A pre-authentication AWS Lambda trigger.",
                                            "maxLength": 2048,
                                            "minLength": 20,
                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                            "type": "string"
                                        },
                                        "PreSignUp": {
                                            "description": "A pre-registration AWS Lambda trigger.",
                                            "maxLength": 2048,
                                            "minLength": 20,
                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                            "type": "string"
                                        },
                                        "PreTokenGeneration": {
                                            "description": "A Lambda trigger that is invoked before token generation.",
                                            "maxLength": 2048,
                                            "minLength": 20,
                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                            "type": "string"
                                        },
                                        "UserMigration": {
                                            "description": "The user migration Lambda config type.",
                                            "maxLength": 2048,
                                            "minLength": 20,
                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                            "type": "string"
                                        },
                                        "VerifyAuthChallengeResponse": {
                                            "description": "Verifies the authentication challenge response.",
                                            "maxLength": 2048,
                                            "minLength": 20,
                                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "LastModifiedDate": {
                                    "description": "The date the user pool description was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "Name": {
                                    "description": "The name in a user pool description.",
                                    "maxLength": 128,
                                    "minLength": 1,
                                    "pattern": "[\\w\\s+=,.@-]+",
                                    "type": "string"
                                },
                                "Status": {
                                    "description": "The user pool status in a user pool description.",
                                    "enum": [
                                        "Enabled",
                                        "Disabled"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "ListUsersInGroupRequest": {
                "properties": {
                    "GroupName": {
                        "description": "The name of the group.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "Limit": {
                        "description": "The limit of the request to list users.",
                        "maximum": 60,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "NextToken": {
                        "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "GroupName"
                ],
                "type": "object"
            },
            "ListUsersInGroupResponse": {
                "properties": {
                    "NextToken": {
                        "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "Users": {
                        "description": "The users returned in the request to list users.",
                        "items": {
                            "description": "The user type.",
                            "properties": {
                                "Attributes": {
                                    "description": "A container with information about the user type attributes.",
                                    "items": {
                                        "description": "Specifies whether the attribute is standard or custom.",
                                        "properties": {
                                            "Name": {
                                                "description": "The name of the attribute.",
                                                "maxLength": 32,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                "type": "string"
                                            },
                                            "Value": {
                                                "description": "The value of the attribute.",
                                                "format": "password",
                                                "maxLength": 2048,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "Name"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "Enabled": {
                                    "description": "Specifies whether the user is enabled.",
                                    "type": "boolean"
                                },
                                "MFAOptions": {
                                    "description": "The MFA options for the user.",
                                    "items": {
                                        "description": "Specifies the different settings for multi-factor authentication (MFA).",
                                        "properties": {
                                            "AttributeName": {
                                                "description": "The attribute name of the MFA option type.",
                                                "maxLength": 32,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                "type": "string"
                                            },
                                            "DeliveryMedium": {
                                                "description": "The delivery medium (email message or SMS message) to send the MFA code.",
                                                "enum": [
                                                    "SMS",
                                                    "EMAIL"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "UserCreateDate": {
                                    "description": "The creation date of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "UserLastModifiedDate": {
                                    "description": "The last modified date of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "UserStatus": {
                                    "description": "<p>The user status. Can be one of the following:</p> <ul> <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li> <li> <p>CONFIRMED - User has been confirmed.</p> </li> <li> <p>ARCHIVED - User is no longer active.</p> </li> <li> <p>COMPROMISED - User is disabled due to a potential security threat.</p> </li> <li> <p>UNKNOWN - User status is not known.</p> </li> </ul>",
                                    "enum": [
                                        "UNCONFIRMED",
                                        "CONFIRMED",
                                        "ARCHIVED",
                                        "COMPROMISED",
                                        "UNKNOWN",
                                        "RESET_REQUIRED",
                                        "FORCE_CHANGE_PASSWORD"
                                    ],
                                    "type": "string"
                                },
                                "Username": {
                                    "description": "The user name of the user you wish to describe.",
                                    "format": "password",
                                    "maxLength": 128,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "ListUsersRequest": {
                "description": "Represents the request to list users.",
                "properties": {
                    "AttributesToGet": {
                        "description": "An array of strings, where each string is the name of a user attribute to be returned for each user in the search results. If the array is null, all attributes are returned.",
                        "items": {
                            "maxLength": 32,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Filter": {
                        "description": "<p>A filter string of the form \"<i>AttributeName</i> <i>Filter-Type</i> \"<i>AttributeValue</i>\"\". Quotation marks within the filter string must be escaped using the backslash (\\) character. For example, \"<code>family_name</code> = \\\"Reddy\\\"\".</p> <ul> <li> <p> <i>AttributeName</i>: The name of the attribute to search for. You can only search for one attribute at a time.</p> </li> <li> <p> <i>Filter-Type</i>: For an exact match, use =, for example, \"<code>given_name</code> = \\\"Jon\\\"\". For a prefix (\"starts with\") match, use ^=, for example, \"<code>given_name</code> ^= \\\"Jon\\\"\". </p> </li> <li> <p> <i>AttributeValue</i>: The attribute value that must be matched for each user.</p> </li> </ul> <p>If the filter string is empty, <code>ListUsers</code> returns all users in the user pool.</p> <p>You can only search for the following standard attributes:</p> <ul> <li> <p> <code>username</code> (case-sensitive)</p> </li> <li> <p> <code>email</code> </p> </li> <li> <p> <code>phone_number</code> </p> </li> <li> <p> <code>name</code> </p> </li> <li> <p> <code>given_name</code> </p> </li> <li> <p> <code>family_name</code> </p> </li> <li> <p> <code>preferred_username</code> </p> </li> <li> <p> <code>cognito:user_status</code> (called <b>Status</b> in the Console) (case-insensitive)</p> </li> <li> <p> <code>status (called <b>Enabled</b> in the Console) (case-sensitive)</code> </p> </li> <li> <p> <code>sub</code> </p> </li> </ul> <p>Custom attributes are not searchable.</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api\">Searching for Users Using the ListUsers API</a> and <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples\">Examples of Using the ListUsers API</a> in the <i>Amazon Cognito Developer Guide</i>.</p>",
                        "maxLength": 256,
                        "type": "string"
                    },
                    "Limit": {
                        "description": "Maximum number of users to be returned.",
                        "maximum": 60,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "PaginationToken": {
                        "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool on which the search should be performed.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId"
                ],
                "type": "object"
            },
            "ListUsersResponse": {
                "description": "The response from the request to list users.",
                "properties": {
                    "PaginationToken": {
                        "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.",
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "Users": {
                        "description": "The users returned in the request to list users.",
                        "items": {
                            "description": "The user type.",
                            "properties": {
                                "Attributes": {
                                    "description": "A container with information about the user type attributes.",
                                    "items": {
                                        "description": "Specifies whether the attribute is standard or custom.",
                                        "properties": {
                                            "Name": {
                                                "description": "The name of the attribute.",
                                                "maxLength": 32,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                "type": "string"
                                            },
                                            "Value": {
                                                "description": "The value of the attribute.",
                                                "format": "password",
                                                "maxLength": 2048,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "Name"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "Enabled": {
                                    "description": "Specifies whether the user is enabled.",
                                    "type": "boolean"
                                },
                                "MFAOptions": {
                                    "description": "The MFA options for the user.",
                                    "items": {
                                        "description": "Specifies the different settings for multi-factor authentication (MFA).",
                                        "properties": {
                                            "AttributeName": {
                                                "description": "The attribute name of the MFA option type.",
                                                "maxLength": 32,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                                "type": "string"
                                            },
                                            "DeliveryMedium": {
                                                "description": "The delivery medium (email message or SMS message) to send the MFA code.",
                                                "enum": [
                                                    "SMS",
                                                    "EMAIL"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "UserCreateDate": {
                                    "description": "The creation date of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "UserLastModifiedDate": {
                                    "description": "The last modified date of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "UserStatus": {
                                    "description": "<p>The user status. Can be one of the following:</p> <ul> <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li> <li> <p>CONFIRMED - User has been confirmed.</p> </li> <li> <p>ARCHIVED - User is no longer active.</p> </li> <li> <p>COMPROMISED - User is disabled due to a potential security threat.</p> </li> <li> <p>UNKNOWN - User status is not known.</p> </li> </ul>",
                                    "enum": [
                                        "UNCONFIRMED",
                                        "CONFIRMED",
                                        "ARCHIVED",
                                        "COMPROMISED",
                                        "UNKNOWN",
                                        "RESET_REQUIRED",
                                        "FORCE_CHANGE_PASSWORD"
                                    ],
                                    "type": "string"
                                },
                                "Username": {
                                    "description": "The user name of the user you wish to describe.",
                                    "format": "password",
                                    "maxLength": 128,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "LogoutURLsListType": {
                "items": {
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                    "type": "string"
                },
                "maxItems": 100,
                "minItems": 0,
                "type": "array"
            },
            "LongType": {
                "type": "integer"
            },
            "MFAMethodNotFoundException": {},
            "MFAOptionListType": {
                "items": {
                    "description": "Specifies the different settings for multi-factor authentication (MFA).",
                    "properties": {
                        "AttributeName": {
                            "description": "The attribute name of the MFA option type.",
                            "maxLength": 32,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "DeliveryMedium": {
                            "description": "The delivery medium (email message or SMS message) to send the MFA code.",
                            "enum": [
                                "SMS",
                                "EMAIL"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "MFAOptionType": {
                "description": "Specifies the different settings for multi-factor authentication (MFA).",
                "properties": {
                    "AttributeName": {
                        "description": "The attribute name of the MFA option type.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "DeliveryMedium": {
                        "description": "The delivery medium (email message or SMS message) to send the MFA code.",
                        "enum": [
                            "SMS",
                            "EMAIL"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "MessageActionType": {
                "enum": [
                    "RESEND",
                    "SUPPRESS"
                ],
                "type": "string"
            },
            "MessageTemplateType": {
                "description": "The message template structure.",
                "properties": {
                    "EmailMessage": {
                        "description": "The message template for email messages.",
                        "maxLength": 20000,
                        "minLength": 6,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                        "type": "string"
                    },
                    "EmailSubject": {
                        "description": "The subject line for email messages.",
                        "maxLength": 140,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                        "type": "string"
                    },
                    "SMSMessage": {
                        "description": "The message template for SMS messages.",
                        "maxLength": 140,
                        "minLength": 6,
                        "pattern": ".*\\{####\\}.*",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "NewDeviceMetadataType": {
                "description": "The new device metadata type.",
                "properties": {
                    "DeviceGroupKey": {
                        "description": "The device group key.",
                        "type": "string"
                    },
                    "DeviceKey": {
                        "description": "The device key.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-f-]+",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "NotAuthorizedException": {},
            "NotifyConfigurationType": {
                "description": "The notify configuration type.",
                "properties": {
                    "BlockEmail": {
                        "description": "Email template used when a detected risk event is blocked.",
                        "properties": {
                            "HtmlBody": {
                                "description": "The HTML body.",
                                "maxLength": 20000,
                                "minLength": 6,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                "type": "string"
                            },
                            "Subject": {
                                "description": "The subject.",
                                "maxLength": 140,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                "type": "string"
                            },
                            "TextBody": {
                                "description": "The text body.",
                                "maxLength": 20000,
                                "minLength": 6,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                "type": "string"
                            }
                        },
                        "required": [
                            "Subject"
                        ],
                        "type": "object"
                    },
                    "From": {
                        "description": "The email address that is sending the email. It must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.",
                        "type": "string"
                    },
                    "MfaEmail": {
                        "description": "The MFA email template used when MFA is challenged as part of a detected risk.",
                        "properties": {
                            "HtmlBody": {
                                "description": "The HTML body.",
                                "maxLength": 20000,
                                "minLength": 6,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                "type": "string"
                            },
                            "Subject": {
                                "description": "The subject.",
                                "maxLength": 140,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                "type": "string"
                            },
                            "TextBody": {
                                "description": "The text body.",
                                "maxLength": 20000,
                                "minLength": 6,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                "type": "string"
                            }
                        },
                        "required": [
                            "Subject"
                        ],
                        "type": "object"
                    },
                    "NoActionEmail": {
                        "description": "The email template used when a detected risk event is allowed.",
                        "properties": {
                            "HtmlBody": {
                                "description": "The HTML body.",
                                "maxLength": 20000,
                                "minLength": 6,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                "type": "string"
                            },
                            "Subject": {
                                "description": "The subject.",
                                "maxLength": 140,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                "type": "string"
                            },
                            "TextBody": {
                                "description": "The text body.",
                                "maxLength": 20000,
                                "minLength": 6,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                "type": "string"
                            }
                        },
                        "required": [
                            "Subject"
                        ],
                        "type": "object"
                    },
                    "ReplyTo": {
                        "description": "The destination to which the receiver of an email should reply to.",
                        "type": "string"
                    },
                    "SourceArn": {
                        "description": "The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. It permits Amazon Cognito to send for the email address specified in the <code>From</code> parameter.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    }
                },
                "required": [
                    "SourceArn"
                ],
                "type": "object"
            },
            "NotifyEmailType": {
                "description": "The notify email type.",
                "properties": {
                    "HtmlBody": {
                        "description": "The HTML body.",
                        "maxLength": 20000,
                        "minLength": 6,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                        "type": "string"
                    },
                    "Subject": {
                        "description": "The subject.",
                        "maxLength": 140,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                        "type": "string"
                    },
                    "TextBody": {
                        "description": "The text body.",
                        "maxLength": 20000,
                        "minLength": 6,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                        "type": "string"
                    }
                },
                "required": [
                    "Subject"
                ],
                "type": "object"
            },
            "NumberAttributeConstraintsType": {
                "description": "The minimum and maximum value of an attribute that is of the number data type.",
                "properties": {
                    "MaxValue": {
                        "description": "The maximum value of an attribute that is of the number data type.",
                        "type": "string"
                    },
                    "MinValue": {
                        "description": "The minimum value of an attribute that is of the number data type.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OAuthFlowType": {
                "enum": [
                    "code",
                    "implicit",
                    "client_credentials"
                ],
                "type": "string"
            },
            "OAuthFlowsType": {
                "items": {
                    "enum": [
                        "code",
                        "implicit",
                        "client_credentials"
                    ],
                    "type": "string"
                },
                "maxItems": 3,
                "minItems": 0,
                "type": "array"
            },
            "PaginationKey": {
                "minLength": 1,
                "pattern": "[\\S]+",
                "type": "string"
            },
            "PaginationKeyType": {
                "minLength": 1,
                "pattern": "[\\S]+",
                "type": "string"
            },
            "PasswordPolicyMinLengthType": {
                "maximum": 99,
                "minimum": 6,
                "type": "integer"
            },
            "PasswordPolicyType": {
                "description": "The password policy type.",
                "properties": {
                    "MinimumLength": {
                        "description": "The minimum length of the password policy that you have set. Cannot be less than 6.",
                        "maximum": 99,
                        "minimum": 6,
                        "type": "integer"
                    },
                    "RequireLowercase": {
                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.",
                        "type": "boolean"
                    },
                    "RequireNumbers": {
                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one number in their password.",
                        "type": "boolean"
                    },
                    "RequireSymbols": {
                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.",
                        "type": "boolean"
                    },
                    "RequireUppercase": {
                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "PasswordResetRequiredException": {},
            "PasswordType": {
                "format": "password",
                "maxLength": 256,
                "minLength": 6,
                "pattern": "[\\S]+",
                "type": "string"
            },
            "PoolQueryLimitType": {
                "maximum": 60,
                "minimum": 1,
                "type": "integer"
            },
            "PreSignedUrlType": {
                "maxLength": 2048,
                "minLength": 0,
                "type": "string"
            },
            "PrecedenceType": {
                "minimum": 0,
                "type": "integer"
            },
            "PreconditionNotMetException": {},
            "ProviderDescription": {
                "description": "A container for identity provider details.",
                "properties": {
                    "CreationDate": {
                        "description": "The date the provider was added to the user pool.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "LastModifiedDate": {
                        "description": "The date the provider was last modified.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "ProviderName": {
                        "description": "The identity provider name.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "ProviderType": {
                        "description": "The identity provider type.",
                        "enum": [
                            "SAML",
                            "Facebook",
                            "Google",
                            "LoginWithAmazon",
                            "OIDC"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ProviderDetailsType": {
                "items": {
                    "properties": {
                        "key": {
                            "type": "string"
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ProviderNameType": {
                "maxLength": 32,
                "minLength": 1,
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "type": "string"
            },
            "ProviderNameTypeV1": {
                "maxLength": 32,
                "minLength": 1,
                "pattern": "[^_][\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}][^_]+",
                "type": "string"
            },
            "ProviderUserIdentifierType": {
                "description": "A container for information about an identity provider for a user pool.",
                "properties": {
                    "ProviderAttributeName": {
                        "description": "The name of the provider attribute to link to, for example, <code>NameID</code>.",
                        "type": "string"
                    },
                    "ProviderAttributeValue": {
                        "description": "The value of the provider attribute to link to, for example, <code>xxxxx_account</code>.",
                        "type": "string"
                    },
                    "ProviderName": {
                        "description": "The name of the provider, for example, Facebook, Google, or Login with Amazon.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ProvidersListType": {
                "items": {
                    "description": "A container for identity provider details.",
                    "properties": {
                        "CreationDate": {
                            "description": "The date the provider was added to the user pool.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "LastModifiedDate": {
                            "description": "The date the provider was last modified.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "ProviderName": {
                            "description": "The identity provider name.",
                            "maxLength": 32,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "ProviderType": {
                            "description": "The identity provider type.",
                            "enum": [
                                "SAML",
                                "Facebook",
                                "Google",
                                "LoginWithAmazon",
                                "OIDC"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "maxItems": 50,
                "minItems": 0,
                "type": "array"
            },
            "QueryLimit": {
                "maximum": 60,
                "minimum": 1,
                "type": "integer"
            },
            "QueryLimitType": {
                "maximum": 60,
                "minimum": 0,
                "type": "integer"
            },
            "RedirectUrlType": {
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "type": "string"
            },
            "RefreshTokenValidityType": {
                "maximum": 3650,
                "minimum": 0,
                "type": "integer"
            },
            "ResendConfirmationCodeRequest": {
                "description": "Represents the request to resend the confirmation code.",
                "properties": {
                    "AnalyticsMetadata": {
                        "description": "The Amazon Pinpoint analytics metadata for collecting metrics for <code>ResendConfirmationCode</code> calls.",
                        "properties": {
                            "AnalyticsEndpointId": {
                                "description": "The endpoint ID.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "ClientId": {
                        "description": "The ID of the client associated with the user pool.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "SecretHash": {
                        "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+=/]+",
                        "type": "string"
                    },
                    "UserContextData": {
                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                        "properties": {
                            "EncodedData": {
                                "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "Username": {
                        "description": "The user name of the user to whom you wish to resend a confirmation code.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "ClientId",
                    "Username"
                ],
                "type": "object"
            },
            "ResendConfirmationCodeResponse": {
                "description": "The response from the server when the Amazon Cognito Your User Pools service makes the request to resend a confirmation code.",
                "properties": {
                    "CodeDeliveryDetails": {
                        "description": "The code delivery details returned by the server in response to the request to resend the confirmation code.",
                        "properties": {
                            "AttributeName": {
                                "description": "The attribute name.",
                                "maxLength": 32,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            },
                            "DeliveryMedium": {
                                "description": "The delivery medium (email message or phone number).",
                                "enum": [
                                    "SMS",
                                    "EMAIL"
                                ],
                                "type": "string"
                            },
                            "Destination": {
                                "description": "The destination for the code delivery details.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "ResourceNotFoundException": {},
            "ResourceServerIdentifierType": {
                "maxLength": 256,
                "minLength": 1,
                "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                "type": "string"
            },
            "ResourceServerNameType": {
                "maxLength": 256,
                "minLength": 1,
                "pattern": "[\\w\\s+=,.@-]+",
                "type": "string"
            },
            "ResourceServerScopeDescriptionType": {
                "maxLength": 256,
                "minLength": 1,
                "type": "string"
            },
            "ResourceServerScopeListType": {
                "items": {
                    "description": "A resource server scope.",
                    "properties": {
                        "ScopeDescription": {
                            "description": "A description of the scope.",
                            "maxLength": 256,
                            "minLength": 1,
                            "type": "string"
                        },
                        "ScopeName": {
                            "description": "The name of the scope.",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                            "type": "string"
                        }
                    },
                    "required": [
                        "ScopeName",
                        "ScopeDescription"
                    ],
                    "type": "object"
                },
                "maxItems": 25,
                "type": "array"
            },
            "ResourceServerScopeNameType": {
                "maxLength": 256,
                "minLength": 1,
                "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                "type": "string"
            },
            "ResourceServerScopeType": {
                "description": "A resource server scope.",
                "properties": {
                    "ScopeDescription": {
                        "description": "A description of the scope.",
                        "maxLength": 256,
                        "minLength": 1,
                        "type": "string"
                    },
                    "ScopeName": {
                        "description": "The name of the scope.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                        "type": "string"
                    }
                },
                "required": [
                    "ScopeName",
                    "ScopeDescription"
                ],
                "type": "object"
            },
            "ResourceServerType": {
                "description": "A container for information about a resource server for a user pool.",
                "properties": {
                    "Identifier": {
                        "description": "The identifier for the resource server.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                        "type": "string"
                    },
                    "Name": {
                        "description": "The name of the resource server.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "[\\w\\s+=,.@-]+",
                        "type": "string"
                    },
                    "Scopes": {
                        "description": "A list of scopes that are defined for the resource server.",
                        "items": {
                            "description": "A resource server scope.",
                            "properties": {
                                "ScopeDescription": {
                                    "description": "A description of the scope.",
                                    "maxLength": 256,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "ScopeName": {
                                    "description": "The name of the scope.",
                                    "maxLength": 256,
                                    "minLength": 1,
                                    "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ScopeName",
                                "ScopeDescription"
                            ],
                            "type": "object"
                        },
                        "maxItems": 25,
                        "type": "array"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool that hosts the resource server.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ResourceServersListType": {
                "items": {
                    "description": "A container for information about a resource server for a user pool.",
                    "properties": {
                        "Identifier": {
                            "description": "The identifier for the resource server.",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                            "type": "string"
                        },
                        "Name": {
                            "description": "The name of the resource server.",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "[\\w\\s+=,.@-]+",
                            "type": "string"
                        },
                        "Scopes": {
                            "description": "A list of scopes that are defined for the resource server.",
                            "items": {
                                "description": "A resource server scope.",
                                "properties": {
                                    "ScopeDescription": {
                                        "description": "A description of the scope.",
                                        "maxLength": 256,
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "ScopeName": {
                                        "description": "The name of the scope.",
                                        "maxLength": 256,
                                        "minLength": 1,
                                        "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "ScopeName",
                                    "ScopeDescription"
                                ],
                                "type": "object"
                            },
                            "maxItems": 25,
                            "type": "array"
                        },
                        "UserPoolId": {
                            "description": "The user pool ID for the user pool that hosts the resource server.",
                            "maxLength": 55,
                            "minLength": 1,
                            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "RespondToAuthChallengeRequest": {
                "description": "The request to respond to an authentication challenge.",
                "properties": {
                    "AnalyticsMetadata": {
                        "description": "The Amazon Pinpoint analytics metadata for collecting metrics for <code>RespondToAuthChallenge</code> calls.",
                        "properties": {
                            "AnalyticsEndpointId": {
                                "description": "The endpoint ID.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "ChallengeName": {
                        "description": "<p>The challenge name. For more information, see .</p> <p> <code>ADMIN_NO_SRP_AUTH</code> is not a valid value.</p>",
                        "enum": [
                            "SMS_MFA",
                            "SOFTWARE_TOKEN_MFA",
                            "SELECT_MFA_TYPE",
                            "MFA_SETUP",
                            "PASSWORD_VERIFIER",
                            "CUSTOM_CHALLENGE",
                            "DEVICE_SRP_AUTH",
                            "DEVICE_PASSWORD_VERIFIER",
                            "ADMIN_NO_SRP_AUTH",
                            "NEW_PASSWORD_REQUIRED"
                        ],
                        "type": "string"
                    },
                    "ChallengeResponses": {
                        "description": "<p>The challenge responses. These are inputs corresponding to the value of <code>ChallengeName</code>, for example:</p> <ul> <li> <p> <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret). </p> </li> </ul>",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ClientId": {
                        "description": "The app client ID.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "Session": {
                        "description": "The session which should be passed both ways in challenge-response calls to the service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "type": "string"
                    },
                    "UserContextData": {
                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                        "properties": {
                            "EncodedData": {
                                "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "ClientId",
                    "ChallengeName"
                ],
                "type": "object"
            },
            "RespondToAuthChallengeResponse": {
                "description": "The response to respond to the authentication challenge.",
                "properties": {
                    "AuthenticationResult": {
                        "description": "The result returned by the server in response to the request to respond to the authentication challenge.",
                        "properties": {
                            "AccessToken": {
                                "description": "The access token.",
                                "format": "password",
                                "pattern": "[A-Za-z0-9-_=.]+",
                                "type": "string"
                            },
                            "ExpiresIn": {
                                "description": "The expiration period of the authentication result in seconds.",
                                "type": "integer"
                            },
                            "IdToken": {
                                "description": "The ID token.",
                                "format": "password",
                                "pattern": "[A-Za-z0-9-_=.]+",
                                "type": "string"
                            },
                            "NewDeviceMetadata": {
                                "description": "The new device metadata from an authentication result.",
                                "properties": {
                                    "DeviceGroupKey": {
                                        "description": "The device group key.",
                                        "type": "string"
                                    },
                                    "DeviceKey": {
                                        "description": "The device key.",
                                        "maxLength": 55,
                                        "minLength": 1,
                                        "pattern": "[\\w-]+_[0-9a-f-]+",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "RefreshToken": {
                                "description": "The refresh token.",
                                "format": "password",
                                "pattern": "[A-Za-z0-9-_=.]+",
                                "type": "string"
                            },
                            "TokenType": {
                                "description": "The token type.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "ChallengeName": {
                        "description": "The challenge name. For more information, see .",
                        "enum": [
                            "SMS_MFA",
                            "SOFTWARE_TOKEN_MFA",
                            "SELECT_MFA_TYPE",
                            "MFA_SETUP",
                            "PASSWORD_VERIFIER",
                            "CUSTOM_CHALLENGE",
                            "DEVICE_SRP_AUTH",
                            "DEVICE_PASSWORD_VERIFIER",
                            "ADMIN_NO_SRP_AUTH",
                            "NEW_PASSWORD_REQUIRED"
                        ],
                        "type": "string"
                    },
                    "ChallengeParameters": {
                        "description": "The challenge parameters. For more information, see .",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "Session": {
                        "description": "The session which should be passed both ways in challenge-response calls to the service. If the or API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RiskConfigurationType": {
                "description": "The risk configuration type.",
                "properties": {
                    "AccountTakeoverRiskConfiguration": {
                        "description": "The account takeover risk configuration object including the <code>NotifyConfiguration</code> object and <code>Actions</code> to take in the case of an account takeover.",
                        "properties": {
                            "Actions": {
                                "description": "Account takeover risk configuration actions",
                                "properties": {
                                    "HighAction": {
                                        "description": "Action to take for a high risk.",
                                        "properties": {
                                            "EventAction": {
                                                "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                "enum": [
                                                    "BLOCK",
                                                    "MFA_IF_CONFIGURED",
                                                    "MFA_REQUIRED",
                                                    "NO_ACTION"
                                                ],
                                                "type": "string"
                                            },
                                            "Notify": {
                                                "description": "Flag specifying whether to send a notification.",
                                                "type": "boolean"
                                            }
                                        },
                                        "required": [
                                            "Notify",
                                            "EventAction"
                                        ],
                                        "type": "object"
                                    },
                                    "LowAction": {
                                        "description": "Action to take for a low risk.",
                                        "properties": {
                                            "EventAction": {
                                                "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                "enum": [
                                                    "BLOCK",
                                                    "MFA_IF_CONFIGURED",
                                                    "MFA_REQUIRED",
                                                    "NO_ACTION"
                                                ],
                                                "type": "string"
                                            },
                                            "Notify": {
                                                "description": "Flag specifying whether to send a notification.",
                                                "type": "boolean"
                                            }
                                        },
                                        "required": [
                                            "Notify",
                                            "EventAction"
                                        ],
                                        "type": "object"
                                    },
                                    "MediumAction": {
                                        "description": "Action to take for a medium risk.",
                                        "properties": {
                                            "EventAction": {
                                                "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                "enum": [
                                                    "BLOCK",
                                                    "MFA_IF_CONFIGURED",
                                                    "MFA_REQUIRED",
                                                    "NO_ACTION"
                                                ],
                                                "type": "string"
                                            },
                                            "Notify": {
                                                "description": "Flag specifying whether to send a notification.",
                                                "type": "boolean"
                                            }
                                        },
                                        "required": [
                                            "Notify",
                                            "EventAction"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "NotifyConfiguration": {
                                "description": "The notify configuration used to construct email notifications.",
                                "properties": {
                                    "BlockEmail": {
                                        "description": "Email template used when a detected risk event is blocked.",
                                        "properties": {
                                            "HtmlBody": {
                                                "description": "The HTML body.",
                                                "maxLength": 20000,
                                                "minLength": 6,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                "type": "string"
                                            },
                                            "Subject": {
                                                "description": "The subject.",
                                                "maxLength": 140,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                "type": "string"
                                            },
                                            "TextBody": {
                                                "description": "The text body.",
                                                "maxLength": 20000,
                                                "minLength": 6,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "Subject"
                                        ],
                                        "type": "object"
                                    },
                                    "From": {
                                        "description": "The email address that is sending the email. It must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.",
                                        "type": "string"
                                    },
                                    "MfaEmail": {
                                        "description": "The MFA email template used when MFA is challenged as part of a detected risk.",
                                        "properties": {
                                            "HtmlBody": {
                                                "description": "The HTML body.",
                                                "maxLength": 20000,
                                                "minLength": 6,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                "type": "string"
                                            },
                                            "Subject": {
                                                "description": "The subject.",
                                                "maxLength": 140,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                "type": "string"
                                            },
                                            "TextBody": {
                                                "description": "The text body.",
                                                "maxLength": 20000,
                                                "minLength": 6,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "Subject"
                                        ],
                                        "type": "object"
                                    },
                                    "NoActionEmail": {
                                        "description": "The email template used when a detected risk event is allowed.",
                                        "properties": {
                                            "HtmlBody": {
                                                "description": "The HTML body.",
                                                "maxLength": 20000,
                                                "minLength": 6,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                "type": "string"
                                            },
                                            "Subject": {
                                                "description": "The subject.",
                                                "maxLength": 140,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                "type": "string"
                                            },
                                            "TextBody": {
                                                "description": "The text body.",
                                                "maxLength": 20000,
                                                "minLength": 6,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "Subject"
                                        ],
                                        "type": "object"
                                    },
                                    "ReplyTo": {
                                        "description": "The destination to which the receiver of an email should reply to.",
                                        "type": "string"
                                    },
                                    "SourceArn": {
                                        "description": "The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. It permits Amazon Cognito to send for the email address specified in the <code>From</code> parameter.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "SourceArn"
                                ],
                                "type": "object"
                            }
                        },
                        "required": [
                            "Actions"
                        ],
                        "type": "object"
                    },
                    "ClientId": {
                        "description": "The app client ID.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "CompromisedCredentialsRiskConfiguration": {
                        "description": "The compromised credentials risk configuration object including the <code>EventFilter</code> and the <code>EventAction</code> ",
                        "properties": {
                            "Actions": {
                                "description": "The compromised credentials risk configuration actions.",
                                "properties": {
                                    "EventAction": {
                                        "description": "The event action.",
                                        "enum": [
                                            "BLOCK",
                                            "NO_ACTION"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "EventAction"
                                ],
                                "type": "object"
                            },
                            "EventFilter": {
                                "description": "Perform the action for these events. The default is to perform all events if no event filter is specified.",
                                "items": {
                                    "enum": [
                                        "SIGN_IN",
                                        "PASSWORD_CHANGE",
                                        "SIGN_UP"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "Actions"
                        ],
                        "type": "object"
                    },
                    "LastModifiedDate": {
                        "description": "The last modified date.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "RiskExceptionConfiguration": {
                        "description": "The configuration to override the risk decision.",
                        "properties": {
                            "BlockedIPRangeList": {
                                "description": "Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation: a compact representation of an IP address and its associated routing prefix.",
                                "items": {
                                    "type": "string"
                                },
                                "maxItems": 20,
                                "type": "array"
                            },
                            "SkippedIPRangeList": {
                                "description": "Risk detection is not performed on the IP addresses in the range list. The IP range is in CIDR notation.",
                                "items": {
                                    "type": "string"
                                },
                                "maxItems": 20,
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RiskDecisionType": {
                "enum": [
                    "NoRisk",
                    "AccountTakeover",
                    "Block"
                ],
                "type": "string"
            },
            "RiskExceptionConfigurationType": {
                "description": "The type of the configuration to override the risk decision.",
                "properties": {
                    "BlockedIPRangeList": {
                        "description": "Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation: a compact representation of an IP address and its associated routing prefix.",
                        "items": {
                            "type": "string"
                        },
                        "maxItems": 20,
                        "type": "array"
                    },
                    "SkippedIPRangeList": {
                        "description": "Risk detection is not performed on the IP addresses in the range list. The IP range is in CIDR notation.",
                        "items": {
                            "type": "string"
                        },
                        "maxItems": 20,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "RiskLevelType": {
                "enum": [
                    "Low",
                    "Medium",
                    "High"
                ],
                "type": "string"
            },
            "S3BucketType": {
                "maxLength": 1024,
                "minLength": 3,
                "pattern": "^[0-9A-Za-z\\.\\-_]*(?<!\\.)$",
                "type": "string"
            },
            "SMSMfaSettingsType": {
                "description": "The SMS multi-factor authentication (MFA) settings type.",
                "properties": {
                    "Enabled": {
                        "description": "Specifies whether SMS text message MFA is enabled.",
                        "type": "boolean"
                    },
                    "PreferredMfa": {
                        "description": "The preferred MFA method.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "SchemaAttributeType": {
                "description": "Contains information about the schema attribute.",
                "properties": {
                    "AttributeDataType": {
                        "description": "The attribute data type.",
                        "enum": [
                            "String",
                            "Number",
                            "DateTime",
                            "Boolean"
                        ],
                        "type": "string"
                    },
                    "DeveloperOnlyAttribute": {
                        "description": "Specifies whether the attribute type is developer only.",
                        "type": "boolean"
                    },
                    "Mutable": {
                        "description": "<p>Specifies whether the value of the attribute can be changed.</p> <p>For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html\">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>",
                        "type": "boolean"
                    },
                    "Name": {
                        "description": "A schema attribute of the name type.",
                        "maxLength": 20,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "NumberAttributeConstraints": {
                        "description": "Specifies the constraints for an attribute of the number type.",
                        "properties": {
                            "MaxValue": {
                                "description": "The maximum value of an attribute that is of the number data type.",
                                "type": "string"
                            },
                            "MinValue": {
                                "description": "The minimum value of an attribute that is of the number data type.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "Required": {
                        "description": "Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.",
                        "type": "boolean"
                    },
                    "StringAttributeConstraints": {
                        "description": "Specifies the constraints for an attribute of the string type.",
                        "properties": {
                            "MaxLength": {
                                "description": "The maximum length.",
                                "type": "string"
                            },
                            "MinLength": {
                                "description": "The minimum length.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "SchemaAttributesListType": {
                "items": {
                    "description": "Contains information about the schema attribute.",
                    "properties": {
                        "AttributeDataType": {
                            "description": "The attribute data type.",
                            "enum": [
                                "String",
                                "Number",
                                "DateTime",
                                "Boolean"
                            ],
                            "type": "string"
                        },
                        "DeveloperOnlyAttribute": {
                            "description": "Specifies whether the attribute type is developer only.",
                            "type": "boolean"
                        },
                        "Mutable": {
                            "description": "<p>Specifies whether the value of the attribute can be changed.</p> <p>For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html\">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>",
                            "type": "boolean"
                        },
                        "Name": {
                            "description": "A schema attribute of the name type.",
                            "maxLength": 20,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "NumberAttributeConstraints": {
                            "description": "Specifies the constraints for an attribute of the number type.",
                            "properties": {
                                "MaxValue": {
                                    "description": "The maximum value of an attribute that is of the number data type.",
                                    "type": "string"
                                },
                                "MinValue": {
                                    "description": "The minimum value of an attribute that is of the number data type.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "Required": {
                            "description": "Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.",
                            "type": "boolean"
                        },
                        "StringAttributeConstraints": {
                            "description": "Specifies the constraints for an attribute of the string type.",
                            "properties": {
                                "MaxLength": {
                                    "description": "The maximum length.",
                                    "type": "string"
                                },
                                "MinLength": {
                                    "description": "The minimum length.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "maxItems": 50,
                "minItems": 1,
                "type": "array"
            },
            "ScopeDoesNotExistException": {},
            "ScopeListType": {
                "items": {
                    "maxLength": 256,
                    "minLength": 1,
                    "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                    "type": "string"
                },
                "maxItems": 25,
                "type": "array"
            },
            "ScopeType": {
                "maxLength": 256,
                "minLength": 1,
                "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                "type": "string"
            },
            "SearchPaginationTokenType": {
                "minLength": 1,
                "pattern": "[\\S]+",
                "type": "string"
            },
            "SearchedAttributeNamesListType": {
                "items": {
                    "maxLength": 32,
                    "minLength": 1,
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                    "type": "string"
                },
                "type": "array"
            },
            "SecretCodeType": {
                "format": "password",
                "minLength": 16,
                "pattern": "[A-Za-z0-9]+",
                "type": "string"
            },
            "SecretHashType": {
                "format": "password",
                "maxLength": 128,
                "minLength": 1,
                "pattern": "[\\w+=/]+",
                "type": "string"
            },
            "SessionType": {
                "maxLength": 2048,
                "minLength": 20,
                "type": "string"
            },
            "SetRiskConfigurationRequest": {
                "properties": {
                    "AccountTakeoverRiskConfiguration": {
                        "description": "The account takeover risk configuration.",
                        "properties": {
                            "Actions": {
                                "description": "Account takeover risk configuration actions",
                                "properties": {
                                    "HighAction": {
                                        "description": "Action to take for a high risk.",
                                        "properties": {
                                            "EventAction": {
                                                "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                "enum": [
                                                    "BLOCK",
                                                    "MFA_IF_CONFIGURED",
                                                    "MFA_REQUIRED",
                                                    "NO_ACTION"
                                                ],
                                                "type": "string"
                                            },
                                            "Notify": {
                                                "description": "Flag specifying whether to send a notification.",
                                                "type": "boolean"
                                            }
                                        },
                                        "required": [
                                            "Notify",
                                            "EventAction"
                                        ],
                                        "type": "object"
                                    },
                                    "LowAction": {
                                        "description": "Action to take for a low risk.",
                                        "properties": {
                                            "EventAction": {
                                                "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                "enum": [
                                                    "BLOCK",
                                                    "MFA_IF_CONFIGURED",
                                                    "MFA_REQUIRED",
                                                    "NO_ACTION"
                                                ],
                                                "type": "string"
                                            },
                                            "Notify": {
                                                "description": "Flag specifying whether to send a notification.",
                                                "type": "boolean"
                                            }
                                        },
                                        "required": [
                                            "Notify",
                                            "EventAction"
                                        ],
                                        "type": "object"
                                    },
                                    "MediumAction": {
                                        "description": "Action to take for a medium risk.",
                                        "properties": {
                                            "EventAction": {
                                                "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                "enum": [
                                                    "BLOCK",
                                                    "MFA_IF_CONFIGURED",
                                                    "MFA_REQUIRED",
                                                    "NO_ACTION"
                                                ],
                                                "type": "string"
                                            },
                                            "Notify": {
                                                "description": "Flag specifying whether to send a notification.",
                                                "type": "boolean"
                                            }
                                        },
                                        "required": [
                                            "Notify",
                                            "EventAction"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "NotifyConfiguration": {
                                "description": "The notify configuration used to construct email notifications.",
                                "properties": {
                                    "BlockEmail": {
                                        "description": "Email template used when a detected risk event is blocked.",
                                        "properties": {
                                            "HtmlBody": {
                                                "description": "The HTML body.",
                                                "maxLength": 20000,
                                                "minLength": 6,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                "type": "string"
                                            },
                                            "Subject": {
                                                "description": "The subject.",
                                                "maxLength": 140,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                "type": "string"
                                            },
                                            "TextBody": {
                                                "description": "The text body.",
                                                "maxLength": 20000,
                                                "minLength": 6,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "Subject"
                                        ],
                                        "type": "object"
                                    },
                                    "From": {
                                        "description": "The email address that is sending the email. It must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.",
                                        "type": "string"
                                    },
                                    "MfaEmail": {
                                        "description": "The MFA email template used when MFA is challenged as part of a detected risk.",
                                        "properties": {
                                            "HtmlBody": {
                                                "description": "The HTML body.",
                                                "maxLength": 20000,
                                                "minLength": 6,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                "type": "string"
                                            },
                                            "Subject": {
                                                "description": "The subject.",
                                                "maxLength": 140,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                "type": "string"
                                            },
                                            "TextBody": {
                                                "description": "The text body.",
                                                "maxLength": 20000,
                                                "minLength": 6,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "Subject"
                                        ],
                                        "type": "object"
                                    },
                                    "NoActionEmail": {
                                        "description": "The email template used when a detected risk event is allowed.",
                                        "properties": {
                                            "HtmlBody": {
                                                "description": "The HTML body.",
                                                "maxLength": 20000,
                                                "minLength": 6,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                "type": "string"
                                            },
                                            "Subject": {
                                                "description": "The subject.",
                                                "maxLength": 140,
                                                "minLength": 1,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                "type": "string"
                                            },
                                            "TextBody": {
                                                "description": "The text body.",
                                                "maxLength": 20000,
                                                "minLength": 6,
                                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "Subject"
                                        ],
                                        "type": "object"
                                    },
                                    "ReplyTo": {
                                        "description": "The destination to which the receiver of an email should reply to.",
                                        "type": "string"
                                    },
                                    "SourceArn": {
                                        "description": "The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. It permits Amazon Cognito to send for the email address specified in the <code>From</code> parameter.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "SourceArn"
                                ],
                                "type": "object"
                            }
                        },
                        "required": [
                            "Actions"
                        ],
                        "type": "object"
                    },
                    "ClientId": {
                        "description": "<p>The app client ID. If <code>ClientId</code> is null, then the risk configuration is mapped to <code>userPoolId</code>. When the client ID is null, the same risk configuration is applied to all the clients in the userPool.</p> <p>Otherwise, <code>ClientId</code> is mapped to the client. When the client ID is not null, the user pool configuration is overridden and the risk configuration for the client is used instead.</p>",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "CompromisedCredentialsRiskConfiguration": {
                        "description": "The compromised credentials risk configuration.",
                        "properties": {
                            "Actions": {
                                "description": "The compromised credentials risk configuration actions.",
                                "properties": {
                                    "EventAction": {
                                        "description": "The event action.",
                                        "enum": [
                                            "BLOCK",
                                            "NO_ACTION"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "EventAction"
                                ],
                                "type": "object"
                            },
                            "EventFilter": {
                                "description": "Perform the action for these events. The default is to perform all events if no event filter is specified.",
                                "items": {
                                    "enum": [
                                        "SIGN_IN",
                                        "PASSWORD_CHANGE",
                                        "SIGN_UP"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "Actions"
                        ],
                        "type": "object"
                    },
                    "RiskExceptionConfiguration": {
                        "description": "The configuration to override the risk decision.",
                        "properties": {
                            "BlockedIPRangeList": {
                                "description": "Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation: a compact representation of an IP address and its associated routing prefix.",
                                "items": {
                                    "type": "string"
                                },
                                "maxItems": 20,
                                "type": "array"
                            },
                            "SkippedIPRangeList": {
                                "description": "Risk detection is not performed on the IP addresses in the range list. The IP range is in CIDR notation.",
                                "items": {
                                    "type": "string"
                                },
                                "maxItems": 20,
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID. ",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId"
                ],
                "type": "object"
            },
            "SetRiskConfigurationResponse": {
                "properties": {
                    "RiskConfiguration": {
                        "description": "The risk configuration.",
                        "properties": {
                            "AccountTakeoverRiskConfiguration": {
                                "description": "The account takeover risk configuration object including the <code>NotifyConfiguration</code> object and <code>Actions</code> to take in the case of an account takeover.",
                                "properties": {
                                    "Actions": {
                                        "description": "Account takeover risk configuration actions",
                                        "properties": {
                                            "HighAction": {
                                                "description": "Action to take for a high risk.",
                                                "properties": {
                                                    "EventAction": {
                                                        "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                        "enum": [
                                                            "BLOCK",
                                                            "MFA_IF_CONFIGURED",
                                                            "MFA_REQUIRED",
                                                            "NO_ACTION"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "Notify": {
                                                        "description": "Flag specifying whether to send a notification.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "required": [
                                                    "Notify",
                                                    "EventAction"
                                                ],
                                                "type": "object"
                                            },
                                            "LowAction": {
                                                "description": "Action to take for a low risk.",
                                                "properties": {
                                                    "EventAction": {
                                                        "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                        "enum": [
                                                            "BLOCK",
                                                            "MFA_IF_CONFIGURED",
                                                            "MFA_REQUIRED",
                                                            "NO_ACTION"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "Notify": {
                                                        "description": "Flag specifying whether to send a notification.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "required": [
                                                    "Notify",
                                                    "EventAction"
                                                ],
                                                "type": "object"
                                            },
                                            "MediumAction": {
                                                "description": "Action to take for a medium risk.",
                                                "properties": {
                                                    "EventAction": {
                                                        "description": "<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>",
                                                        "enum": [
                                                            "BLOCK",
                                                            "MFA_IF_CONFIGURED",
                                                            "MFA_REQUIRED",
                                                            "NO_ACTION"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "Notify": {
                                                        "description": "Flag specifying whether to send a notification.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "required": [
                                                    "Notify",
                                                    "EventAction"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "NotifyConfiguration": {
                                        "description": "The notify configuration used to construct email notifications.",
                                        "properties": {
                                            "BlockEmail": {
                                                "description": "Email template used when a detected risk event is blocked.",
                                                "properties": {
                                                    "HtmlBody": {
                                                        "description": "The HTML body.",
                                                        "maxLength": 20000,
                                                        "minLength": 6,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                        "type": "string"
                                                    },
                                                    "Subject": {
                                                        "description": "The subject.",
                                                        "maxLength": 140,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                        "type": "string"
                                                    },
                                                    "TextBody": {
                                                        "description": "The text body.",
                                                        "maxLength": 20000,
                                                        "minLength": 6,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "Subject"
                                                ],
                                                "type": "object"
                                            },
                                            "From": {
                                                "description": "The email address that is sending the email. It must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.",
                                                "type": "string"
                                            },
                                            "MfaEmail": {
                                                "description": "The MFA email template used when MFA is challenged as part of a detected risk.",
                                                "properties": {
                                                    "HtmlBody": {
                                                        "description": "The HTML body.",
                                                        "maxLength": 20000,
                                                        "minLength": 6,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                        "type": "string"
                                                    },
                                                    "Subject": {
                                                        "description": "The subject.",
                                                        "maxLength": 140,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                        "type": "string"
                                                    },
                                                    "TextBody": {
                                                        "description": "The text body.",
                                                        "maxLength": 20000,
                                                        "minLength": 6,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "Subject"
                                                ],
                                                "type": "object"
                                            },
                                            "NoActionEmail": {
                                                "description": "The email template used when a detected risk event is allowed.",
                                                "properties": {
                                                    "HtmlBody": {
                                                        "description": "The HTML body.",
                                                        "maxLength": 20000,
                                                        "minLength": 6,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                        "type": "string"
                                                    },
                                                    "Subject": {
                                                        "description": "The subject.",
                                                        "maxLength": 140,
                                                        "minLength": 1,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                                        "type": "string"
                                                    },
                                                    "TextBody": {
                                                        "description": "The text body.",
                                                        "maxLength": 20000,
                                                        "minLength": 6,
                                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]+",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "Subject"
                                                ],
                                                "type": "object"
                                            },
                                            "ReplyTo": {
                                                "description": "The destination to which the receiver of an email should reply to.",
                                                "type": "string"
                                            },
                                            "SourceArn": {
                                                "description": "The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. It permits Amazon Cognito to send for the email address specified in the <code>From</code> parameter.",
                                                "maxLength": 2048,
                                                "minLength": 20,
                                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "SourceArn"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "Actions"
                                ],
                                "type": "object"
                            },
                            "ClientId": {
                                "description": "The app client ID.",
                                "format": "password",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w+]+",
                                "type": "string"
                            },
                            "CompromisedCredentialsRiskConfiguration": {
                                "description": "The compromised credentials risk configuration object including the <code>EventFilter</code> and the <code>EventAction</code> ",
                                "properties": {
                                    "Actions": {
                                        "description": "The compromised credentials risk configuration actions.",
                                        "properties": {
                                            "EventAction": {
                                                "description": "The event action.",
                                                "enum": [
                                                    "BLOCK",
                                                    "NO_ACTION"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "EventAction"
                                        ],
                                        "type": "object"
                                    },
                                    "EventFilter": {
                                        "description": "Perform the action for these events. The default is to perform all events if no event filter is specified.",
                                        "items": {
                                            "enum": [
                                                "SIGN_IN",
                                                "PASSWORD_CHANGE",
                                                "SIGN_UP"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "Actions"
                                ],
                                "type": "object"
                            },
                            "LastModifiedDate": {
                                "description": "The last modified date.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "RiskExceptionConfiguration": {
                                "description": "The configuration to override the risk decision.",
                                "properties": {
                                    "BlockedIPRangeList": {
                                        "description": "Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation: a compact representation of an IP address and its associated routing prefix.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "maxItems": 20,
                                        "type": "array"
                                    },
                                    "SkippedIPRangeList": {
                                        "description": "Risk detection is not performed on the IP addresses in the range list. The IP range is in CIDR notation.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "maxItems": 20,
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "RiskConfiguration"
                ],
                "type": "object"
            },
            "SetUICustomizationRequest": {
                "properties": {
                    "CSS": {
                        "description": "The CSS values in the UI customization.",
                        "type": "string"
                    },
                    "ClientId": {
                        "description": "The client ID for the client app.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "ImageFile": {
                        "description": "The uploaded logo image for the UI customization.",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId"
                ],
                "type": "object"
            },
            "SetUICustomizationResponse": {
                "properties": {
                    "UICustomization": {
                        "description": "The UI customization information.",
                        "properties": {
                            "CSS": {
                                "description": "The CSS values in the UI customization.",
                                "type": "string"
                            },
                            "CSSVersion": {
                                "description": "The CSS version number.",
                                "type": "string"
                            },
                            "ClientId": {
                                "description": "The client ID for the client app.",
                                "format": "password",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w+]+",
                                "type": "string"
                            },
                            "CreationDate": {
                                "description": "The creation date for the UI customization.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "ImageUrl": {
                                "description": "The logo image for the UI customization.",
                                "type": "string"
                            },
                            "LastModifiedDate": {
                                "description": "The last-modified date for the UI customization.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID for the user pool.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "UICustomization"
                ],
                "type": "object"
            },
            "SetUserMFAPreferenceRequest": {
                "properties": {
                    "AccessToken": {
                        "description": "The access token.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    },
                    "SMSMfaSettings": {
                        "description": "The SMS text message multi-factor authentication (MFA) settings.",
                        "properties": {
                            "Enabled": {
                                "description": "Specifies whether SMS text message MFA is enabled.",
                                "type": "boolean"
                            },
                            "PreferredMfa": {
                                "description": "The preferred MFA method.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "SoftwareTokenMfaSettings": {
                        "description": "The time-based one-time password software token MFA settings.",
                        "properties": {
                            "Enabled": {
                                "description": "Specifies whether software token MFA is enabled.",
                                "type": "boolean"
                            },
                            "PreferredMfa": {
                                "description": "The preferred MFA method.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "AccessToken"
                ],
                "type": "object"
            },
            "SetUserMFAPreferenceResponse": {
                "properties": {},
                "type": "object"
            },
            "SetUserPoolMfaConfigRequest": {
                "properties": {
                    "MfaConfiguration": {
                        "description": "The MFA configuration.",
                        "enum": [
                            "OFF",
                            "ON",
                            "OPTIONAL"
                        ],
                        "type": "string"
                    },
                    "SmsMfaConfiguration": {
                        "description": "The SMS text message MFA configuration.",
                        "properties": {
                            "SmsAuthenticationMessage": {
                                "description": "The SMS authentication message.",
                                "maxLength": 140,
                                "minLength": 6,
                                "pattern": ".*\\{####\\}.*",
                                "type": "string"
                            },
                            "SmsConfiguration": {
                                "description": "The SMS configuration.",
                                "properties": {
                                    "ExternalId": {
                                        "description": "The external ID.",
                                        "type": "string"
                                    },
                                    "SnsCallerArn": {
                                        "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "SnsCallerArn"
                                ],
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "SoftwareTokenMfaConfiguration": {
                        "description": "The software token MFA configuration.",
                        "properties": {
                            "Enabled": {
                                "description": "Specifies whether software token MFA is enabled.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId"
                ],
                "type": "object"
            },
            "SetUserPoolMfaConfigResponse": {
                "properties": {
                    "MfaConfiguration": {
                        "description": "The MFA configuration.",
                        "enum": [
                            "OFF",
                            "ON",
                            "OPTIONAL"
                        ],
                        "type": "string"
                    },
                    "SmsMfaConfiguration": {
                        "description": "The SMS text message MFA configuration.",
                        "properties": {
                            "SmsAuthenticationMessage": {
                                "description": "The SMS authentication message.",
                                "maxLength": 140,
                                "minLength": 6,
                                "pattern": ".*\\{####\\}.*",
                                "type": "string"
                            },
                            "SmsConfiguration": {
                                "description": "The SMS configuration.",
                                "properties": {
                                    "ExternalId": {
                                        "description": "The external ID.",
                                        "type": "string"
                                    },
                                    "SnsCallerArn": {
                                        "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "SnsCallerArn"
                                ],
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "SoftwareTokenMfaConfiguration": {
                        "description": "The software token MFA configuration.",
                        "properties": {
                            "Enabled": {
                                "description": "Specifies whether software token MFA is enabled.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "SetUserSettingsRequest": {
                "description": "Represents the request to set user settings.",
                "properties": {
                    "AccessToken": {
                        "description": "The access token for the set user settings request.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    },
                    "MFAOptions": {
                        "description": "Specifies the options for MFA (e.g., email or phone number).",
                        "items": {
                            "description": "Specifies the different settings for multi-factor authentication (MFA).",
                            "properties": {
                                "AttributeName": {
                                    "description": "The attribute name of the MFA option type.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "DeliveryMedium": {
                                    "description": "The delivery medium (email message or SMS message) to send the MFA code.",
                                    "enum": [
                                        "SMS",
                                        "EMAIL"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "AccessToken",
                    "MFAOptions"
                ],
                "type": "object"
            },
            "SetUserSettingsResponse": {
                "description": "The response from the server for a set user settings request.",
                "properties": {},
                "type": "object"
            },
            "SignUpRequest": {
                "description": "Represents the request to register a user.",
                "properties": {
                    "AnalyticsMetadata": {
                        "description": "The Amazon Pinpoint analytics metadata for collecting metrics for <code>SignUp</code> calls.",
                        "properties": {
                            "AnalyticsEndpointId": {
                                "description": "The endpoint ID.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "ClientId": {
                        "description": "The ID of the client associated with the user pool.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "Password": {
                        "description": "The password of the user you wish to register.",
                        "format": "password",
                        "maxLength": 256,
                        "minLength": 6,
                        "pattern": "[\\S]+",
                        "type": "string"
                    },
                    "SecretHash": {
                        "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+=/]+",
                        "type": "string"
                    },
                    "UserAttributes": {
                        "description": "<p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>",
                        "items": {
                            "description": "Specifies whether the attribute is standard or custom.",
                            "properties": {
                                "Name": {
                                    "description": "The name of the attribute.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "Value": {
                                    "description": "The value of the attribute.",
                                    "format": "password",
                                    "maxLength": 2048,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Name"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "UserContextData": {
                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                        "properties": {
                            "EncodedData": {
                                "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "Username": {
                        "description": "The user name of the user you wish to register.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "ValidationData": {
                        "description": "The validation data in the request to register a user.",
                        "items": {
                            "description": "Specifies whether the attribute is standard or custom.",
                            "properties": {
                                "Name": {
                                    "description": "The name of the attribute.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "Value": {
                                    "description": "The value of the attribute.",
                                    "format": "password",
                                    "maxLength": 2048,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Name"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "ClientId",
                    "Username",
                    "Password"
                ],
                "type": "object"
            },
            "SignUpResponse": {
                "description": "The response from the server for a registration request.",
                "properties": {
                    "CodeDeliveryDetails": {
                        "description": "The code delivery details returned by the server response to the user registration request.",
                        "properties": {
                            "AttributeName": {
                                "description": "The attribute name.",
                                "maxLength": 32,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            },
                            "DeliveryMedium": {
                                "description": "The delivery medium (email message or phone number).",
                                "enum": [
                                    "SMS",
                                    "EMAIL"
                                ],
                                "type": "string"
                            },
                            "Destination": {
                                "description": "The destination for the code delivery details.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "UserConfirmed": {
                        "description": "A response from the server indicating that a user registration has been confirmed.",
                        "type": "boolean"
                    },
                    "UserSub": {
                        "description": "The UUID of the authenticated user. This is not the same as <code>username</code>.",
                        "type": "string"
                    }
                },
                "required": [
                    "UserConfirmed",
                    "UserSub"
                ],
                "type": "object"
            },
            "SkippedIPRangeListType": {
                "items": {
                    "type": "string"
                },
                "maxItems": 20,
                "type": "array"
            },
            "SmsConfigurationType": {
                "description": "The SMS configuration type.",
                "properties": {
                    "ExternalId": {
                        "description": "The external ID.",
                        "type": "string"
                    },
                    "SnsCallerArn": {
                        "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    }
                },
                "required": [
                    "SnsCallerArn"
                ],
                "type": "object"
            },
            "SmsMfaConfigType": {
                "description": "The SMS text message multi-factor authentication (MFA) configuration type.",
                "properties": {
                    "SmsAuthenticationMessage": {
                        "description": "The SMS authentication message.",
                        "maxLength": 140,
                        "minLength": 6,
                        "pattern": ".*\\{####\\}.*",
                        "type": "string"
                    },
                    "SmsConfiguration": {
                        "description": "The SMS configuration.",
                        "properties": {
                            "ExternalId": {
                                "description": "The external ID.",
                                "type": "string"
                            },
                            "SnsCallerArn": {
                                "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "SnsCallerArn"
                        ],
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "SmsVerificationMessageType": {
                "maxLength": 140,
                "minLength": 6,
                "pattern": ".*\\{####\\}.*",
                "type": "string"
            },
            "SoftwareTokenMFANotFoundException": {},
            "SoftwareTokenMFAUserCodeType": {
                "maxLength": 6,
                "minLength": 6,
                "pattern": "[0-9]+",
                "type": "string"
            },
            "SoftwareTokenMfaConfigType": {
                "description": "The type used for enabling software token MFA at the user pool level.",
                "properties": {
                    "Enabled": {
                        "description": "Specifies whether software token MFA is enabled.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "SoftwareTokenMfaSettingsType": {
                "description": "The type used for enabling software token MFA at the user level.",
                "properties": {
                    "Enabled": {
                        "description": "Specifies whether software token MFA is enabled.",
                        "type": "boolean"
                    },
                    "PreferredMfa": {
                        "description": "The preferred MFA method.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "StartUserImportJobRequest": {
                "description": "Represents the request to start the user import job.",
                "properties": {
                    "JobId": {
                        "description": "The job ID for the user import job.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "import-[0-9a-zA-Z-]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool that the users are being imported into.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "JobId"
                ],
                "type": "object"
            },
            "StartUserImportJobResponse": {
                "description": "Represents the response from the server to the request to start the user import job.",
                "properties": {
                    "UserImportJob": {
                        "description": "The job object that represents the user import job.",
                        "properties": {
                            "CloudWatchLogsRoleArn": {
                                "description": "The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito Developer Guide.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "CompletionDate": {
                                "description": "The date when the user import job was completed.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "CompletionMessage": {
                                "description": "The message returned when the user import job is completed.",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w]+",
                                "type": "string"
                            },
                            "CreationDate": {
                                "description": "The date the user import job was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "FailedUsers": {
                                "description": "The number of users that could not be imported.",
                                "type": "integer"
                            },
                            "ImportedUsers": {
                                "description": "The number of users that were successfully imported.",
                                "type": "integer"
                            },
                            "JobId": {
                                "description": "The job ID for the user import job.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "import-[0-9a-zA-Z-]+",
                                "type": "string"
                            },
                            "JobName": {
                                "description": "The job name for the user import job.",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w\\s+=,.@-]+",
                                "type": "string"
                            },
                            "PreSignedUrl": {
                                "description": "The pre-signed URL to be used to upload the <code>.csv</code> file.",
                                "maxLength": 2048,
                                "minLength": 0,
                                "type": "string"
                            },
                            "SkippedUsers": {
                                "description": "The number of users that were skipped.",
                                "type": "integer"
                            },
                            "StartDate": {
                                "description": "The date when the user import job was started.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "Status": {
                                "description": "<p>The status of the user import job. One of the following:</p> <ul> <li> <p> <code>Created</code> - The job was created but not started.</p> </li> <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li> <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li> <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li> <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li> <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li> <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li> <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.</p> </li> </ul>",
                                "enum": [
                                    "Created",
                                    "Pending",
                                    "InProgress",
                                    "Stopping",
                                    "Expired",
                                    "Stopped",
                                    "Failed",
                                    "Succeeded"
                                ],
                                "type": "string"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID for the user pool that the users are being imported into.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "StatusType": {
                "enum": [
                    "Enabled",
                    "Disabled"
                ],
                "type": "string"
            },
            "StopUserImportJobRequest": {
                "description": "Represents the request to stop the user import job.",
                "properties": {
                    "JobId": {
                        "description": "The job ID for the user import job.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "import-[0-9a-zA-Z-]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool that the users are being imported into.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "JobId"
                ],
                "type": "object"
            },
            "StopUserImportJobResponse": {
                "description": "Represents the response from the server to the request to stop the user import job.",
                "properties": {
                    "UserImportJob": {
                        "description": "The job object that represents the user import job.",
                        "properties": {
                            "CloudWatchLogsRoleArn": {
                                "description": "The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito Developer Guide.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "CompletionDate": {
                                "description": "The date when the user import job was completed.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "CompletionMessage": {
                                "description": "The message returned when the user import job is completed.",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w]+",
                                "type": "string"
                            },
                            "CreationDate": {
                                "description": "The date the user import job was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "FailedUsers": {
                                "description": "The number of users that could not be imported.",
                                "type": "integer"
                            },
                            "ImportedUsers": {
                                "description": "The number of users that were successfully imported.",
                                "type": "integer"
                            },
                            "JobId": {
                                "description": "The job ID for the user import job.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "import-[0-9a-zA-Z-]+",
                                "type": "string"
                            },
                            "JobName": {
                                "description": "The job name for the user import job.",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w\\s+=,.@-]+",
                                "type": "string"
                            },
                            "PreSignedUrl": {
                                "description": "The pre-signed URL to be used to upload the <code>.csv</code> file.",
                                "maxLength": 2048,
                                "minLength": 0,
                                "type": "string"
                            },
                            "SkippedUsers": {
                                "description": "The number of users that were skipped.",
                                "type": "integer"
                            },
                            "StartDate": {
                                "description": "The date when the user import job was started.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "Status": {
                                "description": "<p>The status of the user import job. One of the following:</p> <ul> <li> <p> <code>Created</code> - The job was created but not started.</p> </li> <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li> <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li> <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li> <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li> <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li> <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li> <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.</p> </li> </ul>",
                                "enum": [
                                    "Created",
                                    "Pending",
                                    "InProgress",
                                    "Stopping",
                                    "Expired",
                                    "Stopped",
                                    "Failed",
                                    "Succeeded"
                                ],
                                "type": "string"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID for the user pool that the users are being imported into.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "StringAttributeConstraintsType": {
                "description": "The constraints associated with a string attribute.",
                "properties": {
                    "MaxLength": {
                        "description": "The maximum length.",
                        "type": "string"
                    },
                    "MinLength": {
                        "description": "The minimum length.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StringType": {
                "type": "string"
            },
            "SupportedIdentityProvidersListType": {
                "items": {
                    "maxLength": 32,
                    "minLength": 1,
                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                    "type": "string"
                },
                "type": "array"
            },
            "TokenModelType": {
                "format": "password",
                "pattern": "[A-Za-z0-9-_=.]+",
                "type": "string"
            },
            "TooManyFailedAttemptsException": {},
            "TooManyRequestsException": {},
            "UICustomizationType": {
                "description": "A container for the UI customization information for a user pool's built-in app UI.",
                "properties": {
                    "CSS": {
                        "description": "The CSS values in the UI customization.",
                        "type": "string"
                    },
                    "CSSVersion": {
                        "description": "The CSS version number.",
                        "type": "string"
                    },
                    "ClientId": {
                        "description": "The client ID for the client app.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "CreationDate": {
                        "description": "The creation date for the UI customization.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "ImageUrl": {
                        "description": "The logo image for the UI customization.",
                        "type": "string"
                    },
                    "LastModifiedDate": {
                        "description": "The last-modified date for the UI customization.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UnexpectedLambdaException": {},
            "UnsupportedIdentityProviderException": {},
            "UnsupportedUserStateException": {},
            "UpdateAuthEventFeedbackRequest": {
                "properties": {
                    "EventId": {
                        "description": "The event ID.",
                        "maxLength": 50,
                        "minLength": 1,
                        "pattern": "[\\w+-]+",
                        "type": "string"
                    },
                    "FeedbackToken": {
                        "description": "The feedback token.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    },
                    "FeedbackValue": {
                        "description": "The authentication event feedback value.",
                        "enum": [
                            "Valid",
                            "Invalid"
                        ],
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user pool username.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Username",
                    "EventId",
                    "FeedbackToken",
                    "FeedbackValue"
                ],
                "type": "object"
            },
            "UpdateAuthEventFeedbackResponse": {
                "properties": {},
                "type": "object"
            },
            "UpdateDeviceStatusRequest": {
                "description": "Represents the request to update the device status.",
                "properties": {
                    "AccessToken": {
                        "description": "The access token.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    },
                    "DeviceKey": {
                        "description": "The device key.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-f-]+",
                        "type": "string"
                    },
                    "DeviceRememberedStatus": {
                        "description": "The status of whether a device is remembered.",
                        "enum": [
                            "remembered",
                            "not_remembered"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "AccessToken",
                    "DeviceKey"
                ],
                "type": "object"
            },
            "UpdateDeviceStatusResponse": {
                "description": "The response to the request to update the device status.",
                "properties": {},
                "type": "object"
            },
            "UpdateGroupRequest": {
                "properties": {
                    "Description": {
                        "description": "A string containing the new description of the group.",
                        "maxLength": 2048,
                        "type": "string"
                    },
                    "GroupName": {
                        "description": "The name of the group.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "Precedence": {
                        "description": "The new precedence value for the group. For more information about this parameter, see .",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "RoleArn": {
                        "description": "The new role ARN for the group. This is used for setting the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the token.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "GroupName",
                    "UserPoolId"
                ],
                "type": "object"
            },
            "UpdateGroupResponse": {
                "properties": {
                    "Group": {
                        "description": "The group object for the group.",
                        "properties": {
                            "CreationDate": {
                                "description": "The date the group was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "Description": {
                                "description": "A string containing the description of the group.",
                                "maxLength": 2048,
                                "type": "string"
                            },
                            "GroupName": {
                                "description": "The name of the group.",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            },
                            "LastModifiedDate": {
                                "description": "The date the group was last modified.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "Precedence": {
                                "description": "<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user's tokens. Groups with higher <code>Precedence</code> values take precedence over groups with lower <code>Precedence</code> values or with null <code>Precedence</code> values.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>",
                                "minimum": 0,
                                "type": "integer"
                            },
                            "RoleArn": {
                                "description": "The role ARN for the group.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID for the user pool.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "UpdateIdentityProviderRequest": {
                "properties": {
                    "AttributeMapping": {
                        "description": "The identity provider attribute mapping to be changed.",
                        "items": {
                            "properties": {
                                "key": {
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "IdpIdentifiers": {
                        "description": "A list of identity provider identifiers.",
                        "items": {
                            "maxLength": 40,
                            "minLength": 1,
                            "pattern": "[\\w\\s+=.@-]+",
                            "type": "string"
                        },
                        "maxItems": 50,
                        "minItems": 0,
                        "type": "array"
                    },
                    "ProviderDetails": {
                        "description": "The identity provider details to be updated, such as <code>MetadataURL</code> and <code>MetadataFile</code>.",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ProviderName": {
                        "description": "The identity provider name.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "ProviderName"
                ],
                "type": "object"
            },
            "UpdateIdentityProviderResponse": {
                "properties": {
                    "IdentityProvider": {
                        "description": "The identity provider object.",
                        "properties": {
                            "AttributeMapping": {
                                "description": "A mapping of identity provider attributes to standard and custom user pool attributes.",
                                "items": {
                                    "properties": {
                                        "key": {
                                            "maxLength": 32,
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "CreationDate": {
                                "description": "The date the identity provider was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "IdpIdentifiers": {
                                "description": "A list of identity provider identifiers.",
                                "items": {
                                    "maxLength": 40,
                                    "minLength": 1,
                                    "pattern": "[\\w\\s+=.@-]+",
                                    "type": "string"
                                },
                                "maxItems": 50,
                                "minItems": 0,
                                "type": "array"
                            },
                            "LastModifiedDate": {
                                "description": "The date the identity provider was last modified.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "ProviderDetails": {
                                "description": "The identity provider details, such as <code>MetadataURL</code> and <code>MetadataFile</code>.",
                                "items": {
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "ProviderName": {
                                "description": "The identity provider name.",
                                "maxLength": 32,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            },
                            "ProviderType": {
                                "description": "The identity provider type.",
                                "enum": [
                                    "SAML",
                                    "Facebook",
                                    "Google",
                                    "LoginWithAmazon",
                                    "OIDC"
                                ],
                                "type": "string"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "IdentityProvider"
                ],
                "type": "object"
            },
            "UpdateResourceServerRequest": {
                "properties": {
                    "Identifier": {
                        "description": "The identifier for the resource server.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                        "type": "string"
                    },
                    "Name": {
                        "description": "The name of the resource server.",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "[\\w\\s+=,.@-]+",
                        "type": "string"
                    },
                    "Scopes": {
                        "description": "The scope values to be set for the resource server.",
                        "items": {
                            "description": "A resource server scope.",
                            "properties": {
                                "ScopeDescription": {
                                    "description": "A description of the scope.",
                                    "maxLength": 256,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "ScopeName": {
                                    "description": "The name of the scope.",
                                    "maxLength": 256,
                                    "minLength": 1,
                                    "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ScopeName",
                                "ScopeDescription"
                            ],
                            "type": "object"
                        },
                        "maxItems": 25,
                        "type": "array"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserPoolId",
                    "Identifier",
                    "Name"
                ],
                "type": "object"
            },
            "UpdateResourceServerResponse": {
                "properties": {
                    "ResourceServer": {
                        "description": "The resource server.",
                        "properties": {
                            "Identifier": {
                                "description": "The identifier for the resource server.",
                                "maxLength": 256,
                                "minLength": 1,
                                "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                "type": "string"
                            },
                            "Name": {
                                "description": "The name of the resource server.",
                                "maxLength": 256,
                                "minLength": 1,
                                "pattern": "[\\w\\s+=,.@-]+",
                                "type": "string"
                            },
                            "Scopes": {
                                "description": "A list of scopes that are defined for the resource server.",
                                "items": {
                                    "description": "A resource server scope.",
                                    "properties": {
                                        "ScopeDescription": {
                                            "description": "A description of the scope.",
                                            "maxLength": 256,
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "ScopeName": {
                                            "description": "The name of the scope.",
                                            "maxLength": 256,
                                            "minLength": 1,
                                            "pattern": "[\\x21\\x23-\\x2E\\x30-\\x5B\\x5D-\\x7E]+",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "ScopeName",
                                        "ScopeDescription"
                                    ],
                                    "type": "object"
                                },
                                "maxItems": 25,
                                "type": "array"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID for the user pool that hosts the resource server.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "ResourceServer"
                ],
                "type": "object"
            },
            "UpdateUserAttributesRequest": {
                "description": "Represents the request to update user attributes.",
                "properties": {
                    "AccessToken": {
                        "description": "The access token for the request to update user attributes.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    },
                    "UserAttributes": {
                        "description": "<p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>",
                        "items": {
                            "description": "Specifies whether the attribute is standard or custom.",
                            "properties": {
                                "Name": {
                                    "description": "The name of the attribute.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "Value": {
                                    "description": "The value of the attribute.",
                                    "format": "password",
                                    "maxLength": 2048,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Name"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "UserAttributes",
                    "AccessToken"
                ],
                "type": "object"
            },
            "UpdateUserAttributesResponse": {
                "description": "Represents the response from the server for the request to update user attributes.",
                "properties": {
                    "CodeDeliveryDetailsList": {
                        "description": "The code delivery details list from the server for the request to update user attributes.",
                        "items": {
                            "description": "The code delivery details being returned from the server.",
                            "properties": {
                                "AttributeName": {
                                    "description": "The attribute name.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "DeliveryMedium": {
                                    "description": "The delivery medium (email message or phone number).",
                                    "enum": [
                                        "SMS",
                                        "EMAIL"
                                    ],
                                    "type": "string"
                                },
                                "Destination": {
                                    "description": "The destination for the code delivery details.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "UpdateUserPoolClientRequest": {
                "description": "Represents the request to update the user pool client.",
                "properties": {
                    "AllowedOAuthFlows": {
                        "description": "<p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>token</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>",
                        "items": {
                            "enum": [
                                "code",
                                "implicit",
                                "client_credentials"
                            ],
                            "type": "string"
                        },
                        "maxItems": 3,
                        "minItems": 0,
                        "type": "array"
                    },
                    "AllowedOAuthFlowsUserPoolClient": {
                        "description": "Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.",
                        "type": "boolean"
                    },
                    "AllowedOAuthScopes": {
                        "description": "A list of allowed <code>OAuth</code> scopes. Currently supported values are <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and <code>\"Cognito\"</code>.",
                        "items": {
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                            "type": "string"
                        },
                        "maxItems": 25,
                        "type": "array"
                    },
                    "AnalyticsConfiguration": {
                        "description": "The Amazon Pinpoint analytics configuration for collecting metrics for this user pool.",
                        "properties": {
                            "ApplicationId": {
                                "description": "The application ID for an Amazon Pinpoint application.",
                                "pattern": "^[0-9a-fA-F]+$",
                                "type": "string"
                            },
                            "ExternalId": {
                                "description": "The external ID.",
                                "type": "string"
                            },
                            "RoleArn": {
                                "description": "The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "UserDataShared": {
                                "description": "If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "ApplicationId",
                            "RoleArn",
                            "ExternalId"
                        ],
                        "type": "object"
                    },
                    "CallbackURLs": {
                        "description": "<p>A list of allowed redirect (callback) URLs for the identity providers.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                        "items": {
                            "maxLength": 1024,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "maxItems": 100,
                        "minItems": 0,
                        "type": "array"
                    },
                    "ClientId": {
                        "description": "The ID of the client associated with the user pool.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "ClientName": {
                        "description": "The client name from the update user pool client request.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w\\s+=,.@-]+",
                        "type": "string"
                    },
                    "DefaultRedirectURI": {
                        "description": "<p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                        "maxLength": 1024,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "ExplicitAuthFlows": {
                        "description": "Explicit authentication flows.",
                        "items": {
                            "enum": [
                                "ADMIN_NO_SRP_AUTH",
                                "CUSTOM_AUTH_FLOW_ONLY",
                                "USER_PASSWORD_AUTH"
                            ],
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "LogoutURLs": {
                        "description": "A list of allowed logout URLs for the identity providers.",
                        "items": {
                            "maxLength": 1024,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "maxItems": 100,
                        "minItems": 0,
                        "type": "array"
                    },
                    "ReadAttributes": {
                        "description": "The read-only attributes of the user pool.",
                        "items": {
                            "maxLength": 2048,
                            "minLength": 1,
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "RefreshTokenValidity": {
                        "description": "The time limit, in days, after which the refresh token is no longer valid and cannot be used.",
                        "maximum": 3650,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "SupportedIdentityProviders": {
                        "description": "A list of provider names for the identity providers that are supported on this client.",
                        "items": {
                            "maxLength": 32,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool where you want to update the user pool client.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "WriteAttributes": {
                        "description": "The writeable attributes of the user pool.",
                        "items": {
                            "maxLength": 2048,
                            "minLength": 1,
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "UserPoolId",
                    "ClientId"
                ],
                "type": "object"
            },
            "UpdateUserPoolClientResponse": {
                "description": "Represents the response from the server to the request to update the user pool client.",
                "properties": {
                    "UserPoolClient": {
                        "description": "The user pool client value from the response from the server when an update user pool client request is made.",
                        "properties": {
                            "AllowedOAuthFlows": {
                                "description": "<p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>token</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>",
                                "items": {
                                    "enum": [
                                        "code",
                                        "implicit",
                                        "client_credentials"
                                    ],
                                    "type": "string"
                                },
                                "maxItems": 3,
                                "minItems": 0,
                                "type": "array"
                            },
                            "AllowedOAuthFlowsUserPoolClient": {
                                "description": "Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.",
                                "type": "boolean"
                            },
                            "AllowedOAuthScopes": {
                                "description": "A list of allowed <code>OAuth</code> scopes. Currently supported values are <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and <code>\"Cognito\"</code>.",
                                "items": {
                                    "maxLength": 256,
                                    "minLength": 1,
                                    "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                                    "type": "string"
                                },
                                "maxItems": 25,
                                "type": "array"
                            },
                            "AnalyticsConfiguration": {
                                "description": "The Amazon Pinpoint analytics configuration for the user pool client.",
                                "properties": {
                                    "ApplicationId": {
                                        "description": "The application ID for an Amazon Pinpoint application.",
                                        "pattern": "^[0-9a-fA-F]+$",
                                        "type": "string"
                                    },
                                    "ExternalId": {
                                        "description": "The external ID.",
                                        "type": "string"
                                    },
                                    "RoleArn": {
                                        "description": "The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.",
                                        "maxLength": 2048,
                                        "minLength": 20,
                                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                        "type": "string"
                                    },
                                    "UserDataShared": {
                                        "description": "If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "ApplicationId",
                                    "RoleArn",
                                    "ExternalId"
                                ],
                                "type": "object"
                            },
                            "CallbackURLs": {
                                "description": "<p>A list of allowed redirect (callback) URLs for the identity providers.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                                "items": {
                                    "maxLength": 1024,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "maxItems": 100,
                                "minItems": 0,
                                "type": "array"
                            },
                            "ClientId": {
                                "description": "The ID of the client associated with the user pool.",
                                "format": "password",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w+]+",
                                "type": "string"
                            },
                            "ClientName": {
                                "description": "The client name from the user pool request of the client type.",
                                "maxLength": 128,
                                "minLength": 1,
                                "pattern": "[\\w\\s+=,.@-]+",
                                "type": "string"
                            },
                            "ClientSecret": {
                                "description": "The client secret from the user pool request of the client type.",
                                "format": "password",
                                "maxLength": 64,
                                "minLength": 1,
                                "pattern": "[\\w+]+",
                                "type": "string"
                            },
                            "CreationDate": {
                                "description": "The date the user pool client was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "DefaultRedirectURI": {
                                "description": "<p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                                "maxLength": 1024,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            },
                            "ExplicitAuthFlows": {
                                "description": "The explicit authentication flows.",
                                "items": {
                                    "enum": [
                                        "ADMIN_NO_SRP_AUTH",
                                        "CUSTOM_AUTH_FLOW_ONLY",
                                        "USER_PASSWORD_AUTH"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "LastModifiedDate": {
                                "description": "The date the user pool client was last modified.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "LogoutURLs": {
                                "description": "A list of allowed logout URLs for the identity providers.",
                                "items": {
                                    "maxLength": 1024,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "maxItems": 100,
                                "minItems": 0,
                                "type": "array"
                            },
                            "ReadAttributes": {
                                "description": "The Read-only attributes.",
                                "items": {
                                    "maxLength": 2048,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "RefreshTokenValidity": {
                                "description": "The time limit, in days, after which the refresh token is no longer valid and cannot be used.",
                                "maximum": 3650,
                                "minimum": 0,
                                "type": "integer"
                            },
                            "SupportedIdentityProviders": {
                                "description": "A list of provider names for the identity providers that are supported on this client.",
                                "items": {
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "UserPoolId": {
                                "description": "The user pool ID for the user pool client.",
                                "maxLength": 55,
                                "minLength": 1,
                                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                "type": "string"
                            },
                            "WriteAttributes": {
                                "description": "The writeable attributes.",
                                "items": {
                                    "maxLength": 2048,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "UpdateUserPoolDomainRequest": {
                "description": "The UpdateUserPoolDomain request input.",
                "properties": {
                    "CustomDomainConfig": {
                        "description": "The configuration for a custom domain that hosts the sign-up and sign-in pages for your application. Use this object to specify an SSL certificate that is managed by ACM.",
                        "properties": {
                            "CertificateArn": {
                                "description": "The Amazon Resource Name (ARN) of an AWS Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "CertificateArn"
                        ],
                        "type": "object"
                    },
                    "Domain": {
                        "description": "<p>The domain name for the custom domain that hosts the sign-up and sign-in pages for your application. For example: <code>auth.example.com</code>. </p> <p>This string can include only lowercase letters, numbers, and hyphens. Do not use a hyphen for the first or last character. Use periods to separate subdomain names.</p>",
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The ID of the user pool that is associated with the custom domain that you are updating the certificate for.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "required": [
                    "Domain",
                    "UserPoolId",
                    "CustomDomainConfig"
                ],
                "type": "object"
            },
            "UpdateUserPoolDomainResponse": {
                "description": "The UpdateUserPoolDomain response output.",
                "properties": {
                    "CloudFrontDomain": {
                        "description": "The Amazon CloudFront endpoint that Amazon Cognito set up when you added the custom domain to your user pool.",
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateUserPoolRequest": {
                "description": "Represents the request to update the user pool.",
                "properties": {
                    "AdminCreateUserConfig": {
                        "description": "The configuration for <code>AdminCreateUser</code> requests.",
                        "properties": {
                            "AllowAdminCreateUserOnly": {
                                "description": "Set to <code>True</code> if only the administrator is allowed to create user profiles. Set to <code>False</code> if users can sign themselves up via an app.",
                                "type": "boolean"
                            },
                            "InviteMessageTemplate": {
                                "description": "<p>The message template to be used for the welcome message to new users.</p> <p>See also <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization\">Customizing User Invitation Messages</a>.</p>",
                                "properties": {
                                    "EmailMessage": {
                                        "description": "The message template for email messages.",
                                        "maxLength": 20000,
                                        "minLength": 6,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                        "type": "string"
                                    },
                                    "EmailSubject": {
                                        "description": "The subject line for email messages.",
                                        "maxLength": 140,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                        "type": "string"
                                    },
                                    "SMSMessage": {
                                        "description": "The message template for SMS messages.",
                                        "maxLength": 140,
                                        "minLength": 6,
                                        "pattern": ".*\\{####\\}.*",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "UnusedAccountValidityDays": {
                                "description": "The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the <code>MessageAction</code> parameter. The default value for this parameter is 7.",
                                "maximum": 365,
                                "minimum": 0,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "AutoVerifiedAttributes": {
                        "description": "The attributes that are automatically verified when the Amazon Cognito service makes a request to update user pools.",
                        "items": {
                            "enum": [
                                "phone_number",
                                "email"
                            ],
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "DeviceConfiguration": {
                        "description": "Device configuration.",
                        "properties": {
                            "ChallengeRequiredOnNewDevice": {
                                "description": "Indicates whether a challenge is required on a new device. Only applicable to a new device.",
                                "type": "boolean"
                            },
                            "DeviceOnlyRememberedOnUserPrompt": {
                                "description": "If true, a device is only remembered on user prompt.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "EmailConfiguration": {
                        "description": "Email configuration.",
                        "properties": {
                            "ReplyToEmailAddress": {
                                "description": "The destination to which the receiver of the email should reply to.",
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            },
                            "SourceArn": {
                                "description": "The Amazon Resource Name (ARN) of the email source.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "EmailVerificationMessage": {
                        "description": "The contents of the email verification message.",
                        "maxLength": 20000,
                        "minLength": 6,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                        "type": "string"
                    },
                    "EmailVerificationSubject": {
                        "description": "The subject of the email verification message.",
                        "maxLength": 140,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                        "type": "string"
                    },
                    "LambdaConfig": {
                        "description": "The AWS Lambda configuration information from the request to update the user pool.",
                        "properties": {
                            "CreateAuthChallenge": {
                                "description": "Creates an authentication challenge.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "CustomMessage": {
                                "description": "A custom Message AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "DefineAuthChallenge": {
                                "description": "Defines the authentication challenge.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PostAuthentication": {
                                "description": "A post-authentication AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PostConfirmation": {
                                "description": "A post-confirmation AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PreAuthentication": {
                                "description": "A pre-authentication AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PreSignUp": {
                                "description": "A pre-registration AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PreTokenGeneration": {
                                "description": "A Lambda trigger that is invoked before token generation.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "UserMigration": {
                                "description": "The user migration Lambda config type.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "VerifyAuthChallengeResponse": {
                                "description": "Verifies the authentication challenge response.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "MfaConfiguration": {
                        "description": "<p>Can be one of the following values:</p> <ul> <li> <p> <code>OFF</code> - MFA tokens are not required and cannot be specified during user registration.</p> </li> <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.</p> </li> <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li> </ul>",
                        "enum": [
                            "OFF",
                            "ON",
                            "OPTIONAL"
                        ],
                        "type": "string"
                    },
                    "Policies": {
                        "description": "A container with the policies you wish to update in a user pool.",
                        "properties": {
                            "PasswordPolicy": {
                                "description": "The password policy.",
                                "properties": {
                                    "MinimumLength": {
                                        "description": "The minimum length of the password policy that you have set. Cannot be less than 6.",
                                        "maximum": 99,
                                        "minimum": 6,
                                        "type": "integer"
                                    },
                                    "RequireLowercase": {
                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.",
                                        "type": "boolean"
                                    },
                                    "RequireNumbers": {
                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one number in their password.",
                                        "type": "boolean"
                                    },
                                    "RequireSymbols": {
                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.",
                                        "type": "boolean"
                                    },
                                    "RequireUppercase": {
                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "SmsAuthenticationMessage": {
                        "description": "The contents of the SMS authentication message.",
                        "maxLength": 140,
                        "minLength": 6,
                        "pattern": ".*\\{####\\}.*",
                        "type": "string"
                    },
                    "SmsConfiguration": {
                        "description": "SMS configuration.",
                        "properties": {
                            "ExternalId": {
                                "description": "The external ID.",
                                "type": "string"
                            },
                            "SnsCallerArn": {
                                "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "SnsCallerArn"
                        ],
                        "type": "object"
                    },
                    "SmsVerificationMessage": {
                        "description": "A container with information about the SMS verification message.",
                        "maxLength": 140,
                        "minLength": 6,
                        "pattern": ".*\\{####\\}.*",
                        "type": "string"
                    },
                    "UserPoolAddOns": {
                        "description": "Used to enable advanced security risk detection. Set the key <code>AdvancedSecurityMode</code> to the value \"AUDIT\".",
                        "properties": {
                            "AdvancedSecurityMode": {
                                "description": "The advanced security mode.",
                                "enum": [
                                    "OFF",
                                    "AUDIT",
                                    "ENFORCED"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "AdvancedSecurityMode"
                        ],
                        "type": "object"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool you want to update.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "UserPoolTags": {
                        "description": "The cost allocation tags for the user pool. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</a> ",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "VerificationMessageTemplate": {
                        "description": "The template for verification messages.",
                        "properties": {
                            "DefaultEmailOption": {
                                "description": "The default email option.",
                                "enum": [
                                    "CONFIRM_WITH_LINK",
                                    "CONFIRM_WITH_CODE"
                                ],
                                "type": "string"
                            },
                            "EmailMessage": {
                                "description": "The email message template.",
                                "maxLength": 20000,
                                "minLength": 6,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                "type": "string"
                            },
                            "EmailMessageByLink": {
                                "description": "The email message template for sending a confirmation link to the user.",
                                "maxLength": 20000,
                                "minLength": 6,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{##[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*##\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                "type": "string"
                            },
                            "EmailSubject": {
                                "description": "The subject line for the email message template.",
                                "maxLength": 140,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                "type": "string"
                            },
                            "EmailSubjectByLink": {
                                "description": "The subject line for the email message template for sending a confirmation link to the user.",
                                "maxLength": 140,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                "type": "string"
                            },
                            "SmsMessage": {
                                "description": "The SMS message template.",
                                "maxLength": 140,
                                "minLength": 6,
                                "pattern": ".*\\{####\\}.*",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "UserPoolId"
                ],
                "type": "object"
            },
            "UpdateUserPoolResponse": {
                "description": "Represents the response from the server when you make a request to update the user pool.",
                "properties": {},
                "type": "object"
            },
            "UserContextDataType": {
                "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                "properties": {
                    "EncodedData": {
                        "description": "Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UserFilterType": {
                "maxLength": 256,
                "type": "string"
            },
            "UserImportInProgressException": {},
            "UserImportJobIdType": {
                "maxLength": 55,
                "minLength": 1,
                "pattern": "import-[0-9a-zA-Z-]+",
                "type": "string"
            },
            "UserImportJobNameType": {
                "maxLength": 128,
                "minLength": 1,
                "pattern": "[\\w\\s+=,.@-]+",
                "type": "string"
            },
            "UserImportJobStatusType": {
                "enum": [
                    "Created",
                    "Pending",
                    "InProgress",
                    "Stopping",
                    "Expired",
                    "Stopped",
                    "Failed",
                    "Succeeded"
                ],
                "type": "string"
            },
            "UserImportJobType": {
                "description": "The user import job type.",
                "properties": {
                    "CloudWatchLogsRoleArn": {
                        "description": "The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito Developer Guide.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    },
                    "CompletionDate": {
                        "description": "The date when the user import job was completed.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "CompletionMessage": {
                        "description": "The message returned when the user import job is completed.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w]+",
                        "type": "string"
                    },
                    "CreationDate": {
                        "description": "The date the user import job was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "FailedUsers": {
                        "description": "The number of users that could not be imported.",
                        "type": "integer"
                    },
                    "ImportedUsers": {
                        "description": "The number of users that were successfully imported.",
                        "type": "integer"
                    },
                    "JobId": {
                        "description": "The job ID for the user import job.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "import-[0-9a-zA-Z-]+",
                        "type": "string"
                    },
                    "JobName": {
                        "description": "The job name for the user import job.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w\\s+=,.@-]+",
                        "type": "string"
                    },
                    "PreSignedUrl": {
                        "description": "The pre-signed URL to be used to upload the <code>.csv</code> file.",
                        "maxLength": 2048,
                        "minLength": 0,
                        "type": "string"
                    },
                    "SkippedUsers": {
                        "description": "The number of users that were skipped.",
                        "type": "integer"
                    },
                    "StartDate": {
                        "description": "The date when the user import job was started.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "Status": {
                        "description": "<p>The status of the user import job. One of the following:</p> <ul> <li> <p> <code>Created</code> - The job was created but not started.</p> </li> <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li> <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li> <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li> <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li> <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li> <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li> <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.</p> </li> </ul>",
                        "enum": [
                            "Created",
                            "Pending",
                            "InProgress",
                            "Stopping",
                            "Expired",
                            "Stopped",
                            "Failed",
                            "Succeeded"
                        ],
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool that the users are being imported into.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UserImportJobsListType": {
                "items": {
                    "description": "The user import job type.",
                    "properties": {
                        "CloudWatchLogsRoleArn": {
                            "description": "The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito Developer Guide.",
                            "maxLength": 2048,
                            "minLength": 20,
                            "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                            "type": "string"
                        },
                        "CompletionDate": {
                            "description": "The date when the user import job was completed.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "CompletionMessage": {
                            "description": "The message returned when the user import job is completed.",
                            "maxLength": 128,
                            "minLength": 1,
                            "pattern": "[\\w]+",
                            "type": "string"
                        },
                        "CreationDate": {
                            "description": "The date the user import job was created.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "FailedUsers": {
                            "description": "The number of users that could not be imported.",
                            "type": "integer"
                        },
                        "ImportedUsers": {
                            "description": "The number of users that were successfully imported.",
                            "type": "integer"
                        },
                        "JobId": {
                            "description": "The job ID for the user import job.",
                            "maxLength": 55,
                            "minLength": 1,
                            "pattern": "import-[0-9a-zA-Z-]+",
                            "type": "string"
                        },
                        "JobName": {
                            "description": "The job name for the user import job.",
                            "maxLength": 128,
                            "minLength": 1,
                            "pattern": "[\\w\\s+=,.@-]+",
                            "type": "string"
                        },
                        "PreSignedUrl": {
                            "description": "The pre-signed URL to be used to upload the <code>.csv</code> file.",
                            "maxLength": 2048,
                            "minLength": 0,
                            "type": "string"
                        },
                        "SkippedUsers": {
                            "description": "The number of users that were skipped.",
                            "type": "integer"
                        },
                        "StartDate": {
                            "description": "The date when the user import job was started.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "Status": {
                            "description": "<p>The status of the user import job. One of the following:</p> <ul> <li> <p> <code>Created</code> - The job was created but not started.</p> </li> <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li> <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li> <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li> <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li> <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li> <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li> <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.</p> </li> </ul>",
                            "enum": [
                                "Created",
                                "Pending",
                                "InProgress",
                                "Stopping",
                                "Expired",
                                "Stopped",
                                "Failed",
                                "Succeeded"
                            ],
                            "type": "string"
                        },
                        "UserPoolId": {
                            "description": "The user pool ID for the user pool that the users are being imported into.",
                            "maxLength": 55,
                            "minLength": 1,
                            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "maxItems": 50,
                "minItems": 1,
                "type": "array"
            },
            "UserLambdaValidationException": {},
            "UserMFASettingListType": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "UserNotConfirmedException": {},
            "UserNotFoundException": {},
            "UserPoolAddOnNotEnabledException": {},
            "UserPoolAddOnsType": {
                "description": "The user pool add-ons type.",
                "properties": {
                    "AdvancedSecurityMode": {
                        "description": "The advanced security mode.",
                        "enum": [
                            "OFF",
                            "AUDIT",
                            "ENFORCED"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "AdvancedSecurityMode"
                ],
                "type": "object"
            },
            "UserPoolClientDescription": {
                "description": "The description of the user pool client.",
                "properties": {
                    "ClientId": {
                        "description": "The ID of the client associated with the user pool.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "ClientName": {
                        "description": "The client name from the user pool client description.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w\\s+=,.@-]+",
                        "type": "string"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool where you want to describe the user pool client.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UserPoolClientListType": {
                "items": {
                    "description": "The description of the user pool client.",
                    "properties": {
                        "ClientId": {
                            "description": "The ID of the client associated with the user pool.",
                            "format": "password",
                            "maxLength": 128,
                            "minLength": 1,
                            "pattern": "[\\w+]+",
                            "type": "string"
                        },
                        "ClientName": {
                            "description": "The client name from the user pool client description.",
                            "maxLength": 128,
                            "minLength": 1,
                            "pattern": "[\\w\\s+=,.@-]+",
                            "type": "string"
                        },
                        "UserPoolId": {
                            "description": "The user pool ID for the user pool where you want to describe the user pool client.",
                            "maxLength": 55,
                            "minLength": 1,
                            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "UserPoolClientType": {
                "description": "Contains information about a user pool client.",
                "properties": {
                    "AllowedOAuthFlows": {
                        "description": "<p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>token</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>",
                        "items": {
                            "enum": [
                                "code",
                                "implicit",
                                "client_credentials"
                            ],
                            "type": "string"
                        },
                        "maxItems": 3,
                        "minItems": 0,
                        "type": "array"
                    },
                    "AllowedOAuthFlowsUserPoolClient": {
                        "description": "Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.",
                        "type": "boolean"
                    },
                    "AllowedOAuthScopes": {
                        "description": "A list of allowed <code>OAuth</code> scopes. Currently supported values are <code>\"phone\"</code>, <code>\"email\"</code>, <code>\"openid\"</code>, and <code>\"Cognito\"</code>.",
                        "items": {
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "[\\x21\\x23-\\x5B\\x5D-\\x7E]+",
                            "type": "string"
                        },
                        "maxItems": 25,
                        "type": "array"
                    },
                    "AnalyticsConfiguration": {
                        "description": "The Amazon Pinpoint analytics configuration for the user pool client.",
                        "properties": {
                            "ApplicationId": {
                                "description": "The application ID for an Amazon Pinpoint application.",
                                "pattern": "^[0-9a-fA-F]+$",
                                "type": "string"
                            },
                            "ExternalId": {
                                "description": "The external ID.",
                                "type": "string"
                            },
                            "RoleArn": {
                                "description": "The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "UserDataShared": {
                                "description": "If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "ApplicationId",
                            "RoleArn",
                            "ExternalId"
                        ],
                        "type": "object"
                    },
                    "CallbackURLs": {
                        "description": "<p>A list of allowed redirect (callback) URLs for the identity providers.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                        "items": {
                            "maxLength": 1024,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "maxItems": 100,
                        "minItems": 0,
                        "type": "array"
                    },
                    "ClientId": {
                        "description": "The ID of the client associated with the user pool.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "ClientName": {
                        "description": "The client name from the user pool request of the client type.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w\\s+=,.@-]+",
                        "type": "string"
                    },
                    "ClientSecret": {
                        "description": "The client secret from the user pool request of the client type.",
                        "format": "password",
                        "maxLength": 64,
                        "minLength": 1,
                        "pattern": "[\\w+]+",
                        "type": "string"
                    },
                    "CreationDate": {
                        "description": "The date the user pool client was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "DefaultRedirectURI": {
                        "description": "<p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href=\"https://tools.ietf.org/html/rfc6749#section-3.1.2\">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>",
                        "maxLength": 1024,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "ExplicitAuthFlows": {
                        "description": "The explicit authentication flows.",
                        "items": {
                            "enum": [
                                "ADMIN_NO_SRP_AUTH",
                                "CUSTOM_AUTH_FLOW_ONLY",
                                "USER_PASSWORD_AUTH"
                            ],
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "LastModifiedDate": {
                        "description": "The date the user pool client was last modified.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "LogoutURLs": {
                        "description": "A list of allowed logout URLs for the identity providers.",
                        "items": {
                            "maxLength": 1024,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "maxItems": 100,
                        "minItems": 0,
                        "type": "array"
                    },
                    "ReadAttributes": {
                        "description": "The Read-only attributes.",
                        "items": {
                            "maxLength": 2048,
                            "minLength": 1,
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "RefreshTokenValidity": {
                        "description": "The time limit, in days, after which the refresh token is no longer valid and cannot be used.",
                        "maximum": 3650,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "SupportedIdentityProviders": {
                        "description": "A list of provider names for the identity providers that are supported on this client.",
                        "items": {
                            "maxLength": 32,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "UserPoolId": {
                        "description": "The user pool ID for the user pool client.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "WriteAttributes": {
                        "description": "The writeable attributes.",
                        "items": {
                            "maxLength": 2048,
                            "minLength": 1,
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "UserPoolDescriptionType": {
                "description": "A user pool description.",
                "properties": {
                    "CreationDate": {
                        "description": "The date the user pool description was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "Id": {
                        "description": "The ID in a user pool description.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "LambdaConfig": {
                        "description": "The AWS Lambda configuration information in a user pool description.",
                        "properties": {
                            "CreateAuthChallenge": {
                                "description": "Creates an authentication challenge.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "CustomMessage": {
                                "description": "A custom Message AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "DefineAuthChallenge": {
                                "description": "Defines the authentication challenge.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PostAuthentication": {
                                "description": "A post-authentication AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PostConfirmation": {
                                "description": "A post-confirmation AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PreAuthentication": {
                                "description": "A pre-authentication AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PreSignUp": {
                                "description": "A pre-registration AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PreTokenGeneration": {
                                "description": "A Lambda trigger that is invoked before token generation.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "UserMigration": {
                                "description": "The user migration Lambda config type.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "VerifyAuthChallengeResponse": {
                                "description": "Verifies the authentication challenge response.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "LastModifiedDate": {
                        "description": "The date the user pool description was last modified.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "Name": {
                        "description": "The name in a user pool description.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w\\s+=,.@-]+",
                        "type": "string"
                    },
                    "Status": {
                        "description": "The user pool status in a user pool description.",
                        "enum": [
                            "Enabled",
                            "Disabled"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UserPoolIdType": {
                "maxLength": 55,
                "minLength": 1,
                "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                "type": "string"
            },
            "UserPoolListType": {
                "items": {
                    "description": "A user pool description.",
                    "properties": {
                        "CreationDate": {
                            "description": "The date the user pool description was created.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "Id": {
                            "description": "The ID in a user pool description.",
                            "maxLength": 55,
                            "minLength": 1,
                            "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                            "type": "string"
                        },
                        "LambdaConfig": {
                            "description": "The AWS Lambda configuration information in a user pool description.",
                            "properties": {
                                "CreateAuthChallenge": {
                                    "description": "Creates an authentication challenge.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                    "type": "string"
                                },
                                "CustomMessage": {
                                    "description": "A custom Message AWS Lambda trigger.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                    "type": "string"
                                },
                                "DefineAuthChallenge": {
                                    "description": "Defines the authentication challenge.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                    "type": "string"
                                },
                                "PostAuthentication": {
                                    "description": "A post-authentication AWS Lambda trigger.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                    "type": "string"
                                },
                                "PostConfirmation": {
                                    "description": "A post-confirmation AWS Lambda trigger.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                    "type": "string"
                                },
                                "PreAuthentication": {
                                    "description": "A pre-authentication AWS Lambda trigger.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                    "type": "string"
                                },
                                "PreSignUp": {
                                    "description": "A pre-registration AWS Lambda trigger.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                    "type": "string"
                                },
                                "PreTokenGeneration": {
                                    "description": "A Lambda trigger that is invoked before token generation.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                    "type": "string"
                                },
                                "UserMigration": {
                                    "description": "The user migration Lambda config type.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                    "type": "string"
                                },
                                "VerifyAuthChallengeResponse": {
                                    "description": "Verifies the authentication challenge response.",
                                    "maxLength": 2048,
                                    "minLength": 20,
                                    "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "LastModifiedDate": {
                            "description": "The date the user pool description was last modified.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "Name": {
                            "description": "The name in a user pool description.",
                            "maxLength": 128,
                            "minLength": 1,
                            "pattern": "[\\w\\s+=,.@-]+",
                            "type": "string"
                        },
                        "Status": {
                            "description": "The user pool status in a user pool description.",
                            "enum": [
                                "Enabled",
                                "Disabled"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "UserPoolMfaType": {
                "enum": [
                    "OFF",
                    "ON",
                    "OPTIONAL"
                ],
                "type": "string"
            },
            "UserPoolNameType": {
                "maxLength": 128,
                "minLength": 1,
                "pattern": "[\\w\\s+=,.@-]+",
                "type": "string"
            },
            "UserPoolPolicyType": {
                "description": "The policy associated with a user pool.",
                "properties": {
                    "PasswordPolicy": {
                        "description": "The password policy.",
                        "properties": {
                            "MinimumLength": {
                                "description": "The minimum length of the password policy that you have set. Cannot be less than 6.",
                                "maximum": 99,
                                "minimum": 6,
                                "type": "integer"
                            },
                            "RequireLowercase": {
                                "description": "In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.",
                                "type": "boolean"
                            },
                            "RequireNumbers": {
                                "description": "In the password policy that you have set, refers to whether you have required users to use at least one number in their password.",
                                "type": "boolean"
                            },
                            "RequireSymbols": {
                                "description": "In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.",
                                "type": "boolean"
                            },
                            "RequireUppercase": {
                                "description": "In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "UserPoolTaggingException": {},
            "UserPoolTagsType": {
                "items": {
                    "properties": {
                        "key": {
                            "type": "string"
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "UserPoolType": {
                "description": "A container for information about the user pool.",
                "properties": {
                    "AdminCreateUserConfig": {
                        "description": "The configuration for <code>AdminCreateUser</code> requests.",
                        "properties": {
                            "AllowAdminCreateUserOnly": {
                                "description": "Set to <code>True</code> if only the administrator is allowed to create user profiles. Set to <code>False</code> if users can sign themselves up via an app.",
                                "type": "boolean"
                            },
                            "InviteMessageTemplate": {
                                "description": "<p>The message template to be used for the welcome message to new users.</p> <p>See also <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization\">Customizing User Invitation Messages</a>.</p>",
                                "properties": {
                                    "EmailMessage": {
                                        "description": "The message template for email messages.",
                                        "maxLength": 20000,
                                        "minLength": 6,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                        "type": "string"
                                    },
                                    "EmailSubject": {
                                        "description": "The subject line for email messages.",
                                        "maxLength": 140,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                        "type": "string"
                                    },
                                    "SMSMessage": {
                                        "description": "The message template for SMS messages.",
                                        "maxLength": 140,
                                        "minLength": 6,
                                        "pattern": ".*\\{####\\}.*",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "UnusedAccountValidityDays": {
                                "description": "The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>\"RESEND\"</code> for the <code>MessageAction</code> parameter. The default value for this parameter is 7.",
                                "maximum": 365,
                                "minimum": 0,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "AliasAttributes": {
                        "description": "Specifies the attributes that are aliased in a user pool.",
                        "items": {
                            "enum": [
                                "phone_number",
                                "email",
                                "preferred_username"
                            ],
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Arn": {
                        "description": "The Amazon Resource Name (ARN) for the user pool.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                        "type": "string"
                    },
                    "AutoVerifiedAttributes": {
                        "description": "Specifies the attributes that are auto-verified in a user pool.",
                        "items": {
                            "enum": [
                                "phone_number",
                                "email"
                            ],
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "CreationDate": {
                        "description": "The date the user pool was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "CustomDomain": {
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                        "type": "string"
                    },
                    "DeviceConfiguration": {
                        "description": "The device configuration.",
                        "properties": {
                            "ChallengeRequiredOnNewDevice": {
                                "description": "Indicates whether a challenge is required on a new device. Only applicable to a new device.",
                                "type": "boolean"
                            },
                            "DeviceOnlyRememberedOnUserPrompt": {
                                "description": "If true, a device is only remembered on user prompt.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "Domain": {
                        "description": "Holds the domain prefix if the user pool has a domain associated with it.",
                        "maxLength": 63,
                        "minLength": 1,
                        "pattern": "^[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?$",
                        "type": "string"
                    },
                    "EmailConfiguration": {
                        "description": "The email configuration.",
                        "properties": {
                            "ReplyToEmailAddress": {
                                "description": "The destination to which the receiver of the email should reply to.",
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                "type": "string"
                            },
                            "SourceArn": {
                                "description": "The Amazon Resource Name (ARN) of the email source.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "EmailConfigurationFailure": {
                        "description": "The reason why the email configuration cannot send the messages to your users.",
                        "type": "string"
                    },
                    "EmailVerificationMessage": {
                        "description": "The contents of the email verification message.",
                        "maxLength": 20000,
                        "minLength": 6,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                        "type": "string"
                    },
                    "EmailVerificationSubject": {
                        "description": "The subject of the email verification message.",
                        "maxLength": 140,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                        "type": "string"
                    },
                    "EstimatedNumberOfUsers": {
                        "description": "A number estimating the size of the user pool.",
                        "type": "integer"
                    },
                    "Id": {
                        "description": "The ID of the user pool.",
                        "maxLength": 55,
                        "minLength": 1,
                        "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                        "type": "string"
                    },
                    "LambdaConfig": {
                        "description": "The AWS Lambda triggers associated with the user pool.",
                        "properties": {
                            "CreateAuthChallenge": {
                                "description": "Creates an authentication challenge.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "CustomMessage": {
                                "description": "A custom Message AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "DefineAuthChallenge": {
                                "description": "Defines the authentication challenge.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PostAuthentication": {
                                "description": "A post-authentication AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PostConfirmation": {
                                "description": "A post-confirmation AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PreAuthentication": {
                                "description": "A pre-authentication AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PreSignUp": {
                                "description": "A pre-registration AWS Lambda trigger.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "PreTokenGeneration": {
                                "description": "A Lambda trigger that is invoked before token generation.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "UserMigration": {
                                "description": "The user migration Lambda config type.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            },
                            "VerifyAuthChallengeResponse": {
                                "description": "Verifies the authentication challenge response.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "LastModifiedDate": {
                        "description": "The date the user pool was last modified.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "MfaConfiguration": {
                        "description": "<p>Can be one of the following values:</p> <ul> <li> <p> <code>OFF</code> - MFA tokens are not required and cannot be specified during user registration.</p> </li> <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.</p> </li> <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li> </ul>",
                        "enum": [
                            "OFF",
                            "ON",
                            "OPTIONAL"
                        ],
                        "type": "string"
                    },
                    "Name": {
                        "description": "The name of the user pool.",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\w\\s+=,.@-]+",
                        "type": "string"
                    },
                    "Policies": {
                        "description": "The policies associated with the user pool.",
                        "properties": {
                            "PasswordPolicy": {
                                "description": "The password policy.",
                                "properties": {
                                    "MinimumLength": {
                                        "description": "The minimum length of the password policy that you have set. Cannot be less than 6.",
                                        "maximum": 99,
                                        "minimum": 6,
                                        "type": "integer"
                                    },
                                    "RequireLowercase": {
                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.",
                                        "type": "boolean"
                                    },
                                    "RequireNumbers": {
                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one number in their password.",
                                        "type": "boolean"
                                    },
                                    "RequireSymbols": {
                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.",
                                        "type": "boolean"
                                    },
                                    "RequireUppercase": {
                                        "description": "In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "SchemaAttributes": {
                        "description": "A container with the schema attributes of a user pool.",
                        "items": {
                            "description": "Contains information about the schema attribute.",
                            "properties": {
                                "AttributeDataType": {
                                    "description": "The attribute data type.",
                                    "enum": [
                                        "String",
                                        "Number",
                                        "DateTime",
                                        "Boolean"
                                    ],
                                    "type": "string"
                                },
                                "DeveloperOnlyAttribute": {
                                    "description": "Specifies whether the attribute type is developer only.",
                                    "type": "boolean"
                                },
                                "Mutable": {
                                    "description": "<p>Specifies whether the value of the attribute can be changed.</p> <p>For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html\">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>",
                                    "type": "boolean"
                                },
                                "Name": {
                                    "description": "A schema attribute of the name type.",
                                    "maxLength": 20,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "NumberAttributeConstraints": {
                                    "description": "Specifies the constraints for an attribute of the number type.",
                                    "properties": {
                                        "MaxValue": {
                                            "description": "The maximum value of an attribute that is of the number data type.",
                                            "type": "string"
                                        },
                                        "MinValue": {
                                            "description": "The minimum value of an attribute that is of the number data type.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "Required": {
                                    "description": "Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.",
                                    "type": "boolean"
                                },
                                "StringAttributeConstraints": {
                                    "description": "Specifies the constraints for an attribute of the string type.",
                                    "properties": {
                                        "MaxLength": {
                                            "description": "The maximum length.",
                                            "type": "string"
                                        },
                                        "MinLength": {
                                            "description": "The minimum length.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "maxItems": 50,
                        "minItems": 1,
                        "type": "array"
                    },
                    "SmsAuthenticationMessage": {
                        "description": "The contents of the SMS authentication message.",
                        "maxLength": 140,
                        "minLength": 6,
                        "pattern": ".*\\{####\\}.*",
                        "type": "string"
                    },
                    "SmsConfiguration": {
                        "description": "The SMS configuration.",
                        "properties": {
                            "ExternalId": {
                                "description": "The external ID.",
                                "type": "string"
                            },
                            "SnsCallerArn": {
                                "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.",
                                "maxLength": 2048,
                                "minLength": 20,
                                "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
                                "type": "string"
                            }
                        },
                        "required": [
                            "SnsCallerArn"
                        ],
                        "type": "object"
                    },
                    "SmsConfigurationFailure": {
                        "description": "The reason why the SMS configuration cannot send the messages to your users.",
                        "type": "string"
                    },
                    "SmsVerificationMessage": {
                        "description": "The contents of the SMS verification message.",
                        "maxLength": 140,
                        "minLength": 6,
                        "pattern": ".*\\{####\\}.*",
                        "type": "string"
                    },
                    "Status": {
                        "description": "The status of a user pool.",
                        "enum": [
                            "Enabled",
                            "Disabled"
                        ],
                        "type": "string"
                    },
                    "UserPoolAddOns": {
                        "description": "The user pool add-ons.",
                        "properties": {
                            "AdvancedSecurityMode": {
                                "description": "The advanced security mode.",
                                "enum": [
                                    "OFF",
                                    "AUDIT",
                                    "ENFORCED"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "AdvancedSecurityMode"
                        ],
                        "type": "object"
                    },
                    "UserPoolTags": {
                        "description": "The cost allocation tags for the user pool. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</a> ",
                        "items": {
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "UsernameAttributes": {
                        "description": "Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.",
                        "items": {
                            "enum": [
                                "phone_number",
                                "email"
                            ],
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "VerificationMessageTemplate": {
                        "description": "The template for verification messages.",
                        "properties": {
                            "DefaultEmailOption": {
                                "description": "The default email option.",
                                "enum": [
                                    "CONFIRM_WITH_LINK",
                                    "CONFIRM_WITH_CODE"
                                ],
                                "type": "string"
                            },
                            "EmailMessage": {
                                "description": "The email message template.",
                                "maxLength": 20000,
                                "minLength": 6,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                "type": "string"
                            },
                            "EmailMessageByLink": {
                                "description": "The email message template for sending a confirmation link to the user.",
                                "maxLength": 20000,
                                "minLength": 6,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{##[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*##\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                                "type": "string"
                            },
                            "EmailSubject": {
                                "description": "The subject line for the email message template.",
                                "maxLength": 140,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                "type": "string"
                            },
                            "EmailSubjectByLink": {
                                "description": "The subject line for the email message template for sending a confirmation link to the user.",
                                "maxLength": 140,
                                "minLength": 1,
                                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                                "type": "string"
                            },
                            "SmsMessage": {
                                "description": "The SMS message template.",
                                "maxLength": 140,
                                "minLength": 6,
                                "pattern": ".*\\{####\\}.*",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "UserStatusType": {
                "enum": [
                    "UNCONFIRMED",
                    "CONFIRMED",
                    "ARCHIVED",
                    "COMPROMISED",
                    "UNKNOWN",
                    "RESET_REQUIRED",
                    "FORCE_CHANGE_PASSWORD"
                ],
                "type": "string"
            },
            "UserType": {
                "description": "The user type.",
                "properties": {
                    "Attributes": {
                        "description": "A container with information about the user type attributes.",
                        "items": {
                            "description": "Specifies whether the attribute is standard or custom.",
                            "properties": {
                                "Name": {
                                    "description": "The name of the attribute.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "Value": {
                                    "description": "The value of the attribute.",
                                    "format": "password",
                                    "maxLength": 2048,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "Name"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "Enabled": {
                        "description": "Specifies whether the user is enabled.",
                        "type": "boolean"
                    },
                    "MFAOptions": {
                        "description": "The MFA options for the user.",
                        "items": {
                            "description": "Specifies the different settings for multi-factor authentication (MFA).",
                            "properties": {
                                "AttributeName": {
                                    "description": "The attribute name of the MFA option type.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "DeliveryMedium": {
                                    "description": "The delivery medium (email message or SMS message) to send the MFA code.",
                                    "enum": [
                                        "SMS",
                                        "EMAIL"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "UserCreateDate": {
                        "description": "The creation date of the user.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "UserLastModifiedDate": {
                        "description": "The last modified date of the user.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "UserStatus": {
                        "description": "<p>The user status. Can be one of the following:</p> <ul> <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li> <li> <p>CONFIRMED - User has been confirmed.</p> </li> <li> <p>ARCHIVED - User is no longer active.</p> </li> <li> <p>COMPROMISED - User is disabled due to a potential security threat.</p> </li> <li> <p>UNKNOWN - User status is not known.</p> </li> </ul>",
                        "enum": [
                            "UNCONFIRMED",
                            "CONFIRMED",
                            "ARCHIVED",
                            "COMPROMISED",
                            "UNKNOWN",
                            "RESET_REQUIRED",
                            "FORCE_CHANGE_PASSWORD"
                        ],
                        "type": "string"
                    },
                    "Username": {
                        "description": "The user name of the user you wish to describe.",
                        "format": "password",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UsernameAttributeType": {
                "enum": [
                    "phone_number",
                    "email"
                ],
                "type": "string"
            },
            "UsernameAttributesListType": {
                "items": {
                    "enum": [
                        "phone_number",
                        "email"
                    ],
                    "type": "string"
                },
                "type": "array"
            },
            "UsernameExistsException": {},
            "UsernameType": {
                "format": "password",
                "maxLength": 128,
                "minLength": 1,
                "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                "type": "string"
            },
            "UsersListType": {
                "items": {
                    "description": "The user type.",
                    "properties": {
                        "Attributes": {
                            "description": "A container with information about the user type attributes.",
                            "items": {
                                "description": "Specifies whether the attribute is standard or custom.",
                                "properties": {
                                    "Name": {
                                        "description": "The name of the attribute.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "Value": {
                                        "description": "The value of the attribute.",
                                        "format": "password",
                                        "maxLength": 2048,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "Name"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "Enabled": {
                            "description": "Specifies whether the user is enabled.",
                            "type": "boolean"
                        },
                        "MFAOptions": {
                            "description": "The MFA options for the user.",
                            "items": {
                                "description": "Specifies the different settings for multi-factor authentication (MFA).",
                                "properties": {
                                    "AttributeName": {
                                        "description": "The attribute name of the MFA option type.",
                                        "maxLength": 32,
                                        "minLength": 1,
                                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                        "type": "string"
                                    },
                                    "DeliveryMedium": {
                                        "description": "The delivery medium (email message or SMS message) to send the MFA code.",
                                        "enum": [
                                            "SMS",
                                            "EMAIL"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "UserCreateDate": {
                            "description": "The creation date of the user.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "UserLastModifiedDate": {
                            "description": "The last modified date of the user.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "UserStatus": {
                            "description": "<p>The user status. Can be one of the following:</p> <ul> <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li> <li> <p>CONFIRMED - User has been confirmed.</p> </li> <li> <p>ARCHIVED - User is no longer active.</p> </li> <li> <p>COMPROMISED - User is disabled due to a potential security threat.</p> </li> <li> <p>UNKNOWN - User status is not known.</p> </li> </ul>",
                            "enum": [
                                "UNCONFIRMED",
                                "CONFIRMED",
                                "ARCHIVED",
                                "COMPROMISED",
                                "UNKNOWN",
                                "RESET_REQUIRED",
                                "FORCE_CHANGE_PASSWORD"
                            ],
                            "type": "string"
                        },
                        "Username": {
                            "description": "The user name of the user you wish to describe.",
                            "format": "password",
                            "maxLength": 128,
                            "minLength": 1,
                            "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "VerificationMessageTemplateType": {
                "description": "The template for verification messages.",
                "properties": {
                    "DefaultEmailOption": {
                        "description": "The default email option.",
                        "enum": [
                            "CONFIRM_WITH_LINK",
                            "CONFIRM_WITH_CODE"
                        ],
                        "type": "string"
                    },
                    "EmailMessage": {
                        "description": "The email message template.",
                        "maxLength": 20000,
                        "minLength": 6,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                        "type": "string"
                    },
                    "EmailMessageByLink": {
                        "description": "The email message template for sending a confirmation link to the user.",
                        "maxLength": 20000,
                        "minLength": 6,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{##[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*##\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
                        "type": "string"
                    },
                    "EmailSubject": {
                        "description": "The subject line for the email message template.",
                        "maxLength": 140,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                        "type": "string"
                    },
                    "EmailSubjectByLink": {
                        "description": "The subject line for the email message template for sending a confirmation link to the user.",
                        "maxLength": 140,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
                        "type": "string"
                    },
                    "SmsMessage": {
                        "description": "The SMS message template.",
                        "maxLength": 140,
                        "minLength": 6,
                        "pattern": ".*\\{####\\}.*",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "VerifiedAttributeType": {
                "enum": [
                    "phone_number",
                    "email"
                ],
                "type": "string"
            },
            "VerifiedAttributesListType": {
                "items": {
                    "enum": [
                        "phone_number",
                        "email"
                    ],
                    "type": "string"
                },
                "type": "array"
            },
            "VerifySoftwareTokenRequest": {
                "properties": {
                    "AccessToken": {
                        "description": "The access token.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    },
                    "FriendlyDeviceName": {
                        "description": "The friendly device name.",
                        "type": "string"
                    },
                    "Session": {
                        "description": "The session which should be passed both ways in challenge-response calls to the service.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "type": "string"
                    },
                    "UserCode": {
                        "description": "The one time password computed using the secret code returned by ",
                        "maxLength": 6,
                        "minLength": 6,
                        "pattern": "[0-9]+",
                        "type": "string"
                    }
                },
                "required": [
                    "UserCode"
                ],
                "type": "object"
            },
            "VerifySoftwareTokenResponse": {
                "properties": {
                    "Session": {
                        "description": "The session which should be passed both ways in challenge-response calls to the service.",
                        "maxLength": 2048,
                        "minLength": 20,
                        "type": "string"
                    },
                    "Status": {
                        "description": "The status of the verify software token.",
                        "enum": [
                            "SUCCESS",
                            "ERROR"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "VerifySoftwareTokenResponseType": {
                "enum": [
                    "SUCCESS",
                    "ERROR"
                ],
                "type": "string"
            },
            "VerifyUserAttributeRequest": {
                "description": "Represents the request to verify user attributes.",
                "properties": {
                    "AccessToken": {
                        "description": "Represents the access token of the request to verify user attributes.",
                        "format": "password",
                        "pattern": "[A-Za-z0-9-_=.]+",
                        "type": "string"
                    },
                    "AttributeName": {
                        "description": "The attribute name in the request to verify user attributes.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                        "type": "string"
                    },
                    "Code": {
                        "description": "The verification code in the request to verify user attributes.",
                        "maxLength": 2048,
                        "minLength": 1,
                        "pattern": "[\\S]+",
                        "type": "string"
                    }
                },
                "required": [
                    "AccessToken",
                    "AttributeName",
                    "Code"
                ],
                "type": "object"
            },
            "VerifyUserAttributeResponse": {
                "description": "A container representing the response from the server from the request to verify user attributes.",
                "properties": {},
                "type": "object"
            }
        },
        "parameters": {
            "Action": {
                "in": "query",
                "name": "Action",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "Version": {
                "in": "query",
                "name": "Version",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Algorithm": {
                "in": "header",
                "name": "X-Amz-Algorithm",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Content-Sha256": {
                "in": "header",
                "name": "X-Amz-Content-Sha256",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Credential": {
                "in": "header",
                "name": "X-Amz-Credential",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Date": {
                "in": "header",
                "name": "X-Amz-Date",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Security-Token": {
                "in": "header",
                "name": "X-Amz-Security-Token",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Signature": {
                "in": "header",
                "name": "X-Amz-Signature",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-SignedHeaders": {
                "in": "header",
                "name": "X-Amz-SignedHeaders",
                "required": false,
                "schema": {
                    "type": "string"
                }
            }
        },
        "requestBodies": {
            "AdminAddUserToGroupBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "GroupName": {
                                    "description": "The group name.",
                                    "maxLength": 128,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "UserPoolId": {
                                    "description": "The user pool ID for the user pool.",
                                    "maxLength": 55,
                                    "minLength": 1,
                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                    "type": "string"
                                },
                                "Username": {
                                    "description": "The username for the user.",
                                    "format": "password",
                                    "maxLength": 128,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "UserPoolId",
                                "Username",
                                "GroupName"
                            ],
                            "type": "object"
                        }
                    }
                },
                "required": true
            },
            "DeleteGroupBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "GroupName": {
                                    "description": "The name of the group.",
                                    "maxLength": 128,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "UserPoolId": {
                                    "description": "The user pool ID for the user pool.",
                                    "maxLength": 55,
                                    "minLength": 1,
                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "GroupName",
                                "UserPoolId"
                            ],
                            "type": "object"
                        }
                    }
                },
                "required": true
            },
            "DeleteIdentityProviderBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "ProviderName": {
                                    "description": "The identity provider name.",
                                    "maxLength": 32,
                                    "minLength": 1,
                                    "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
                                    "type": "string"
                                },
                                "UserPoolId": {
                                    "description": "The user pool ID.",
                                    "maxLength": 55,
                                    "minLength": 1,
                                    "pattern": "[\\w-]+_[0-9a-zA-Z]+",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "UserPoolId",
                                "ProviderName"
                            ],
                            "type": "object"
                        }
                    }
                },
                "required": true
            }
        },
        "securitySchemes": {
            "hmac": {
                "description": "Amazon Signature authorization v4",
                "in": "header",
                "name": "Authorization",
                "type": "apiKey",
                "x-amazon-apigateway-authtype": "awsSigv4"
            }
        }
    }
}